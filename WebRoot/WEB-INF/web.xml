<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>springmvc_mybatis1208</display-name>
	
	<!-- 连接池 启用 Web 监控统计功能    start-->  
  <filter>  
     <filter-name> DruidWebStatFilter </filter-name>  
     <filter-class> com.alibaba.druid.support.http.WebStatFilter </filter-class>  
     <init-param>  
         <param-name> exclusions </param-name>  
         <param-value> *. js ,*. gif ,*. jpg ,*. png ,*. css ,*. ico ,/ druid /* </param-value>  
     </init-param>  
  </filter>  
  <filter-mapping>  
     <filter-name> DruidWebStatFilter </filter-name>  
     <url-pattern>/*</url-pattern>  
  </filter-mapping>  
  <servlet>  
     <servlet-name> DruidStatView </servlet-name>  
     <servlet-class> com.alibaba.druid.support.http.StatViewServlet </servlet-class>  
  </servlet>  
  <servlet-mapping>  
     <servlet-name> DruidStatView </servlet-name>  
     <url-pattern>/druid/* </url-pattern>  
  </servlet-mapping>  
  <!-- 连接池 启用 Web 监控统计功能    end-->  
	
	 <filter>     
	    <filter-name>crossFilter</filter-name>  
	   <filter-class>com.myehr.interceptor.CrossFilter</filter-class>  
	 </filter>  
	
	  <context-param>
	    <param-name>webAppRootKey</param-name>
	    <param-value>myehr.root</param-value>
	  </context-param>
	  <context-param>
	    <param-name>log4jConfigLocation</param-name>
	    <param-value>classpath:log4j.xml</param-value>
	  </context-param>
	  <context-param>
	    <param-name>log4jRefreshInterval</param-name>
	    <param-value>6000</param-value>
	  </context-param>
	  <listener>
	    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	  </listener>
	 
	<!-- 加载spring容器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/classes/spring/applicationContext*.xml</param-value>
	</context-param>
	<listener>  
	    <listener-class>
	    	com.myehr.common.util.ContextLoaderListenerOverWrite  
	    </listener-class>  
	</listener> 
	
	<listener>  
	    <listener-class>
	    	com.myehr.common.util.MyServletRequestListener  
	    </listener-class>  
	</listener> 
	
	<listener>  
	    <listener-class>
	    	com.myehr.common.util.MyHttpSessionListener  
	    </listener-class>  
	</listener> 
	<listener>
		 <listener-class>
		  org.springframework.web.context.request.RequestContextListener
		 </listener-class>
	</listener>
	<!-- springmvc前端控制器 -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml） -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
	</servlet>
	
	
	
	<!-- webservice控制器 -->
	<servlet>  
	    <display-name>CXF Servlet</display-name>  
	    <servlet-name>CXFServlet</servlet-name>  
	    <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>  
	    <load-on-startup>1</load-on-startup>  
	</servlet>  
	  
	<servlet-mapping>  
	    <servlet-name>CXFServlet</servlet-name>  
	    <url-pattern>/webservice/*</url-pattern>  
	</servlet-mapping> 


	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析 
			第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析 
			使用此种方式可以实现 RESTful风格的url 
			第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时， 仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。 -->
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	
	
	<!-- springmvc前端控制器，rest配置 -->
	<servlet>
		<servlet-name>springmvc_rest</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml） -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
	</servlet>

	<!-- post乱码过虑器 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 配置登陆过滤器 -->
	<filter>
		<filter-name>login</filter-name>
		<filter-class>com.myehr.interceptor.LoginInterceptor</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>login</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<welcome-file-list>
		<welcome-file>login.html</welcome-file>
		<welcome-file>login.htm</welcome-file>
		<welcome-file>login.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	
	<session-config>
		<session-timeout>15</session-timeout>
	</session-config>
</web-app>