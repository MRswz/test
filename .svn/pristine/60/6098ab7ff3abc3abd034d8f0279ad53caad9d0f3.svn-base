/*jquery.min.js*/
/*! jQuery v1.11.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k="".trim,l={},m="1.11.0",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(l.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:k&&!k.call("\ufeff\xa0")?function(a){return null==a?"":k.call(a)}:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||n.guid++,e):void 0},now:function(){return+new Date},support:l}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s="sizzle"+-new Date,t=a.document,u=0,v=0,w=eb(),x=eb(),y=eb(),z=function(a,b){return a===b&&(j=!0),0},A="undefined",B=1<<31,C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=D.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",M=L.replace("w","w#"),N="\\["+K+"*("+L+")"+K+"*(?:([*^$|!~]?=)"+K+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+M+")|)|)"+K+"*\\]",O=":("+L+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+N.replace(3,8)+")*)|.*)\\)|)",P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(O),U=new RegExp("^"+M+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L.replace("w","w*")+")"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=/'|\\/g,ab=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),bb=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{G.apply(D=H.call(t.childNodes),t.childNodes),D[t.childNodes.length].nodeType}catch(cb){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function db(a,b,d,e){var f,g,h,i,j,m,p,q,u,v;if((b?b.ownerDocument||b:t)!==l&&k(b),b=b||l,d=d||[],!a||"string"!=typeof a)return d;if(1!==(i=b.nodeType)&&9!==i)return[];if(n&&!e){if(f=Z.exec(a))if(h=f[1]){if(9===i){if(g=b.getElementById(h),!g||!g.parentNode)return d;if(g.id===h)return d.push(g),d}else if(b.ownerDocument&&(g=b.ownerDocument.getElementById(h))&&r(b,g)&&g.id===h)return d.push(g),d}else{if(f[2])return G.apply(d,b.getElementsByTagName(a)),d;if((h=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(h)),d}if(c.qsa&&(!o||!o.test(a))){if(q=p=s,u=b,v=9===i&&a,1===i&&"object"!==b.nodeName.toLowerCase()){m=ob(a),(p=b.getAttribute("id"))?q=p.replace(_,"\\$&"):b.setAttribute("id",q),q="[id='"+q+"'] ",j=m.length;while(j--)m[j]=q+pb(m[j]);u=$.test(a)&&mb(b.parentNode)||b,v=m.join(",")}if(v)try{return G.apply(d,u.querySelectorAll(v)),d}catch(w){}finally{p||b.removeAttribute("id")}}}return xb(a.replace(P,"$1"),b,d,e)}function eb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function fb(a){return a[s]=!0,a}function gb(a){var b=l.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function hb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function ib(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||B)-(~a.sourceIndex||B);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function jb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function kb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function lb(a){return fb(function(b){return b=+b,fb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function mb(a){return a&&typeof a.getElementsByTagName!==A&&a}c=db.support={},f=db.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},k=db.setDocument=function(a){var b,e=a?a.ownerDocument||a:t,g=e.defaultView;return e!==l&&9===e.nodeType&&e.documentElement?(l=e,m=e.documentElement,n=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){k()},!1):g.attachEvent&&g.attachEvent("onunload",function(){k()})),c.attributes=gb(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=gb(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(e.getElementsByClassName)&&gb(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=gb(function(a){return m.appendChild(a).id=s,!e.getElementsByName||!e.getElementsByName(s).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==A&&n){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){var c=typeof a.getAttributeNode!==A&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==A?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==A&&n?b.getElementsByClassName(a):void 0},p=[],o=[],(c.qsa=Y.test(e.querySelectorAll))&&(gb(function(a){a.innerHTML="<select t=''><option selected=''></option></select>",a.querySelectorAll("[t^='']").length&&o.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||o.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll(":checked").length||o.push(":checked")}),gb(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&o.push("name"+K+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||o.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),o.push(",.*:")})),(c.matchesSelector=Y.test(q=m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&gb(function(a){c.disconnectedMatch=q.call(a,"div"),q.call(a,"[s!='']:x"),p.push("!=",O)}),o=o.length&&new RegExp(o.join("|")),p=p.length&&new RegExp(p.join("|")),b=Y.test(m.compareDocumentPosition),r=b||Y.test(m.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},z=b?function(a,b){if(a===b)return j=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===t&&r(t,a)?-1:b===e||b.ownerDocument===t&&r(t,b)?1:i?I.call(i,a)-I.call(i,b):0:4&d?-1:1)}:function(a,b){if(a===b)return j=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],k=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:i?I.call(i,a)-I.call(i,b):0;if(f===g)return ib(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)k.unshift(c);while(h[d]===k[d])d++;return d?ib(h[d],k[d]):h[d]===t?-1:k[d]===t?1:0},e):l},db.matches=function(a,b){return db(a,null,null,b)},db.matchesSelector=function(a,b){if((a.ownerDocument||a)!==l&&k(a),b=b.replace(S,"='$1']"),!(!c.matchesSelector||!n||p&&p.test(b)||o&&o.test(b)))try{var d=q.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return db(b,l,null,[a]).length>0},db.contains=function(a,b){return(a.ownerDocument||a)!==l&&k(a),r(a,b)},db.attr=function(a,b){(a.ownerDocument||a)!==l&&k(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!n):void 0;return void 0!==f?f:c.attributes||!n?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},db.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},db.uniqueSort=function(a){var b,d=[],e=0,f=0;if(j=!c.detectDuplicates,i=!c.sortStable&&a.slice(0),a.sort(z),j){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return i=null,a},e=db.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=db.selectors={cacheLength:50,createPseudo:fb,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ab,bb),a[3]=(a[4]||a[5]||"").replace(ab,bb),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||db.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&db.error(a[0]),a},PSEUDO:function(a){var b,c=!a[5]&&a[2];return V.CHILD.test(a[0])?null:(a[3]&&void 0!==a[4]?a[2]=a[4]:c&&T.test(c)&&(b=ob(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ab,bb).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=w[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&w(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==A&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=db.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),t=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&t){k=q[s]||(q[s]={}),j=k[a]||[],n=j[0]===u&&j[1],m=j[0]===u&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[u,n,m];break}}else if(t&&(j=(b[s]||(b[s]={}))[a])&&j[0]===u)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(t&&((l[s]||(l[s]={}))[a]=[u,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||db.error("unsupported pseudo: "+a);return e[s]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?fb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:fb(function(a){var b=[],c=[],d=g(a.replace(P,"$1"));return d[s]?fb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:fb(function(a){return function(b){return db(a,b).length>0}}),contains:fb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:fb(function(a){return U.test(a||"")||db.error("unsupported lang: "+a),a=a.replace(ab,bb).toLowerCase(),function(b){var c;do if(c=n?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===m},focus:function(a){return a===l.activeElement&&(!l.hasFocus||l.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:lb(function(){return[0]}),last:lb(function(a,b){return[b-1]}),eq:lb(function(a,b,c){return[0>c?c+b:c]}),even:lb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:lb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:lb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:lb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=jb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=kb(b);function nb(){}nb.prototype=d.filters=d.pseudos,d.setFilters=new nb;function ob(a,b){var c,e,f,g,h,i,j,k=x[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=Q.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?db.error(a):x(a,i).slice(0)}function pb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function qb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=v++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[u,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[s]||(b[s]={}),(h=i[d])&&h[0]===u&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function rb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function sb(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function tb(a,b,c,d,e,f){return d&&!d[s]&&(d=tb(d)),e&&!e[s]&&(e=tb(e,f)),fb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||wb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:sb(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=sb(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=sb(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ub(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],i=g||d.relative[" "],j=g?1:0,k=qb(function(a){return a===b},i,!0),l=qb(function(a){return I.call(b,a)>-1},i,!0),m=[function(a,c,d){return!g&&(d||c!==h)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>j;j++)if(c=d.relative[a[j].type])m=[qb(rb(m),c)];else{if(c=d.filter[a[j].type].apply(null,a[j].matches),c[s]){for(e=++j;f>e;e++)if(d.relative[a[e].type])break;return tb(j>1&&rb(m),j>1&&pb(a.slice(0,j-1).concat({value:" "===a[j-2].type?"*":""})).replace(P,"$1"),c,e>j&&ub(a.slice(j,e)),f>e&&ub(a=a.slice(e)),f>e&&pb(a))}m.push(c)}return rb(m)}function vb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,i,j,k){var m,n,o,p=0,q="0",r=f&&[],s=[],t=h,v=f||e&&d.find.TAG("*",k),w=u+=null==t?1:Math.random()||.1,x=v.length;for(k&&(h=g!==l&&g);q!==x&&null!=(m=v[q]);q++){if(e&&m){n=0;while(o=a[n++])if(o(m,g,i)){j.push(m);break}k&&(u=w)}c&&((m=!o&&m)&&p--,f&&r.push(m))}if(p+=q,c&&q!==p){n=0;while(o=b[n++])o(r,s,g,i);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=E.call(j));s=sb(s)}G.apply(j,s),k&&!f&&s.length>0&&p+b.length>1&&db.uniqueSort(j)}return k&&(u=w,h=t),r};return c?fb(f):f}g=db.compile=function(a,b){var c,d=[],e=[],f=y[a+" "];if(!f){b||(b=ob(a)),c=b.length;while(c--)f=ub(b[c]),f[s]?d.push(f):e.push(f);f=y(a,vb(e,d))}return f};function wb(a,b,c){for(var d=0,e=b.length;e>d;d++)db(a,b[d],c);return c}function xb(a,b,e,f){var h,i,j,k,l,m=ob(a);if(!f&&1===m.length){if(i=m[0]=m[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&c.getById&&9===b.nodeType&&n&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(ab,bb),b)||[])[0],!b)return e;a=a.slice(i.shift().value.length)}h=V.needsContext.test(a)?0:i.length;while(h--){if(j=i[h],d.relative[k=j.type])break;if((l=d.find[k])&&(f=l(j.matches[0].replace(ab,bb),$.test(i[0].type)&&mb(b.parentNode)||b))){if(i.splice(h,1),a=f.length&&pb(i),!a)return G.apply(e,f),e;break}}}return g(a,m)(f,b,!n,e,$.test(a)&&mb(b.parentNode)||b),e}return c.sortStable=s.split("").sort(z).join("")===s,c.detectDuplicates=!!j,k(),c.sortDetached=gb(function(a){return 1&a.compareDocumentPosition(l.createElement("div"))}),gb(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||hb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&gb(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||hb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),gb(function(a){return null==a.getAttribute("disabled")})||hb(J,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),db}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=a.document,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,B=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:A.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:z,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=z.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return y.find(a);this.length=1,this[0]=d}return this.context=z,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};B.prototype=n.fn,y=n(z);var C=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!n(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function E(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return E(a,"nextSibling")},prev:function(a){return E(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(D[a]||(e=n.unique(e)),C.test(a)&&(e=e.reverse())),this.pushStack(e)}});var F=/\S+/g,G={};function H(a){var b=G[a]={};return n.each(a.match(F)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?G[a]||H(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&n.each(arguments,function(a,c){var d;while((d=n.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){if(a===!0?!--n.readyWait:!n.isReady){if(!z.body)return setTimeout(n.ready);n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(z,[n]),n.fn.trigger&&n(z).trigger("ready").off("ready"))}}});function J(){z.addEventListener?(z.removeEventListener("DOMContentLoaded",K,!1),a.removeEventListener("load",K,!1)):(z.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(z.addEventListener||"load"===event.type||"complete"===z.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===z.readyState)setTimeout(n.ready);else if(z.addEventListener)z.addEventListener("DOMContentLoaded",K,!1),a.addEventListener("load",K,!1);else{z.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&z.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!n.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}J(),n.ready()}}()}return I.promise(b)};var L="undefined",M;for(M in n(l))break;l.ownLast="0"!==M,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c=z.getElementsByTagName("body")[0];c&&(a=z.createElement("div"),a.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",b=z.createElement("div"),c.appendChild(a).appendChild(b),typeof b.style.zoom!==L&&(b.style.cssText="border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1",(l.inlineBlockNeedsLayout=3===b.offsetWidth)&&(c.style.zoom=1)),c.removeChild(a),a=b=null)}),function(){var a=z.createElement("div");if(null==l.deleteExpando){l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}}a=null}(),n.acceptData=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(n.acceptData(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f
}}function S(a,b,c){if(n.acceptData(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d]));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},W=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},X=/^(?:checkbox|radio)$/i;!function(){var a=z.createDocumentFragment(),b=z.createElement("div"),c=z.createElement("input");if(b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a>",l.leadingWhitespace=3===b.firstChild.nodeType,l.tbody=!b.getElementsByTagName("tbody").length,l.htmlSerialize=!!b.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==z.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,a.appendChild(c),l.appendChecked=c.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,a.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){l.noCloneEvent=!1}),b.cloneNode(!0).click()),null==l.deleteExpando){l.deleteExpando=!0;try{delete b.test}catch(d){l.deleteExpando=!1}}a=b=c=null}(),function(){var b,c,d=z.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),l[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var Y=/^(?:input|select|textarea)$/i,Z=/^key/,$=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,ab=/^([^.]*)(?:\.(.+)|)$/;function bb(){return!0}function cb(){return!1}function db(){try{return z.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof n===L||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(F)||[""],h=b.length;while(h--)f=ab.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(F)||[""],j=b.length;while(j--)if(h=ab.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,m,o=[d||z],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||z,3!==d.nodeType&&8!==d.nodeType&&!_.test(p+n.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[n.expando]?b:new n.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),k=n.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!n.isWindow(d)){for(i=k.delegateType||p,_.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||z)&&o.push(l.defaultView||l.parentWindow||a)}m=0;while((h=o[m++])&&!b.isPropagationStopped())b.type=m>1?i:k.bindType||p,f=(n._data(h,"events")||{})[b.type]&&n._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&n.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&n.acceptData(d)&&g&&d[p]&&!n.isWindow(d)){l=d[g],l&&(d[g]=null),n.event.triggered=p;try{d[p]()}catch(r){}n.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((n.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?n(c,this).index(i)>=0:n.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=$.test(e)?this.mouseHooks:Z.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||z),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||z,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==db()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===db()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=z.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===L&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&(a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault())?bb:cb):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:cb,isPropagationStopped:cb,isImmediatePropagationStopped:cb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=bb,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=bb,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submitBubbles||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?b.form:void 0;c&&!n._data(c,"submitBubbles")&&(n.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),n._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.changeBubbles||(n.event.special.change={setup:function(){return Y.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),n.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),n.event.simulate("change",this,a,!0)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;Y.test(b.nodeName)&&!n._data(b,"changeBubbles")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a,!0)}),n._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!Y.test(this.nodeName)}}),l.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=cb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return n().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=cb),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});function eb(a){var b=fb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var fb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gb=/ jQuery\d+="(?:null|\d+)"/g,hb=new RegExp("<(?:"+fb+")[\\s/>]","i"),ib=/^\s+/,jb=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,kb=/<([\w:]+)/,lb=/<tbody/i,mb=/<|&#?\w+;/,nb=/<(?:script|style|link)/i,ob=/checked\s*(?:[^=]|=\s*.checked.)/i,pb=/^$|\/(?:java|ecma)script/i,qb=/^true\/(.*)/,rb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,sb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},tb=eb(z),ub=tb.appendChild(z.createElement("div"));sb.optgroup=sb.option,sb.tbody=sb.tfoot=sb.colgroup=sb.caption=sb.thead,sb.th=sb.td;function vb(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==L?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==L?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,vb(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function wb(a){X.test(a.type)&&(a.defaultChecked=a.checked)}function xb(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function yb(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function zb(a){var b=qb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ab(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}function Bb(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Cb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(yb(b).text=a.text,zb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&X.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}n.extend({clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!hb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(ub.innerHTML=a.outerHTML,ub.removeChild(f=ub.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=vb(f),h=vb(a),g=0;null!=(e=h[g]);++g)d[g]&&Cb(e,d[g]);if(b)if(c)for(h=h||vb(a),d=d||vb(f),g=0;null!=(e=h[g]);g++)Bb(e,d[g]);else Bb(a,f);return d=vb(f,"script"),d.length>0&&Ab(d,!i&&vb(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k,m=a.length,o=eb(b),p=[],q=0;m>q;q++)if(f=a[q],f||0===f)if("object"===n.type(f))n.merge(p,f.nodeType?[f]:f);else if(mb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(kb.exec(f)||["",""])[1].toLowerCase(),k=sb[i]||sb._default,h.innerHTML=k[1]+f.replace(jb,"<$1></$2>")+k[2],e=k[0];while(e--)h=h.lastChild;if(!l.leadingWhitespace&&ib.test(f)&&p.push(b.createTextNode(ib.exec(f)[0])),!l.tbody){f="table"!==i||lb.test(f)?"<table>"!==k[1]||lb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)n.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}n.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),l.appendChecked||n.grep(vb(p,"input"),wb),q=0;while(f=p[q++])if((!d||-1===n.inArray(f,d))&&(g=n.contains(f.ownerDocument,f),h=vb(o.appendChild(f),"script"),g&&Ab(h),c)){e=0;while(f=h[e++])pb.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.deleteExpando,m=n.event.special;null!=(d=a[h]);h++)if((b||n.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k?delete d[i]:typeof d.removeAttribute!==L?d.removeAttribute(i):d[i]=null,c.push(f))}}}),n.fn.extend({text:function(a){return W(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||z).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(vb(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&Ab(vb(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(vb(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return W(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(gb,""):void 0;if(!("string"!=typeof a||nb.test(a)||!l.htmlSerialize&&hb.test(a)||!l.leadingWhitespace&&ib.test(a)||sb[(kb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(jb,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(vb(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(vb(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,k=this.length,m=this,o=k-1,p=a[0],q=n.isFunction(p);if(q||k>1&&"string"==typeof p&&!l.checkClone&&ob.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(k&&(i=n.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=n.map(vb(i,"script"),yb),f=g.length;k>j;j++)d=i,j!==o&&(d=n.clone(d,!0,!0),f&&n.merge(g,vb(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,n.map(g,zb),j=0;f>j;j++)d=g[j],pb.test(d.type||"")&&!n._data(d,"globalEval")&&n.contains(h,d)&&(d.src?n._evalUrl&&n._evalUrl(d.src):n.globalEval((d.text||d.textContent||d.innerHTML||"").replace(rb,"")));i=c=null}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],g=n(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Db,Eb={};function Fb(b,c){var d=n(c.createElement(b)).appendTo(c.body),e=a.getDefaultComputedStyle?a.getDefaultComputedStyle(d[0]).display:n.css(d[0],"display");return d.detach(),e}function Gb(a){var b=z,c=Eb[a];return c||(c=Fb(a,b),"none"!==c&&c||(Db=(Db||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Db[0].contentWindow||Db[0].contentDocument).document,b.write(),b.close(),c=Fb(a,b),Db.detach()),Eb[a]=c),c}!function(){var a,b,c=z.createElement("div"),d="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],a.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(a.style.opacity),l.cssFloat=!!a.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===c.style.backgroundClip,a=c=null,l.shrinkWrapBlocks=function(){var a,c,e,f;if(null==b){if(a=z.getElementsByTagName("body")[0],!a)return;f="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",c=z.createElement("div"),e=z.createElement("div"),a.appendChild(c).appendChild(e),b=!1,typeof e.style.zoom!==L&&(e.style.cssText=d+";width:1px;padding:1px;zoom:1",e.innerHTML="<div></div>",e.firstChild.style.width="5px",b=3!==e.offsetWidth),a.removeChild(c),a=c=e=null}return b}}();var Hb=/^margin/,Ib=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Jb,Kb,Lb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Jb=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),Ib.test(g)&&Hb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):z.documentElement.currentStyle&&(Jb=function(a){return a.currentStyle},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Ib.test(g)&&!Lb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Mb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h=z.createElement("div"),i="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",j="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";h.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",b=h.getElementsByTagName("a")[0],b.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(b.style.opacity),l.cssFloat=!!b.style.cssFloat,h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,b=h=null,n.extend(l,{reliableHiddenOffsets:function(){if(null!=c)return c;var a,b,d,e=z.createElement("div"),f=z.getElementsByTagName("body")[0];if(f)return e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=z.createElement("div"),a.style.cssText=i,f.appendChild(a).appendChild(e),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",b=e.getElementsByTagName("td"),b[0].style.cssText="padding:0;margin:0;border:0;display:none",d=0===b[0].offsetHeight,b[0].style.display="",b[1].style.display="none",c=d&&0===b[0].offsetHeight,f.removeChild(a),e=f=null,c},boxSizing:function(){return null==d&&k(),d},boxSizingReliable:function(){return null==e&&k(),e},pixelPosition:function(){return null==f&&k(),f},reliableMarginRight:function(){var b,c,d,e;if(null==g&&a.getComputedStyle){if(b=z.getElementsByTagName("body")[0],!b)return;c=z.createElement("div"),d=z.createElement("div"),c.style.cssText=i,b.appendChild(c).appendChild(d),e=d.appendChild(z.createElement("div")),e.style.cssText=d.style.cssText=j,e.style.marginRight=e.style.width="0",d.style.width="1px",g=!parseFloat((a.getComputedStyle(e,null)||{}).marginRight),b.removeChild(c)}return g}});function k(){var b,c,h=z.getElementsByTagName("body")[0];h&&(b=z.createElement("div"),c=z.createElement("div"),b.style.cssText=i,h.appendChild(b).appendChild(c),c.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;display:block;padding:1px;border:1px;width:4px;margin-top:1%;top:1%",n.swap(h,null!=h.style.zoom?{zoom:1}:{},function(){d=4===c.offsetWidth}),e=!0,f=!1,g=!0,a.getComputedStyle&&(f="1%"!==(a.getComputedStyle(c,null)||{}).top,e="4px"===(a.getComputedStyle(c,null)||{width:"4px"}).width),h.removeChild(b),c=h=null)}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Nb=/alpha\([^)]*\)/i,Ob=/opacity\s*=\s*([^)]*)/,Pb=/^(none|table(?!-c[ea]).+)/,Qb=new RegExp("^("+T+")(.*)$","i"),Rb=new RegExp("^([+-])=("+T+")","i"),Sb={position:"absolute",visibility:"hidden",display:"block"},Tb={letterSpacing:0,fontWeight:400},Ub=["Webkit","O","Moz","ms"];function Vb(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Ub.length;while(e--)if(b=Ub[e]+c,b in a)return b;return d}function Wb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=n._data(d,"olddisplay",Gb(d.nodeName)))):f[g]||(e=V(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Xb(a,b,c){var d=Qb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Yb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Zb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Jb(a),g=l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Kb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ib.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Yb(a,b,c||(g?"border":"content"),d,f)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Kb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=Vb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Rb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]="",i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Vb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Kb(a,b,d)),"normal"===f&&b in Tb&&(f=Tb[b]),""===c||c?(e=parseFloat(f),c===!0||n.isNumeric(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?0===a.offsetWidth&&Pb.test(n.css(a,"display"))?n.swap(a,Sb,function(){return Zb(a,b,d)}):Zb(a,b,d):void 0},set:function(a,c,d){var e=d&&Jb(a);return Xb(a,c,d?Yb(a,b,d,l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Ob.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Nb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Nb.test(f)?f.replace(Nb,e):f+" "+e)}}),n.cssHooks.marginRight=Mb(l.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},Kb,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Hb.test(a)||(n.cssHooks[a+b].set=Xb)}),n.fn.extend({css:function(a,b){return W(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Jb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)
},a,b,arguments.length>1)},show:function(){return Wb(this,!0)},hide:function(){return Wb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function $b(a,b,c,d,e){return new $b.prototype.init(a,b,c,d,e)}n.Tween=$b,$b.prototype={constructor:$b,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=$b.propHooks[this.prop];return a&&a.get?a.get(this):$b.propHooks._default.get(this)},run:function(a){var b,c=$b.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):$b.propHooks._default.set(this),this}},$b.prototype.init.prototype=$b.prototype,$b.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},$b.propHooks.scrollTop=$b.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=$b.prototype.init,n.fx.step={};var _b,ac,bc=/^(?:toggle|show|hide)$/,cc=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),dc=/queueHooks$/,ec=[jc],fc={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=cc.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&cc.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function gc(){return setTimeout(function(){_b=void 0}),_b=n.now()}function hc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=U[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function ic(a,b,c){for(var d,e=(fc[b]||[]).concat(fc["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function jc(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&V(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k=Gb(a.nodeName),"none"===j&&(j=k),"inline"===j&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==k?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],bc.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}if(!n.isEmptyObject(o)){r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=ic(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function kc(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function lc(a,b,c){var d,e,f=0,g=ec.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=_b||gc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:_b||gc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(kc(k,j.opts.specialEasing);g>f;f++)if(d=ec[f].call(j,a,k,j.opts))return d;return n.map(k,ic,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(lc,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],fc[c]=fc[c]||[],fc[c].unshift(b)},prefilter:function(a,b){b?ec.unshift(a):ec.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=lc(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&dc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(hc(b,!0),a,d,e)}}),n.each({slideDown:hc("show"),slideUp:hc("hide"),slideToggle:hc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(_b=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),_b=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ac||(ac=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(ac),ac=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e=z.createElement("div");e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=e.getElementsByTagName("a")[0],c=z.createElement("select"),d=c.appendChild(z.createElement("option")),b=e.getElementsByTagName("input")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==e.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=d.selected,l.enctype=!!z.createElement("form").enctype,c.disabled=!0,l.optDisabled=!d.disabled,b=z.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value,a=b=c=d=e=null}();var mc=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(mc,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.text(a)}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(l.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var nc,oc,pc=n.expr.attrHandle,qc=/^(?:checked|selected)$/i,rc=l.getSetAttribute,sc=l.input;n.fn.extend({attr:function(a,b){return W(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===L?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?oc:nc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(F);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?sc&&rc||!qc.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(rc?c:d)},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),oc={set:function(a,b,c){return b===!1?n.removeAttr(a,c):sc&&rc||!qc.test(c)?a.setAttribute(!rc&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=pc[b]||n.find.attr;pc[b]=sc&&rc||!qc.test(b)?function(a,b,d){var e,f;return d||(f=pc[b],pc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,pc[b]=f),e}:function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),sc&&rc||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):nc&&nc.set(a,b,c)}}),rc||(nc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},pc.id=pc.name=pc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:nc.set},n.attrHooks.contenteditable={set:function(a,b,c){nc.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var tc=/^(?:input|select|textarea|button|object)$/i,uc=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return W(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):tc.test(a.nodeName)||uc.test(a.nodeName)&&a.href?0:-1}}}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var vc=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(F)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===L||"boolean"===c)&&(this.className&&n._data(this,"__className__",this.className),this.className=this.className||a===!1?"":n._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(vc," ").indexOf(b)>=0)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var wc=n.now(),xc=/\?/,yc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(yc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var zc,Ac,Bc=/#.*$/,Cc=/([?&])_=[^&]*/,Dc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ec=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fc=/^(?:GET|HEAD)$/,Gc=/^\/\//,Hc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ic={},Jc={},Kc="*/".concat("*");try{Ac=location.href}catch(Lc){Ac=z.createElement("a"),Ac.href="",Ac=Ac.href}zc=Hc.exec(Ac.toLowerCase())||[];function Mc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(F)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Nc(a,b,c,d){var e={},f=a===Jc;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Oc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Pc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Qc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ac,type:"GET",isLocal:Ec.test(zc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Oc(Oc(a,n.ajaxSettings),b):Oc(n.ajaxSettings,a)},ajaxPrefilter:Mc(Ic),ajaxTransport:Mc(Jc),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Dc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||Ac)+"").replace(Bc,"").replace(Gc,zc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(F)||[""],null==k.crossDomain&&(c=Hc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===zc[1]&&c[2]===zc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(zc[3]||("http:"===zc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),Nc(Ic,k,b,v),2===t)return v;h=k.global,h&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Fc.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(xc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Cc.test(e)?e.replace(Cc,"$1_="+wc++):e+(xc.test(e)?"&":"?")+"_="+wc++)),k.ifModified&&(n.lastModified[e]&&v.setRequestHeader("If-Modified-Since",n.lastModified[e]),n.etag[e]&&v.setRequestHeader("If-None-Match",n.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Kc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Nc(Jc,k,b,v)){v.readyState=1,h&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Pc(k,v,c)),u=Qc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(n.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!l.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||n.css(a,"display"))},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var Rc=/%20/g,Sc=/\[\]$/,Tc=/\r?\n/g,Uc=/^(?:submit|button|image|reset|file)$/i,Vc=/^(?:input|select|textarea|keygen)/i;function Wc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Sc.test(a)?d(a,e):Wc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Wc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Wc(c,a[c],b,e);return d.join("&").replace(Rc,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Vc.test(this.nodeName)&&!Uc.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Tc,"\r\n")}}):{name:b.name,value:c.replace(Tc,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&$c()||_c()}:$c;var Xc=0,Yc={},Zc=n.ajaxSettings.xhr();a.ActiveXObject&&n(a).on("unload",function(){for(var a in Yc)Yc[a](void 0,!0)}),l.cors=!!Zc&&"withCredentials"in Zc,Zc=l.ajax=!!Zc,Zc&&n.ajaxTransport(function(a){if(!a.crossDomain||l.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Xc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Yc[g],b=void 0,f.onreadystatechange=n.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Yc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function $c(){try{return new a.XMLHttpRequest}catch(b){}}function _c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=z.head||n("head")[0]||z.documentElement;return{send:function(d,e){b=z.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var ad=[],bd=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=ad.pop()||n.expando+"_"+wc++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(bd.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&bd.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(bd,"$1"+e):b.jsonp!==!1&&(b.url+=(xc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,ad.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||z;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var cd=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&cd)return cd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=a.slice(h,a.length),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&n.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var dd=a.document.documentElement;function ed(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?(typeof e.getBoundingClientRect!==L&&(d=e.getBoundingClientRect()),c=ed(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||dd;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||dd})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return W(this,function(a,d,e){var f=ed(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Mb(l.pixelPosition,function(a,c){return c?(c=Kb(a,b),Ib.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return W(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var fd=a.jQuery,gd=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=gd),b&&a.jQuery===n&&(a.jQuery=fd),n},typeof b===L&&(a.jQuery=a.$=n),n});
/*common1.js*/
$(function(){  
	$(":input").blur(function(){   //此处可获取各种表单如（：text/:button）  
		var required = $(this).attr('required');
		//验证必填
		var checkvalue1 = false;
		if(required=="required"){
			checkvalue1 = checkRequired($(this));
		}
		var vtype = $(this).attr('vtype');
		
		var checkvalue2 = false;
		var checkvalue3 = false;
		if(vtype!="undefined" && vtype!="" && vtype!=null){
			checkvalue2 = checkCommon($(this));
			if(vtype.indexOf("maxLength")>-1 || vtype.indexOf("minLength")>-1){
				checkvalue3 = checkLength($(this));
			}
		}
		
		if(checkvalue1==true&&checkvalue2==true&&checkvalue3==true){
			writeCheckErrorMessage($(this),"");
		}
	});  
 });
 
function checkCommon(obj){
//	var bb=obj.val();
//	var vtype=obj.attr('vtype');
//	var vtypes= new Array();
//	vtypes=vtype.split(";");
//	
//	var re=new RegExp("[^?!@#$%\^&*()]+$");
//	var errorText = "包含非法字符";
//	if (bb !="" && bb!=null) {
//		if(vtypes[0].indexOf("letter")==0){
//			re = new RegExp("^[a-zA-Z\_]+$");//自定义英文
//			errorText = "请输入正确的英文";
//		}
//	    if(vtypes[0].indexOf("zh")==0){
//			re = new RegExp("^[\u4e00-\u9fa5]+$");//自定义中文
//			errorText = "请输入正确的中文";
//		}
//		if(vtypes[0].indexOf("chinaMobile")==0){
//			re = /1\d{10}/;//自定义手机号码
//			errorText = "请输入正确的手机号码";
//		}
//		if(vtypes[0].indexOf("chinaZipcode")==0){
//			re = /[1-9]{1}(\d+){5}/;//自定义邮政编码
//			errorText = "请输入正确的英文";
//		}
//		if(vtypes[0].indexOf("chinaIDNo")==0){
//			re = /^(\d{15}$|^\d{18}$|^\d{17}(\d|X|x))$/;//自定义身份证号码
//			errorText = "请输入正确的身份证号码";
//		}
//		if(vtypes[0].indexOf("email")==0){
//			re = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;//自定义邮箱
//			errorText = "请输入正确的邮箱";
//		}
//	    if (re.test(bb)) return true;
//	    writeCheckErrorMessage(obj,errorText);
//	    return false;
//    }
//    return true;
}
function checkLength(obj){
	var maxLength=0;
	var minLength=0;
	var bb=obj.val();
	var vtype=obj.attr('vtype');
	var vtypes= new Array();
	vtypes=vtype.split(";");
	for(var i=0;i<vtypes.length;i++){
		if(vtypes[i].indexOf("maxLength")==0){
			var maxLengths= new Array();
			maxLengths=vtypes[i].split(":");
			maxLength=maxLengths[1];
		}
		if(vtypes[i].indexOf("minLength")==0){
			var minLengths= new Array();
			minLengths=vtypes[i].split(":");
			minLength=minLengths[1];
		}
	}
	
	if (bb !="" && bb!=null) {
	    if (bb.length>maxLength){
	    	writeCheckErrorMessage(obj,"最大长度为"+maxLength);
	    	return false;
	    }
	    if (bb.length<minLength){
	    	writeCheckErrorMessage(obj,"最小长度为"+minLength);
	    	return false;
	    }
    }
    return true;
}

function checkRequired(obj){
 	/*
	if(obj.val()==null||obj.val()==''){
 		writeCheckErrorMessage(obj,' *');
 		return false;
 	}
 	*/
 	return true;
}
 
function writeCheckErrorMessage(obj,errorMessage){
	var temp = document.getElementById('error_'+obj.attr('id'));
	if(temp){
		temp.innerHTML=errorMessage;
	}else {
    	obj.after("<span id='error_"+obj.attr("id")+"' style='color:red'>"+errorMessage+"</span>");
	}
}
/*bootstrap.js*/
/*!
 * Bootstrap v3.2.0 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

if (typeof jQuery === 'undefined') { throw new Error('Bootstrap\'s JavaScript requires jQuery') }

/* ========================================================================
 * Bootstrap: transition.js v3.2.0
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.2.0
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.2.0'

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent()
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(150) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.2.0
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.2.0'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state = state + 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    $el[val](data[state] == null ? this.options[state] : data[state])

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false
        else $parent.find('.active').removeClass('active')
      }
      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
    }

    if (changed) this.$element.toggleClass('active')
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    Plugin.call($btn, 'toggle')
    e.preventDefault()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.2.0
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element).on('keydown.bs.carousel', $.proxy(this.keydown, this))
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      =
    this.sliding     =
    this.interval    =
    this.$active     =
    this.$items      = null

    this.options.pause == 'hover' && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.2.0'

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true
  }

  Carousel.prototype.keydown = function (e) {
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || $active[type]()
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var fallback  = type == 'next' ? 'first' : 'last'
    var that      = this

    if (!$next.length) {
      if (!this.options.wrap) return
      $next = this.$element.find('.item')[fallback]()
    }

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd($active.css('transition-duration').slice(0, -1) * 1000)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  })

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.2.0
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.transitioning = null

    if (this.options.parent) this.$parent = $(this.options.parent)
    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.2.0'

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var actives = this.$parent && this.$parent.find('> .panel > .in')

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse')
      if (hasData && hasData.transitioning) return
      Plugin.call(actives, 'hide')
      hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in')

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && option == 'show') option = !option
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var href
    var $this   = $(this)
    var target  = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7
    var $target = $(target)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()
    var parent  = $this.attr('data-parent')
    var $parent = parent && $(parent)

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle="collapse"][data-parent="' + parent + '"]').not($this).addClass('collapsed')
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    }

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.2.0
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.2.0'

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.trigger('focus')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive || (isActive && e.keyCode == 27)) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.divider):visible a'
    var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc)

    if (!$items.length) return

    var index = $items.index($items.filter(':focus'))

    if (e.keyCode == 38 && index > 0)                 index--                        // up
    if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
    if (!~index)                                      index = 0

    $items.eq(index).trigger('focus')
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $parent = getParent($(this))
      var relatedTarget = { relatedTarget: this }
      if (!$parent.hasClass('open')) return
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
      if (e.isDefaultPrevented()) return
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle + ', [role="menu"], [role="listbox"]', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.2.0
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options        = options
    this.$body          = $(document.body)
    this.$element       = $(element)
    this.$backdrop      =
    this.isShown        = null
    this.scrollbarWidth = 0

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.2.0'

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.$body.addClass('modal-open')

    this.setScrollbar()
    this.escape()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(300) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.$body.removeClass('modal-open')

    this.resetScrollbar()
    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(300) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus.call(this.$element[0])
          : this.hide.call(this)
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(150) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  Modal.prototype.checkScrollbar = function () {
    if (document.body.clientWidth >= window.innerWidth) return
    this.scrollbarWidth = this.scrollbarWidth || this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    if (this.scrollbarWidth) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', '')
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.2.0
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       =
    this.options    =
    this.enabled    =
    this.timeout    =
    this.hoverState =
    this.$element   = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.2.0'

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport)

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(document.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var $parent      = this.$element.parent()
        var parentDim    = this.getPosition($parent)

        placement = placement == 'bottom' && pos.top   + pos.height       + actualHeight - parentDim.scroll > parentDim.height ? 'top'    :
                    placement == 'top'    && pos.top   - parentDim.scroll - actualHeight < 0                                   ? 'bottom' :
                    placement == 'right'  && pos.right + actualWidth      > parentDim.width                                    ? 'left'   :
                    placement == 'left'   && pos.left  - actualWidth      < parentDim.left                                     ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(150) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var arrowDelta          = delta.left ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowPosition       = delta.left ? 'left'        : 'top'
    var arrowOffsetPosition = delta.left ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], arrowPosition)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + '%') : '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function () {
    var that = this
    var $tip = this.tip()
    var e    = $.Event('hide.bs.' + this.type)

    this.$element.removeAttr('aria-describedby')

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element.trigger('hidden.bs.' + that.type)
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && this.$tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(150) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof ($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element
    var el     = $element[0]
    var isBody = el.tagName == 'BODY'
    return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : null, {
      scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop(),
      width:  isBody ? $(window).width()  : $element.outerWidth(),
      height: isBody ? $(window).height() : $element.outerHeight()
    }, isBody ? { top: 0, left: 0 } : $element.offset())
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    return (this.$tip = this.$tip || $(this.options.template))
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide()
      this.$element = null
      this.options  = null
    }
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    clearTimeout(this.timeout)
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.2.0
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.2.0'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').empty()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }

  Popover.prototype.tip = function () {
    if (!this.$tip) this.$tip = $(this.options.template)
    return this.$tip
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.2.0
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var process  = $.proxy(this.process, this)

    this.$body          = $('body')
    this.$scrollElement = $(element).is('body') ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', process)
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.2.0'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = 'offset'
    var offsetBase   = 0

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.offsets = []
    this.targets = []
    this.scrollHeight = this.getScrollHeight()

    var self     = this

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        self.offsets.push(this[0])
        self.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop <= offsets[0]) {
      return activeTarget != (i = targets[0]) && this.activate(i)
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')

    var selector = this.selector +
        '[data-target="' + target + '"],' +
        this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.2.0
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.VERSION = '3.2.0'

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var previous = $ul.find('.active:last a')[0]
    var e        = $.Event('show.bs.tab', {
      relatedTarget: previous
    })

    $this.trigger(e)

    if (e.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: previous
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && $active.hasClass('fade')

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')

      element.addClass('active')

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active')
      }

      callback && callback()
    }

    transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(150) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.2.0
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      =
    this.unpin        =
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.2.0'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
                offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
                offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

    if (this.affixed === affix) return
    if (this.unpin != null) this.$element.css('top', '')

    var affixType = 'affix' + (affix ? '-' + affix : '')
    var e         = $.Event(affixType + '.bs.affix')

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

    this.$element
      .removeClass(Affix.RESET)
      .addClass(affixType)
      .trigger($.Event(affixType.replace('affix', 'affixed')))

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - this.$element.height() - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom) data.offset.bottom = data.offsetBottom
      if (data.offsetTop)    data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);
/*bootstrap-table.js*/
/**
 * @author zhixin wen <wenzhixin2010@gmail.com>
 * version: 1.11.1
 * https://github.com/wenzhixin/bootstrap-table/
 */

(function ($) {
    'use strict';

    // TOOLS DEFINITION
    // ======================

    var cachedWidth = null;

    // it only does '%s', and return '' when arguments are undefined
    var sprintf = function (str) {
        var args = arguments,
            flag = true,
            i = 1;

        str = str.replace(/%s/g, function () {
            var arg = args[i++];

            if (typeof arg === 'undefined') {
                flag = false;
                return '';
            }
            return arg;
        });
        return flag ? str : '';
    };

    var getPropertyFromOther = function (list, from, to, value) {
        var result = '';
        $.each(list, function (i, item) {
            if (item[from] === value) {
                result = item[to];
                return false;
            }
            return true;
        });
        return result;
    };

    var getFieldIndex = function (columns, field) {
        var index = -1;

        $.each(columns, function (i, column) {
            if (column.field === field) {
                index = i;
                return false;
            }
            return true;
        });
        return index;
    };

    // http://jsfiddle.net/wenyi/47nz7ez9/3/
    var setFieldIndex = function (columns) {
        var i, j, k,
            totalCol = 0,
            flag = [];

        for (i = 0; i < columns[0].length; i++) {
            totalCol += columns[0][i].colspan || 1;
        }

        for (i = 0; i < columns.length; i++) {
            flag[i] = [];
            for (j = 0; j < totalCol; j++) {
                flag[i][j] = false;
            }
        }

        for (i = 0; i < columns.length; i++) {
            for (j = 0; j < columns[i].length; j++) {
                var r = columns[i][j],
                    rowspan = r.rowspan || 1,
                    colspan = r.colspan || 1,
                    index = $.inArray(false, flag[i]);

                if (colspan === 1) {
                    r.fieldIndex = index;
                    // when field is undefined, use index instead
                    if (typeof r.field === 'undefined') {
                        r.field = index;
                    }
                }

                for (k = 0; k < rowspan; k++) {
                    flag[i + k][index] = true;
                }
                for (k = 0; k < colspan; k++) {
                    flag[i][index + k] = true;
                }
            }
        }
    };

    var getScrollBarWidth = function () {
        if (cachedWidth === null) {
            var inner = $('<p/>').addClass('fixed-table-scroll-inner'),
                outer = $('<div/>').addClass('fixed-table-scroll-outer'),
                w1, w2;

            outer.append(inner);
            $('body').append(outer);

            w1 = inner[0].offsetWidth;
            outer.css('overflow', 'scroll');
            w2 = inner[0].offsetWidth;

            if (w1 === w2) {
                w2 = outer[0].clientWidth;
            }

            outer.remove();
            cachedWidth = w1 - w2;
        }
        return cachedWidth;
    };

    var calculateObjectValue = function (self, name, args, defaultValue) {
        var func = name;

        if (typeof name === 'string') {
            // support obj.func1.func2
            var names = name.split('.');

            if (names.length > 1) {
                func = window;
                $.each(names, function (i, f) {
                    func = func[f];
                });
            } else {
                func = window[name];
            }
        }
        if (typeof func === 'object') {
            return func;
        }
        if (typeof func === 'function') {
            return func.apply(self, args);
        }
        if (!func && typeof name === 'string' && sprintf.apply(this, [name].concat(args))) {
            return sprintf.apply(this, [name].concat(args));
        }
        return defaultValue;
    };

    var compareObjects = function (objectA, objectB, compareLength) {
        // Create arrays of property names
        var objectAProperties = Object.getOwnPropertyNames(objectA),
            objectBProperties = Object.getOwnPropertyNames(objectB),
            propName = '';

        if (compareLength) {
            // If number of properties is different, objects are not equivalent
            if (objectAProperties.length !== objectBProperties.length) {
                return false;
            }
        }

        for (var i = 0; i < objectAProperties.length; i++) {
            propName = objectAProperties[i];

            // If the property is not in the object B properties, continue with the next property
            if ($.inArray(propName, objectBProperties) > -1) {
                // If values of same property are not equal, objects are not equivalent
                if (objectA[propName] !== objectB[propName]) {
                    return false;
                }
            }
        }

        // If we made it this far, objects are considered equivalent
        return true;
    };

    var escapeHTML = function (text) {
        if (typeof text === 'string') {
            return text
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;')
                .replace(/`/g, '&#x60;');
        }
        return text;
    };

    var getRealDataAttr = function (dataAttr) {
        for (var attr in dataAttr) {
            var auxAttr = attr.split(/(?=[A-Z])/).join('-').toLowerCase();
            if (auxAttr !== attr) {
                dataAttr[auxAttr] = dataAttr[attr];
                delete dataAttr[attr];
            }
        }

        return dataAttr;
    };

    var getItemField = function (item, field, escape) {
        var value = item;

        if (typeof field !== 'string' || item.hasOwnProperty(field)) {
            return escape ? escapeHTML(item[field]) : item[field];
        }
        var props = field.split('.');
        for (var p in props) {
            if (props.hasOwnProperty(p)) {
                value = value && value[props[p]];
            }
        }
        return escape ? escapeHTML(value) : value;
    };

    var isIEBrowser = function () {
        return !!(navigator.userAgent.indexOf("MSIE ") > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./));
    };

    var objectKeys = function () {
        // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
        if (!Object.keys) {
            Object.keys = (function() {
                var hasOwnProperty = Object.prototype.hasOwnProperty,
                    hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
                    dontEnums = [
                        'toString',
                        'toLocaleString',
                        'valueOf',
                        'hasOwnProperty',
                        'isPrototypeOf',
                        'propertyIsEnumerable',
                        'constructor'
                    ],
                    dontEnumsLength = dontEnums.length;

                return function(obj) {
                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                        throw new TypeError('Object.keys called on non-object');
                    }

                    var result = [], prop, i;

                    for (prop in obj) {
                        if (hasOwnProperty.call(obj, prop)) {
                            result.push(prop);
                        }
                    }

                    if (hasDontEnumBug) {
                        for (i = 0; i < dontEnumsLength; i++) {
                            if (hasOwnProperty.call(obj, dontEnums[i])) {
                                result.push(dontEnums[i]);
                            }
                        }
                    }
                    return result;
                };
            }());
        }
    };

    // BOOTSTRAP TABLE CLASS DEFINITION
    // ======================

    var BootstrapTable = function (el, options) {
        this.options = options;
        this.$el = $(el);
        this.$el_ = this.$el.clone();
        this.timeoutId_ = 0;
        this.timeoutFooter_ = 0;

        this.init();
    };

    BootstrapTable.DEFAULTS = {
        classes: 'table table-hover',
        sortClass: undefined,
        locale: undefined,
        height: undefined,
        undefinedText: '-',
        sortName: undefined,
        sortOrder: 'asc',
        sortStable: false,
        striped: false,
        columns: [[]],
        data: [],
        totalField: 'total',
        dataField: 'rows',
        method: 'get',
        url: undefined,
        ajax: undefined,
        cache: true,
        contentType: 'application/json',
        dataType: 'json',
        ajaxOptions: {},
        queryParams: function (params) {
            return params;
        },
        queryParamsType: 'limit', // undefined
        responseHandler: function (res) {
            return res;
        },
        pagination: false,
        onlyInfoPagination: false,
        paginationLoop: true,
        sidePagination: 'client', // client or server
        totalRows: 0, // server side need to set
        pageNumber: 1,
        pageSize: 10,
        pageList: [10, 25, 50, 100],
        paginationHAlign: 'right', //right, left
        paginationVAlign: 'bottom', //bottom, top, both
        paginationDetailHAlign: 'left', //right, left
        paginationPreText: '&lsaquo;',
        paginationNextText: '&rsaquo;',
        search: false,
        searchOnEnterKey: false,
        strictSearch: false,
        searchAlign: 'right',
        selectItemName: 'btSelectItem',
        showHeader: true,
        showFooter: false,
        showColumns: false,
        showPaginationSwitch: false,
        showRefresh: false,
        showToggle: false,
        buttonsAlign: 'right',
        smartDisplay: true,
        escape: false,
        minimumCountColumns: 1,
        idField: undefined,
        uniqueId: undefined,
        cardView: false,
        detailView: false,
        detailFormatter: function (index, row) {
            return '';
        },
        trimOnSearch: true,
        clickToSelect: false,
        singleSelect: false,
        toolbar: undefined,
        toolbarAlign: 'left',
        checkboxHeader: true,
        sortable: true,
        silentSort: true,
        maintainSelected: false,
        searchTimeOut: 500,
        searchText: '',
        iconSize: undefined,
        buttonsClass: 'default',
        iconsPrefix: 'glyphicon', // glyphicon of fa (font awesome)
        icons: {
            paginationSwitchDown: 'glyphicon-collapse-down icon-chevron-down',
            paginationSwitchUp: 'glyphicon-collapse-up icon-chevron-up',
            refresh: 'glyphicon-refresh icon-refresh',
            toggle: 'glyphicon-list-alt icon-list-alt',
            columns: 'glyphicon-th icon-th',
            detailOpen: 'glyphicon-plus icon-plus',
            detailClose: 'glyphicon-minus icon-minus'
        },

        customSearch: $.noop,

        customSort: $.noop,

        rowStyle: function (row, index) {
            return {};
        },

        rowAttributes: function (row, index) {
            return {};
        },

        footerStyle: function (row, index) {
            return {};
        },

        onAll: function (name, args) {
            return false;
        },
        onClickCell: function (field, value, row, $element) {
            return false;
        },
        onDblClickCell: function (field, value, row, $element) {
            return false;
        },
        onClickRow: function (item, $element) {
            return false;
        },
        onDblClickRow: function (item, $element) {
            return false;
        },
        onSort: function (name, order) {
            return false;
        },
        onCheck: function (row) {
            return false;
        },
        onUncheck: function (row) {
            return false;
        },
        onCheckAll: function (rows) {
            return false;
        },
        onUncheckAll: function (rows) {
            return false;
        },
        onCheckSome: function (rows) {
            return false;
        },
        onUncheckSome: function (rows) {
            return false;
        },
        onLoadSuccess: function (data) {
            return false;
        },
        onLoadError: function (status) {
            return false;
        },
        onColumnSwitch: function (field, checked) {
            return false;
        },
        onPageChange: function (number, size) {
            return false;
        },
        onSearch: function (text) {
            return false;
        },
        onToggle: function (cardView) {
            return false;
        },
        onPreBody: function (data) {
            return false;
        },
        onPostBody: function () {
            return false;
        },
        onPostHeader: function () {
            return false;
        },
        onExpandRow: function (index, row, $detail) {
            return false;
        },
        onCollapseRow: function (index, row) {
            return false;
        },
        onRefreshOptions: function (options) {
            return false;
        },
        onRefresh: function (params) {
          return false;
        },
        onResetView: function () {
            return false;
        }
    };

    BootstrapTable.LOCALES = {};

    BootstrapTable.LOCALES['en-US'] = BootstrapTable.LOCALES.en = {
        formatLoadingMessage: function () {
            return 'Loading, please wait...';
        },
        formatRecordsPerPage: function (pageNumber) {
            return sprintf('每页 %s 条  ', pageNumber);
        },
        formatShowingRows: function (pageFrom, pageTo, totalRows) {
            return sprintf( '共 %s 条，',totalRows);
        },//sprintf('第 %s 到 第 %s 条， 共 %s 条，', pageFrom, pageTo, totalRows)
        formatDetailPagination: function (totalRows) {
            return sprintf('共 %s 条', totalRows);
        },
        formatSearch: function () {
            return 'Search';
        },
        formatNoMatches: function () {
            return '';
        },
        formatPaginationSwitch: function () {
            return 'Hide/Show pagination';
        },
        formatRefresh: function () {
            return '刷新';
        },
        formatToggle: function () {
            return '切换';
        },
        formatColumns: function () {
            return '字段';
        },
        formatAllRows: function () {
            return 'All';
        }
    };

    $.extend(BootstrapTable.DEFAULTS, BootstrapTable.LOCALES['en-US']);

    BootstrapTable.COLUMN_DEFAULTS = {
        radio: false,
        checkbox: false,
        checkboxEnabled: true,
        field: undefined,
        title: undefined,
        titleTooltip: undefined,
        'class': undefined,
        align: undefined, // left, right, center
        halign: undefined, // left, right, center
        falign: undefined, // left, right, center
        valign: undefined, // top, middle, bottom
        width: undefined,
        sortable: false,
        order: 'asc', // asc, desc
        visible: true,
        switchable: true,
        clickToSelect: true,
        formatter: undefined,
        footerFormatter: undefined,
        events: undefined,
        sorter: undefined,
        sortName: undefined,
        cellStyle: undefined,
        searchable: true,
        searchFormatter: true,
        cardVisible: true
    };

    BootstrapTable.EVENTS = {
        'all.bs.table': 'onAll',
        'click-cell.bs.table': 'onClickCell',
        'dbl-click-cell.bs.table': 'onDblClickCell',
        'click-row.bs.table': 'onClickRow',
        'dbl-click-row.bs.table': 'onDblClickRow',
        'sort.bs.table': 'onSort',
        'check.bs.table': 'onCheck',
        'uncheck.bs.table': 'onUncheck',
        'check-all.bs.table': 'onCheckAll',
        'uncheck-all.bs.table': 'onUncheckAll',
        'check-some.bs.table': 'onCheckSome',
        'uncheck-some.bs.table': 'onUncheckSome',
        'load-success.bs.table': 'onLoadSuccess',
        'load-error.bs.table': 'onLoadError',
        'column-switch.bs.table': 'onColumnSwitch',
        'page-change.bs.table': 'onPageChange',
        'search.bs.table': 'onSearch',
        'toggle.bs.table': 'onToggle',
        'pre-body.bs.table': 'onPreBody',
        'post-body.bs.table': 'onPostBody',
        'post-header.bs.table': 'onPostHeader',
        'expand-row.bs.table': 'onExpandRow',
        'collapse-row.bs.table': 'onCollapseRow',
        'refresh-options.bs.table': 'onRefreshOptions',
        'reset-view.bs.table': 'onResetView',
        'refresh.bs.table': 'onRefresh'
    };

    BootstrapTable.prototype.init = function () {
        this.initLocale();
        this.initContainer();
        this.initTable();
        this.initHeader();
        this.initData();
        this.initHiddenRows();
        this.initFooter();
        this.initToolbar();
        this.initPagination();
        this.initBody();
        this.initSearchText();
        this.initServer();
    };

    BootstrapTable.prototype.initLocale = function () {
        if (this.options.locale) {
            var parts = this.options.locale.split(/-|_/);
            parts[0].toLowerCase();
            if (parts[1]) parts[1].toUpperCase();
            if ($.fn.bootstrapTable.locales[this.options.locale]) {
                // locale as requested
                $.extend(this.options, $.fn.bootstrapTable.locales[this.options.locale]);
            } else if ($.fn.bootstrapTable.locales[parts.join('-')]) {
                // locale with sep set to - (in case original was specified with _)
                $.extend(this.options, $.fn.bootstrapTable.locales[parts.join('-')]);
            } else if ($.fn.bootstrapTable.locales[parts[0]]) {
                // short locale language code (i.e. 'en')
                $.extend(this.options, $.fn.bootstrapTable.locales[parts[0]]);
            }
        }
    };

    BootstrapTable.prototype.initContainer = function () {
        this.$container = $([
            '<div class="bootstrap-table">',
            '<div class="fixed-table-toolbar"></div>',
            this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?
                '<div class="fixed-table-pagination" style="clear: both;"></div>' :
                '',
            '<div class="fixed-table-container">',
            '<div class="fixed-table-header"><table></table></div>',
            '<div class="fixed-table-body">',
            '<div class="fixed-table-loading">',
            this.options.formatLoadingMessage(),
            '</div>',
            '</div>',
            '<div class="fixed-table-footer"><table><tr></tr></table></div>',
            this.options.paginationVAlign === 'bottom' || this.options.paginationVAlign === 'both' ?
                '<div class="fixed-table-pagination"></div>' :
                '',
            '</div>',
            '</div>'
        ].join(''));

        this.$container.insertAfter(this.$el);
        this.$tableContainer = this.$container.find('.fixed-table-container');
        this.$tableHeader = this.$container.find('.fixed-table-header');
        this.$tableBody = this.$container.find('.fixed-table-body');
        this.$tableLoading = this.$container.find('.fixed-table-loading');
        this.$tableFooter = this.$container.find('.fixed-table-footer');
        this.$toolbar = this.$container.find('.fixed-table-toolbar');
        this.$pagination = this.$container.find('.fixed-table-pagination');

        this.$tableBody.append(this.$el);
        this.$container.after('<div class="clearfix"></div>');
        
        this.$el.addClass(this.options.classes);
        if (this.options.striped) {
            this.$el.addClass('table-striped');
        }
        if ($.inArray('table-no-bordered', this.options.classes.split(' ')) !== -1) {
            this.$tableContainer.addClass('table-no-bordered');
        }
    };

    BootstrapTable.prototype.initTable = function () {
        var that = this,
            columns = [],
            data = [];

        this.$header = this.$el.find('>thead');
        if (!this.$header.length) {
            this.$header = $('<thead></thead>').appendTo(this.$el);
        }
        this.$header.find('tr').each(function () {
            var column = [];

            $(this).find('th').each(function () {
                // Fix #2014 - getFieldIndex and elsewhere assume this is string, causes issues if not
                if (typeof $(this).data('field') !== 'undefined') {
                    $(this).data('field', $(this).data('field') + '');
                }
                column.push($.extend({}, {
                    title: $(this).html(),
                    'class': $(this).attr('class'),
                    titleTooltip: $(this).attr('title'),
                    rowspan: $(this).attr('rowspan') ? +$(this).attr('rowspan') : undefined,
                    colspan: $(this).attr('colspan') ? +$(this).attr('colspan') : undefined
                }, $(this).data()));
            });
            columns.push(column);
        });
        if (!$.isArray(this.options.columns[0])) {
            this.options.columns = [this.options.columns];
        }
        this.options.columns = $.extend(true, [], columns, this.options.columns);
        this.columns = [];

        setFieldIndex(this.options.columns);
        $.each(this.options.columns, function (i, columns) {
            $.each(columns, function (j, column) {
                column = $.extend({}, BootstrapTable.COLUMN_DEFAULTS, column);

                if (typeof column.fieldIndex !== 'undefined') {
                    that.columns[column.fieldIndex] = column;
                }

                that.options.columns[i][j] = column;
            });
        });

        // if options.data is setting, do not process tbody data
        if (this.options.data.length) {
            return;
        }

        var m = [];
        this.$el.find('>tbody>tr').each(function (y) {
            var row = {};

            // save tr's id, class and data-* attributes
            row._id = $(this).attr('id');
            row._class = $(this).attr('class');
            row._data = getRealDataAttr($(this).data());

            $(this).find('>td').each(function (x) {
                var $this = $(this),
                    cspan = +$this.attr('colspan') || 1,
                    rspan = +$this.attr('rowspan') || 1,
                    tx, ty;

                for (; m[y] && m[y][x]; x++); //skip already occupied cells in current row

                for (tx = x; tx < x + cspan; tx++) { //mark matrix elements occupied by current cell with true
                    for (ty = y; ty < y + rspan; ty++) {
                        if (!m[ty]) { //fill missing rows
                            m[ty] = [];
                        }
                        m[ty][tx] = true;
                    }
                }

                var field = that.columns[x].field;

                row[field] = $(this).html();
                // save td's id, class and data-* attributes
                row['_' + field + '_id'] = $(this).attr('id');
                row['_' + field + '_class'] = $(this).attr('class');
                row['_' + field + '_rowspan'] = $(this).attr('rowspan');
                row['_' + field + '_colspan'] = $(this).attr('colspan');
                row['_' + field + '_title'] = $(this).attr('title');
                row['_' + field + '_data'] = getRealDataAttr($(this).data());
            });
            data.push(row);
        });
        this.options.data = data;
        if (data.length) this.fromHtml = true;
    };

    BootstrapTable.prototype.initHeader = function () {
        var that = this,
            visibleColumns = {},
            html = [];

        this.header = {
            fields: [],
            styles: [],
            classes: [],
            formatters: [],
            events: [],
            sorters: [],
            sortNames: [],
            cellStyles: [],
            searchables: []
        };

        $.each(this.options.columns, function (i, columns) {
            html.push('<tr>');

            if (i === 0 && !that.options.cardView && that.options.detailView) {
                html.push(sprintf('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>',
                    that.options.columns.length));
            }

            $.each(columns, function (j, column) {
                var text = '',
                    halign = '', // header align style
                    align = '', // body align style
                    style = '',
                    class_ = sprintf(' class="%s"', column['class']),
                    order = that.options.sortOrder || column.order,
                    unitWidth = 'px',
                    width = column.width;

                if (column.width !== undefined && (!that.options.cardView)) {
                    if (typeof column.width === 'string') {
                        if (column.width.indexOf('%') !== -1) {
                            unitWidth = '%';
                        }
                    }
                }
                if (column.width && typeof column.width === 'string') {
                    width = column.width.replace('%', '').replace('px', '');
                }

                halign = sprintf('text-align: %s; ', column.halign ? column.halign : column.align);
                align = sprintf('text-align: %s; ', column.align);
                style = sprintf('vertical-align: %s; ', column.valign);
                style += sprintf('width: %s; ', (column.checkbox || column.radio) && !width ?
                    '36px' : (width ? width + unitWidth : undefined));

                if (typeof column.fieldIndex !== 'undefined') {
                    that.header.fields[column.fieldIndex] = column.field;
                    that.header.styles[column.fieldIndex] = align + style;
                    that.header.classes[column.fieldIndex] = class_;
                    that.header.formatters[column.fieldIndex] = column.formatter;
                    that.header.events[column.fieldIndex] = column.events;
                    that.header.sorters[column.fieldIndex] = column.sorter;
                    that.header.sortNames[column.fieldIndex] = column.sortName;
                    that.header.cellStyles[column.fieldIndex] = column.cellStyle;
                    that.header.searchables[column.fieldIndex] = column.searchable;

                    if (!column.visible) {
                        return;
                    }

                    if (that.options.cardView && (!column.cardVisible)) {
                        return;
                    }

                    visibleColumns[column.field] = column;
                }

                html.push('<th' + sprintf(' title="%s"', column.titleTooltip),
                    column.checkbox || column.radio ?
                        sprintf(' class="bs-checkbox %s"', column['class'] || '') :
                        class_,
                    sprintf(' style="%s"', halign + style),
                    sprintf(' rowspan="%s"', column.rowspan),
                    sprintf(' colspan="%s"', column.colspan),
                    sprintf(' data-field="%s"', column.field),
                    "tabindex='0'",
                    '>');

                html.push(sprintf('<div class="th-inner %s">', that.options.sortable && column.sortable ?
                    'sortable both' : ''));

                text = column.title;

                if (column.checkbox) {
                    if (!that.options.singleSelect && that.options.checkboxHeader) {
                        text = '<input name="btSelectAll" type="checkbox" />';
                    }
                    that.header.stateField = column.field;
                }
                if (column.radio) {
                    text = '';
                    that.header.stateField = column.field;
                    that.options.singleSelect = true;
                }

                html.push(text);
                html.push('</div>');
                html.push('<div class="fht-cell"></div>');
                html.push('</div>');
                html.push('</th>');
            });
            html.push('</tr>');
        });

        this.$header.html(html.join(''));
        this.$header.find('th[data-field]').each(function (i) {
            $(this).data(visibleColumns[$(this).data('field')]);
        });
        this.$container.off('click', '.th-inner').on('click', '.th-inner', function (event) {
            var target = $(this);

            if (that.options.detailView) {
                if (target.closest('.bootstrap-table')[0] !== that.$container[0])
                    return false;
            }

            if (that.options.sortable && target.parent().data().sortable) {
                that.onSort(event);
            }
        });

        this.$header.children().children().off('keypress').on('keypress', function (event) {
            if (that.options.sortable && $(this).data().sortable) {
                var code = event.keyCode || event.which;
                if (code == 13) { //Enter keycode
                    that.onSort(event);
                }
            }
        });

        $(window).off('resize.bootstrap-table');
        if (!this.options.showHeader || this.options.cardView) {
            this.$header.hide();
            this.$tableHeader.hide();
            this.$tableLoading.css('top', 0);
        } else {
            this.$header.show();
            this.$tableHeader.show();
            this.$tableLoading.css('top', this.$header.outerHeight() + 1);
            // Assign the correct sortable arrow
            this.getCaret();
            $(window).on('resize.bootstrap-table', $.proxy(this.resetWidth, this));
        }

        this.$selectAll = this.$header.find('[name="btSelectAll"]');
        this.$selectAll.off('click').on('click', function () {
                var checked = $(this).prop('checked');
                that[checked ? 'checkAll' : 'uncheckAll']();
                that.updateSelected();
            });
    };

    BootstrapTable.prototype.initFooter = function () {
        if (!this.options.showFooter || this.options.cardView) {
            this.$tableFooter.hide();
        } else {
            this.$tableFooter.show();
        }
    };

    /**
     * @param data
     * @param type: append / prepend
     */
    BootstrapTable.prototype.initData = function (data, type) {
        if (type === 'append') {
            this.data = this.data.concat(data);
        } else if (type === 'prepend') {
            this.data = [].concat(data).concat(this.data);
        } else {
            this.data = data || this.options.data;
        }

        // Fix #839 Records deleted when adding new row on filtered table
        if (type === 'append') {
            this.options.data = this.options.data.concat(data);
        } else if (type === 'prepend') {
            this.options.data = [].concat(data).concat(this.options.data);
        } else {
            this.options.data = this.data;
        }

        if (this.options.sidePagination === 'server') {
            return;
        }
        this.initSort();
    };

    BootstrapTable.prototype.initSort = function () {
        var that = this,
            name = this.options.sortName,
            order = this.options.sortOrder === 'desc' ? -1 : 1,
            index = $.inArray(this.options.sortName, this.header.fields),
            timeoutId = 0;

        if (this.options.customSort !== $.noop) {
            this.options.customSort.apply(this, [this.options.sortName, this.options.sortOrder]);
            return;
        }

        if (index !== -1) {
            if (this.options.sortStable) {
                $.each(this.data, function (i, row) {
                    if (!row.hasOwnProperty('_position')) row._position = i;
                });
            }

            this.data.sort(function (a, b) {
                if (that.header.sortNames[index]) {
                    name = that.header.sortNames[index];
                }
                var aa = getItemField(a, name, that.options.escape),
                    bb = getItemField(b, name, that.options.escape),
                    value = calculateObjectValue(that.header, that.header.sorters[index], [aa, bb]);

                if (value !== undefined) {
                    return order * value;
                }

                // Fix #161: undefined or null string sort bug.
                if (aa === undefined || aa === null) {
                    aa = '';
                }
                if (bb === undefined || bb === null) {
                    bb = '';
                }

                if (that.options.sortStable && aa === bb) {
                    aa = a._position;
                    bb = b._position;
                }

                // IF both values are numeric, do a numeric comparison
                if ($.isNumeric(aa) && $.isNumeric(bb)) {
                    // Convert numerical values form string to float.
                    aa = parseFloat(aa);
                    bb = parseFloat(bb);
                    if (aa < bb) {
                        return order * -1;
                    }
                    return order;
                }

                if (aa === bb) {
                    return 0;
                }

                // If value is not a string, convert to string
                if (typeof aa !== 'string') {
                    aa = aa.toString();
                }

                if (aa.localeCompare(bb) === -1) {
                    return order * -1;
                }

                return order;
            });

            if (this.options.sortClass !== undefined) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(function () {
                    that.$el.removeClass(that.options.sortClass);
                    var index = that.$header.find(sprintf('[data-field="%s"]',
                        that.options.sortName).index() + 1);
                    that.$el.find(sprintf('tr td:nth-child(%s)', index))
                        .addClass(that.options.sortClass);
                }, 250);
            }
        }
    };

    BootstrapTable.prototype.onSort = function (event) {
        var $this = event.type === "keypress" ? $(event.currentTarget) : $(event.currentTarget).parent(),
            $this_ = this.$header.find('th').eq($this.index());

        this.$header.add(this.$header_).find('span.order').remove();

        if (this.options.sortName === $this.data('field')) {
            this.options.sortOrder = this.options.sortOrder === 'asc' ? 'desc' : 'asc';
        } else {
            this.options.sortName = $this.data('field');
            this.options.sortOrder = $this.data('order') === 'asc' ? 'desc' : 'asc';
        }
        this.trigger('sort', this.options.sortName, this.options.sortOrder);

        $this.add($this_).data('order', this.options.sortOrder);

        // Assign the correct sortable arrow
        this.getCaret();

//        if (this.options.sidePagination === 'server') {
//            this.initServer(this.options.silentSort);
//            return;
//        }

        this.initSort();
        this.initBody();
    };

    BootstrapTable.prototype.initToolbar = function () {
        var that = this,
            html = [],
            timeoutId = 0,
            $keepOpen,
            $search,
            switchableCount = 0;

        if (this.$toolbar.find('.bs-bars').children().length) {
            $('body').append($(this.options.toolbar));
        }
        this.$toolbar.html('');

        if (typeof this.options.toolbar === 'string' || typeof this.options.toolbar === 'object') {
            $(sprintf('<div class="bs-bars pull-%s"></div>', this.options.toolbarAlign))
                .appendTo(this.$toolbar)
                .append($(this.options.toolbar));
        }

        // showColumns, showToggle, showRefresh
        html = [sprintf('<div class="columns columns-%s btn-group pull-%s">',
            this.options.buttonsAlign, this.options.buttonsAlign)];

        if (typeof this.options.icons === 'string') {
            this.options.icons = calculateObjectValue(null, this.options.icons);
        }

        if (this.options.showPaginationSwitch) {
            html.push(sprintf('<button style="padding:3px 14px 9px 14px" class="btn' +
                    sprintf(' btn-%s', this.options.buttonsClass) +
                    sprintf(' btn-%s', this.options.iconSize) +
                    '" type="button" name="paginationSwitch" title="%s">',
                    this.options.formatPaginationSwitch()),
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.paginationSwitchDown),
                '</button>');
        }

        if (this.options.showRefresh) {
            html.push(sprintf('<button style="padding:3px 14px 9px 14px" class="btn' +
                    sprintf(' btn-%s', this.options.buttonsClass) +
                    sprintf(' btn-%s', this.options.iconSize) +
                    '" type="button" name="refresh" title="%s">',
                    this.options.formatRefresh()),
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.refresh),
                '</button>');
        }

        if (this.options.showToggle) {
            html.push(sprintf('<button style="padding:3px 14px 9px 14px" class="btn' +
                    sprintf(' btn-%s', this.options.buttonsClass) +
                    sprintf(' btn-%s', this.options.iconSize) +
                    '" type="button" name="toggle" title="%s">',
                    this.options.formatToggle()),
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.toggle),
                '</button>');
        }

        if (this.options.showColumns) {
            html.push(sprintf('<div class="keep-open btn-group" title="%s">',
                    this.options.formatColumns()),
                '<button type="button" class="btn' +
                sprintf(' btn-%s', this.options.buttonsClass) +
                sprintf(' btn-%s', this.options.iconSize) +
                ' dropdown-toggle" data-toggle="dropdown">',
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.columns),
                ' <span class="caret"></span>',
                '</button>',
                '<ul class="dropdown-menu" role="menu">');

            $.each(this.columns, function (i, column) {
                if (column.radio || column.checkbox) {
                    return;
                }

                if (that.options.cardView && !column.cardVisible) {
                    return;
                }

                var checked = column.visible ? ' checked="checked"' : '';

                if (column.switchable) {
                    html.push(sprintf('<li>' +
                        '<label><input type="checkbox" data-field="%s" value="%s"%s> %s</label>' +
                        '</li>', column.field, i, checked, column.title));
                    switchableCount++;
                }
            });
            html.push('</ul>',
                '</div>');
        }

        html.push('</div>');

        // Fix #188: this.showToolbar is for extensions
        if (this.showToolbar || html.length > 2) {
            this.$toolbar.append(html.join(''));
        }

        if (this.options.showPaginationSwitch) {
            this.$toolbar.find('button[name="paginationSwitch"]')
                .off('click').on('click', $.proxy(this.togglePagination, this));
        }

        if (this.options.showRefresh) {
            this.$toolbar.find('button[name="refresh"]')
                .off('click').on('click', $.proxy(this.refresh, this));
        }

        if (this.options.showToggle) {
            this.$toolbar.find('button[name="toggle"]')
                .off('click').on('click', function () {
                    that.toggleView();
                });
        }

        if (this.options.showColumns) {
            $keepOpen = this.$toolbar.find('.keep-open');

            if (switchableCount <= this.options.minimumCountColumns) {
                $keepOpen.find('input').prop('disabled', true);
            }

            $keepOpen.find('li').off('click').on('click', function (event) {
                event.stopImmediatePropagation();
            });
            $keepOpen.find('input').off('click').on('click', function () {
                var $this = $(this);

                that.toggleColumn($(this).val(), $this.prop('checked'), false);
                that.trigger('column-switch', $(this).data('field'), $this.prop('checked'));
            });
        }

        if (this.options.search) {
            html = [];
            html.push(
                '<div class="pull-' + this.options.searchAlign + ' search">',
                sprintf('<input class="form-control' +
                    sprintf(' input-%s', this.options.iconSize) +
                    '" type="text" placeholder="%s">',
                    this.options.formatSearch()),
                '</div>');

            this.$toolbar.append(html.join(''));
            $search = this.$toolbar.find('.search input');
            $search.off('keyup drop blur').on('keyup drop blur', function (event) {
                if (that.options.searchOnEnterKey && event.keyCode !== 13) {
                    return;
                }

                if ($.inArray(event.keyCode, [37, 38, 39, 40]) > -1) {
                    return;
                }

                clearTimeout(timeoutId); // doesn't matter if it's 0
                timeoutId = setTimeout(function () {
                    that.onSearch(event);
                }, that.options.searchTimeOut);
            });

            if (isIEBrowser()) {
                $search.off('mouseup').on('mouseup', function (event) {
                    clearTimeout(timeoutId); // doesn't matter if it's 0
                    timeoutId = setTimeout(function () {
                        that.onSearch(event);
                    }, that.options.searchTimeOut);
                });
            }
        }
    };

    BootstrapTable.prototype.onSearch = function (event) {
        var text = $.trim($(event.currentTarget).val());

        // trim search input
        if (this.options.trimOnSearch && $(event.currentTarget).val() !== text) {
            $(event.currentTarget).val(text);
        }

        if (text === this.searchText) {
            return;
        }
        this.searchText = text;
        this.options.searchText = text;

        this.options.pageNumber = 1;
        this.initSearch();
        this.updatePagination();
        this.trigger('search', text);
    };

    BootstrapTable.prototype.initSearch = function () {
        var that = this;

        if (this.options.sidePagination !== 'server') {
            if (this.options.customSearch !== $.noop) {
                this.options.customSearch.apply(this, [this.searchText]);
                return;
            }

            var s = this.searchText && (this.options.escape ?
                escapeHTML(this.searchText) : this.searchText).toLowerCase();
            var f = $.isEmptyObject(this.filterColumns) ? null : this.filterColumns;

            // Check filter
            this.data = f ? $.grep(this.options.data, function (item, i) {
                for (var key in f) {
                    if ($.isArray(f[key]) && $.inArray(item[key], f[key]) === -1 ||
                            !$.isArray(f[key]) && item[key] !== f[key]) {
                        return false;
                    }
                }
                return true;
            }) : this.options.data;

            this.data = s ? $.grep(this.data, function (item, i) {
                for (var j = 0; j < that.header.fields.length; j++) {

                    if (!that.header.searchables[j]) {
                        continue;
                    }

                    var key = $.isNumeric(that.header.fields[j]) ? parseInt(that.header.fields[j], 10) : that.header.fields[j];
                    var column = that.columns[getFieldIndex(that.columns, key)];
                    var value;

                    if (typeof key === 'string') {
                        value = item;
                        var props = key.split('.');
                        for (var prop_index = 0; prop_index < props.length; prop_index++) {
                            value = value[props[prop_index]];
                        }

                        // Fix #142: respect searchForamtter boolean
                        if (column && column.searchFormatter) {
                            value = calculateObjectValue(column,
                                that.header.formatters[j], [value, item, i], value);
                        }
                    } else {
                        value = item[key];
                    }

                    if (typeof value === 'string' || typeof value === 'number') {
                        if (that.options.strictSearch) {
                            if ((value + '').toLowerCase() === s) {
                                return true;
                            }
                        } else {
                            if ((value + '').toLowerCase().indexOf(s) !== -1) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }) : this.data;
        }
    };

    BootstrapTable.prototype.initPagination = function () {
        if (!this.options.pagination) {
            this.$pagination.hide();
            return;
        } else {
            this.$pagination.show();
        }

        var that = this,
            html = [],
            $allSelected = false,
            i, from, to,
            $pageList,
            $first, $pre,
            $next, $last,
            $number,
            data = this.getData(),
            pageList = this.options.pageList;

        if (this.options.sidePagination !== 'server') {
            this.options.totalRows = data.length;
        }

        this.totalPages = 0;
        if (this.options.totalRows) {
            if (this.options.pageSize === this.options.formatAllRows()) {
                this.options.pageSize = this.options.totalRows;
                $allSelected = true;
            } else if (this.options.pageSize === this.options.totalRows) {
                // Fix #667 Table with pagination,
                // multiple pages and a search that matches to one page throws exception
                var pageLst = typeof this.options.pageList === 'string' ?
                    this.options.pageList.replace('[', '').replace(']', '')
                        .replace(/ /g, '').toLowerCase().split(',') : this.options.pageList;
                if ($.inArray(this.options.formatAllRows().toLowerCase(), pageLst)  > -1) {
                    $allSelected = true;
                }
            }

            this.totalPages = ~~((this.options.totalRows - 1) / this.options.pageSize) + 1;

            this.options.totalPages = this.totalPages;
        }
        if (this.totalPages > 0 && this.options.pageNumber > this.totalPages) {
            this.options.pageNumber = this.totalPages;
        }

        this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1;
        this.pageTo = this.options.pageNumber * this.options.pageSize;
        if (this.pageTo > this.options.totalRows) {
            this.pageTo = this.options.totalRows;
        }

        html.push(
            '<div class="pull-' + this.options.paginationDetailHAlign + ' pagination-detail">',
            '<span class="pagination-info">',
            this.options.onlyInfoPagination ? this.options.formatDetailPagination(this.options.totalRows) :
            this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows),
            '</span>');

        if (!this.options.onlyInfoPagination) {
            html.push('<span class="page-list">');

            var pageNumber = [
                    sprintf('<span class="btn-group %s">',
                        this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?
                            'dropdown' : 'dropup'),
                    '<button type="button" class="btn' +
                    sprintf(' btn-%s', this.options.buttonsClass) +
                    sprintf(' btn-%s', this.options.iconSize) +
                    ' dropdown-toggle" data-toggle="dropdown">',
                    '<span class="page-size">',
                    $allSelected ? this.options.formatAllRows() : this.options.pageSize,
                    '</span>',
                    ' <span class="caret"></span>',
                    '</button>',
                    '<ul class="dropdown-menu" role="menu">'
                ];

            if (typeof this.options.pageList === 'string') {
                var list = this.options.pageList.replace('[', '').replace(']', '')
                    .replace(/ /g, '').split(',');

                pageList = [];
                $.each(list, function (i, value) {
                    pageList.push(value.toUpperCase() === that.options.formatAllRows().toUpperCase() ?
                        that.options.formatAllRows() : +value);
                });
            }

            $.each(pageList, function (i, page) {
                if (!that.options.smartDisplay || i === 0 || pageList[i - 1] < that.options.totalRows) {
                    var active;
                    if ($allSelected) {
                        active = page === that.options.formatAllRows() ? ' class="active"' : '';
                    } else {
                        active = page === that.options.pageSize ? ' class="active"' : '';
                    }
                    pageNumber.push(sprintf('<li%s><a href="javascript:void(0)">%s</a></li>', active, page));
                }
            });
            pageNumber.push('</ul></span>');

            html.push(this.options.formatRecordsPerPage(pageNumber.join('')));
            html.push('</span>');

            html.push('</div>',
                '<div class="pull-' + this.options.paginationHAlign + ' pagination">',
                '<ul class="pagination' + sprintf(' pagination-%s', this.options.iconSize) + '">',
                '<li class="page-pre"><a href="javascript:void(0)">' + this.options.paginationPreText + '</a></li>');

            if (this.totalPages < 5) {
                from = 1;
                to = this.totalPages;
            } else {
                from = this.options.pageNumber - 2;
                to = from + 4;
                if (from < 1) {
                    from = 1;
                    to = 5;
                }
                if (to > this.totalPages) {
                    to = this.totalPages;
                    from = to - 4;
                }
            }

            if (this.totalPages >= 6) {
                if (this.options.pageNumber >= 3) {
                    html.push('<li class="page-first' + (1 === this.options.pageNumber ? ' active' : '') + '">',
                        '<a href="javascript:void(0)">', 1, '</a>',
                        '</li>');

                    from++;
                }

                if (this.options.pageNumber >= 4) {
                    if (this.options.pageNumber == 4 || this.totalPages == 6 || this.totalPages == 7) {
                        from--;
                    } else {
                        html.push('<li class="page-first-separator disabled">',
                            '<a href="javascript:void(0)">...</a>',
                            '</li>');
                    }

                    to--;
                }
            }

            if (this.totalPages >= 7) {
                if (this.options.pageNumber >= (this.totalPages - 2)) {
                    from--;
                }
            }

            if (this.totalPages == 6) {
                if (this.options.pageNumber >= (this.totalPages - 2)) {
                    to++;
                }
            } else if (this.totalPages >= 7) {
                if (this.totalPages == 7 || this.options.pageNumber >= (this.totalPages - 3)) {
                    to++;
                }
            }

            for (i = from; i <= to; i++) {
                html.push('<li class="page-number' + (i === this.options.pageNumber ? ' active' : '') + '">',
                    '<a href="javascript:void(0)">', i, '</a>',
                    '</li>');
            }

            if (this.totalPages >= 8) {
                if (this.options.pageNumber <= (this.totalPages - 4)) {
                    html.push('<li class="page-last-separator disabled">',
                        '<a href="javascript:void(0)">...</a>',
                        '</li>');
                }
            }

            if (this.totalPages >= 6) {
                if (this.options.pageNumber <= (this.totalPages - 3)) {
                    html.push('<li class="page-last' + (this.totalPages === this.options.pageNumber ? ' active' : '') + '">',
                        '<a href="javascript:void(0)">', this.totalPages, '</a>',
                        '</li>');
                }
            }

            html.push(
                '<li class="page-next"><a href="javascript:void(0)">' + this.options.paginationNextText + '</a></li>',
                '</ul>',
                '</div>');
        }
        this.$pagination.html(html.join(''));

        if (!this.options.onlyInfoPagination) {
            $pageList = this.$pagination.find('.page-list a');
            $first = this.$pagination.find('.page-first');
            $pre = this.$pagination.find('.page-pre');
            $next = this.$pagination.find('.page-next');
            $last = this.$pagination.find('.page-last');
            $number = this.$pagination.find('.page-number');

            if (this.options.smartDisplay) {
                if (this.totalPages <= 1) {
                    this.$pagination.find('div.pagination').hide();
                }
                if (pageList.length < 2 || this.options.totalRows <= pageList[0]) {
                    this.$pagination.find('span.page-list').hide();
                }

                // when data is empty, hide the pagination
                this.$pagination[this.getData().length ? 'show' : 'hide']();
            }

            if (!this.options.paginationLoop) {
                if (this.options.pageNumber === 1) {
                    $pre.addClass('disabled');
                }
                if (this.options.pageNumber === this.totalPages) {
                    $next.addClass('disabled');
                }
            }

            if ($allSelected) {
                this.options.pageSize = this.options.formatAllRows();
            }
            $pageList.off('click').on('click', $.proxy(this.onPageListChange, this));
            $first.off('click').on('click', $.proxy(this.onPageFirst, this));
            $pre.off('click').on('click', $.proxy(this.onPagePre, this));
            $next.off('click').on('click', $.proxy(this.onPageNext, this));
            $last.off('click').on('click', $.proxy(this.onPageLast, this));
            $number.off('click').on('click', $.proxy(this.onPageNumber, this));
        }
    };

    BootstrapTable.prototype.updatePagination = function (event) {
        // Fix #171: IE disabled button can be clicked bug.
        if (event && $(event.currentTarget).hasClass('disabled')) {
            return;
        }

        if (!this.options.maintainSelected) {
            this.resetRows();
        }

        this.initPagination();
        if (this.options.sidePagination === 'server') {
            this.initServer();
        } else {
            this.initBody();
        }

        this.trigger('page-change', this.options.pageNumber, this.options.pageSize);
    };

    BootstrapTable.prototype.onPageListChange = function (event) {
        var $this = $(event.currentTarget);

        $this.parent().addClass('active').siblings().removeClass('active');
        this.options.pageSize = $this.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ?
            this.options.formatAllRows() : +$this.text();
        this.$toolbar.find('.page-size').text(this.options.pageSize);

        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageFirst = function (event) {
        this.options.pageNumber = 1;
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPagePre = function (event) {
        if ((this.options.pageNumber - 1) === 0) {
            this.options.pageNumber = this.options.totalPages;
        } else {
            this.options.pageNumber--;
        }
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageNext = function (event) {
        if ((this.options.pageNumber + 1) > this.options.totalPages) {
            this.options.pageNumber = 1;
        } else {
            this.options.pageNumber++;
        }
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageLast = function (event) {
        this.options.pageNumber = this.totalPages;
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageNumber = function (event) {
        if (this.options.pageNumber === +$(event.currentTarget).text()) {
            return;
        }
        this.options.pageNumber = +$(event.currentTarget).text();
        this.updatePagination(event);
    };

    BootstrapTable.prototype.initBody = function (fixedScroll) {
        var that = this,
            html = [],
            data = this.getData();

        this.trigger('pre-body', data);

        this.$body = this.$el.find('>tbody');
        if (!this.$body.length) {
            this.$body = $('<tbody></tbody>').appendTo(this.$el);
        }

        //Fix #389 Bootstrap-table-flatJSON is not working

        if (!this.options.pagination || this.options.sidePagination === 'server') {
            this.pageFrom = 1;
            this.pageTo = data.length;
        }

        for (var i = this.pageFrom - 1; i < this.pageTo; i++) {
            var key,
                item = data[i],
                style = {},
                csses = [],
                data_ = '',
                attributes = {},
                htmlAttributes = [];

            if ($.inArray(item, this.hiddenRows) > -1) {
                continue;
            }

            style = calculateObjectValue(this.options, this.options.rowStyle, [item, i], style);

            if (style && style.css) {
                for (key in style.css) {
                    csses.push(key + ': ' + style.css[key]);
                }
            }

            attributes = calculateObjectValue(this.options,
                this.options.rowAttributes, [item, i], attributes);

            if (attributes) {
                for (key in attributes) {
                    htmlAttributes.push(sprintf('%s="%s"', key, escapeHTML(attributes[key])));
                }
            }

            if (item._data && !$.isEmptyObject(item._data)) {
                $.each(item._data, function (k, v) {
                    // ignore data-index
                    if (k === 'index') {
                        return;
                    }
                    data_ += sprintf(' data-%s="%s"', k, v);
                });
            }

            html.push('<tr',
                sprintf(' %s', htmlAttributes.join(' ')),
                sprintf(' id="%s"', $.isArray(item) ? undefined : item._id),
                sprintf(' class="%s"', style.classes || ($.isArray(item) ? undefined : item._class)),
                sprintf(' data-index="%s"', i),
                sprintf(' data-uniqueid="%s"', item[this.options.uniqueId]),
                sprintf('%s', data_),
                '>'
            );

            if (this.options.cardView) {
                html.push(sprintf('<td colspan="%s"><div class="card-views">', this.header.fields.length));
            }

            if (!this.options.cardView && this.options.detailView) {
                html.push('<td>',
                    '<a class="detail-icon" href="javascript:">',
                    sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.detailOpen),
                    '</a>',
                    '</td>');
            }

            $.each(this.header.fields, function (j, field) {
                var text = '',
                    value_ = getItemField(item, field, that.options.escape),
                    value = '',
                    type = '',
                    cellStyle = {},
                    id_ = '',
                    class_ = that.header.classes[j],
                    data_ = '',
                    rowspan_ = '',
                    colspan_ = '',
                    title_ = '',
                    column = that.columns[j];

                if (that.fromHtml && typeof value_ === 'undefined') {
                    return;
                }

                if (!column.visible) {
                    return;
                }

                if (that.options.cardView && !column.cardVisible) {
                    return;
                }

                style = sprintf('style="%s"', csses.concat(that.header.styles[j]).join('; '));

                // handle td's id and class
                if (item['_' + field + '_id']) {
                    id_ = sprintf(' id="%s"', item['_' + field + '_id']);
                }
                if (item['_' + field + '_class']) {
                    class_ = sprintf(' class="%s"', item['_' + field + '_class']);
                }
                if (item['_' + field + '_rowspan']) {
                    rowspan_ = sprintf(' rowspan="%s"', item['_' + field + '_rowspan']);
                }
                if (item['_' + field + '_colspan']) {
                    colspan_ = sprintf(' colspan="%s"', item['_' + field + '_colspan']);
                }
                if (item['_' + field + '_title']) {
                    title_ = sprintf(' title="%s"', item['_' + field + '_title']);
                }
                cellStyle = calculateObjectValue(that.header,
                    that.header.cellStyles[j], [value_, item, i, field], cellStyle);
                if (cellStyle.classes) {
                    class_ = sprintf(' class="%s"', cellStyle.classes);
                }
                if (cellStyle.css) {
                    var csses_ = [];
                    for (var key in cellStyle.css) {
                        csses_.push(key + ': ' + cellStyle.css[key]);
                    }
                    style = sprintf('style="%s"', csses_.concat(that.header.styles[j]).join('; '));
                }

                value = calculateObjectValue(column,
                    that.header.formatters[j], [value_, item, i], value_);

                if (item['_' + field + '_data'] && !$.isEmptyObject(item['_' + field + '_data'])) {
                    $.each(item['_' + field + '_data'], function (k, v) {
                        // ignore data-index
                        if (k === 'index') {
                            return;
                        }
                        data_ += sprintf(' data-%s="%s"', k, v);
                    });
                }

                if (column.checkbox || column.radio) {
                    type = column.checkbox ? 'checkbox' : type;
                    type = column.radio ? 'radio' : type;

                    text = [sprintf(that.options.cardView ?
                        '<div class="card-view %s">' : '<td class="bs-checkbox %s">', column['class'] || ''),
                        '<input' +
                        sprintf(' data-index="%s"', i) +
                        sprintf(' name="%s"', that.options.selectItemName) +
                        sprintf(' type="%s"', type) +
                        sprintf(' value="%s"', item[that.options.idField]) +
                        sprintf(' checked="%s"', value === true ||
                        (value_ || value && value.checked) ? 'checked' : undefined) +
                        sprintf(' disabled="%s"', !column.checkboxEnabled ||
                        (value && value.disabled) ? 'disabled' : undefined) +
                        ' />',
                        that.header.formatters[j] && typeof value === 'string' ? value : '',
                        that.options.cardView ? '</div>' : '</td>'
                    ].join('');

                    item[that.header.stateField] = value === true || (value && value.checked);
                } else {
                    value = typeof value === 'undefined' || value === null ?
                        that.options.undefinedText : value;

                    text = that.options.cardView ? ['<div class="card-view">',
                        that.options.showHeader ? sprintf('<span class="title" %s>%s</span>', style,
                            getPropertyFromOther(that.columns, 'field', 'title', field)) : '',
                        sprintf('<span class="value">%s</span>', value),
                        '</div>'
                    ].join('') : [sprintf('<td%s %s %s %s %s %s %s>',
                        id_, class_, style, data_, rowspan_, colspan_, title_),
                        value,
                        '</td>'
                    ].join('');

                    // Hide empty data on Card view when smartDisplay is set to true.
                    if (that.options.cardView && that.options.smartDisplay && value === '') {
                        // Should set a placeholder for event binding correct fieldIndex
                        text = '<div class="card-view"></div>';
                    }
                }

                html.push(text);
            });

            if (this.options.cardView) {
                html.push('</div></td>');
            }

            html.push('</tr>');
        }

        // show no records
        if (!html.length) {
        	console.log(html);
        	console.log(html.length);
            html.push('<tr class="no-records-found">',
                sprintf('<td colspan="%s">%s</td>',
                    this.$header.find('th').length, this.options.formatNoMatches()),
                '</tr>');
            //this.$toolbar.hide();
        }

        this.$body.html(html.join(''));

        if (!fixedScroll) {
            this.scrollTo(0);
        }

        // click to select by column
        this.$body.find('> tr[data-index] > td').off('click dblclick').on('click dblclick', function (e) {
            var $td = $(this),
                $tr = $td.parent(),
                item = that.data[$tr.data('index')],
                index = $td[0].cellIndex,
                fields = that.getVisibleFields(),
                field = fields[that.options.detailView && !that.options.cardView ? index - 1 : index],
                column = that.columns[getFieldIndex(that.columns, field)],
                value = getItemField(item, field, that.options.escape);

            if ($td.find('.detail-icon').length) {
                return;
            }

            that.trigger(e.type === 'click' ? 'click-cell' : 'dbl-click-cell', field, value, item, $td);
            that.trigger(e.type === 'click' ? 'click-row' : 'dbl-click-row', item, $tr, field);

            // if click to select - then trigger the checkbox/radio click
            if (e.type === 'click' && that.options.clickToSelect && column.clickToSelect) {
                var $selectItem = $tr.find(sprintf('[name="%s"]', that.options.selectItemName));
                if ($selectItem.length) {
                    $selectItem[0].click(); // #144: .trigger('click') bug
                }
            }
        });

        this.$body.find('> tr[data-index] > td > .detail-icon').off('click').on('click', function () {
            var $this = $(this),
                $tr = $this.parent().parent(),
                index = $tr.data('index'),
                row = data[index]; // Fix #980 Detail view, when searching, returns wrong row

            // remove and update
            if ($tr.next().is('tr.detail-view')) {
                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailOpen));
                $tr.next().remove();
                that.trigger('collapse-row', index, row);
            } else {
                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailClose));
                $tr.after(sprintf('<tr class="detail-view"><td colspan="%s"></td></tr>', $tr.find('td').length));
                var $element = $tr.next().find('td');
                var content = calculateObjectValue(that.options, that.options.detailFormatter, [index, row, $element], '');
                if($element.length === 1) {
                    $element.append(content);
                }
                that.trigger('expand-row', index, row, $element);
            }
            that.resetView();
        });

        this.$selectItem = this.$body.find(sprintf('[name="%s"]', this.options.selectItemName));
        this.$selectItem.off('click').on('click', function (event) {
            event.stopImmediatePropagation();

            var $this = $(this),
                checked = $this.prop('checked'),
                row = that.data[$this.data('index')];

            if (that.options.maintainSelected && $(this).is(':radio')) {
                $.each(that.options.data, function (i, row) {
                    row[that.header.stateField] = false;
                });
            }

            row[that.header.stateField] = checked;

            if (that.options.singleSelect) {
                that.$selectItem.not(this).each(function () {
                    that.data[$(this).data('index')][that.header.stateField] = false;
                });
                that.$selectItem.filter(':checked').not(this).prop('checked', false);
            }

            that.updateSelected();
            that.trigger(checked ? 'check' : 'uncheck', row, $this);
        });

        $.each(this.header.events, function (i, events) {
            if (!events) {
                return;
            }
            // fix bug, if events is defined with namespace
            if (typeof events === 'string') {
                events = calculateObjectValue(null, events);
            }

            var field = that.header.fields[i],
                fieldIndex = $.inArray(field, that.getVisibleFields());

            if (that.options.detailView && !that.options.cardView) {
                fieldIndex += 1;
            }

            for (var key in events) {
                that.$body.find('>tr:not(.no-records-found)').each(function () {
                    var $tr = $(this),
                        $td = $tr.find(that.options.cardView ? '.card-view' : 'td').eq(fieldIndex),
                        index = key.indexOf(' '),
                        name = key.substring(0, index),
                        el = key.substring(index + 1),
                        func = events[key];

                    $td.find(el).off(name).on(name, function (e) {
                        var index = $tr.data('index'),
                            row = that.data[index],
                            value = row[field];

                        func.apply(this, [e, value, row, index]);
                    });
                });
            }
        });

        this.updateSelected();
        this.resetView();

        this.trigger('post-body', data);
    };

    BootstrapTable.prototype.initServer = function (silent, query, url) {
        var that = this,
            data = {},
            params = {
                searchText: this.searchText,
                sortName: this.options.sortName,
                sortOrder: this.options.sortOrder
            },
            request;

        if (this.options.pagination) {
            params.pageSize = this.options.pageSize === this.options.formatAllRows() ?
                this.options.totalRows : this.options.pageSize;
            params.pageNumber = this.options.pageNumber;
        }

        if (!(url || this.options.url) && !this.options.ajax) {
            return;
        }

        if (this.options.queryParamsType === 'limit') {
            params = {
                search: params.searchText,
                sort: params.sortName,
                order: params.sortOrder
            };

            if (this.options.pagination) {
                params.offset = this.options.pageSize === this.options.formatAllRows() ?
                    0 : this.options.pageSize * (this.options.pageNumber - 1);
                params.limit = this.options.pageSize === this.options.formatAllRows() ?
                    this.options.totalRows : this.options.pageSize;
            }
        }

        if (!($.isEmptyObject(this.filterColumnsPartial))) {
            params.filter = JSON.stringify(this.filterColumnsPartial, null);
        }

        data = calculateObjectValue(this.options, this.options.queryParams, [params], data);

        $.extend(data, query || {});

        // false to stop request
        if (data === false) {
            return;
        }

        if (!silent) {
            this.$tableLoading.show();
        }
        request = $.extend({}, calculateObjectValue(null, this.options.ajaxOptions), {
            type: this.options.method,
            url:  url || this.options.url,
            data: this.options.contentType === 'application/json' && this.options.method === 'post' ?
                JSON.stringify(data) : data,
            cache: this.options.cache,
            contentType: this.options.contentType,
            dataType: this.options.dataType,
            success: function (res) {
                res = calculateObjectValue(that.options, that.options.responseHandler, [res], res);
                if(res.total == 0) {
                    that.$toolbar.hide();
                }else{
                	that.$toolbar.show();
                }
                that.load(res);
                that.trigger('load-success', res);
                if (!silent) that.$tableLoading.hide();
            },
            error: function (res) {
                that.trigger('load-error', res.status, res);
                if (!silent) that.$tableLoading.hide();
            }
        });

        if (this.options.ajax) {
            calculateObjectValue(this, this.options.ajax, [request], null);
        } else {
            if (this._xhr && this._xhr.readyState !== 4) {
                this._xhr.abort();
            }
            this._xhr = $.ajax(request);
        }
    };

    BootstrapTable.prototype.initSearchText = function () {
        if (this.options.search) {
            if (this.options.searchText !== '') {
                var $search = this.$toolbar.find('.search input');
                $search.val(this.options.searchText);
                this.onSearch({currentTarget: $search});
            }
        }
    };

    BootstrapTable.prototype.getCaret = function () {
        var that = this;

        $.each(this.$header.find('th'), function (i, th) {
            $(th).find('.sortable').removeClass('desc asc').addClass($(th).data('field') === that.options.sortName ? that.options.sortOrder : 'both');
        });
    };

    BootstrapTable.prototype.updateSelected = function () {
        var checkAll = this.$selectItem.filter(':enabled').length &&
            this.$selectItem.filter(':enabled').length ===
            this.$selectItem.filter(':enabled').filter(':checked').length;

        this.$selectAll.add(this.$selectAll_).prop('checked', checkAll);

        this.$selectItem.each(function () {
            $(this).closest('tr')[$(this).prop('checked') ? 'addClass' : 'removeClass']('selected');
        });
    };

    BootstrapTable.prototype.updateRows = function () {
        var that = this;

        this.$selectItem.each(function () {
            that.data[$(this).data('index')][that.header.stateField] = $(this).prop('checked');
        });
    };

    BootstrapTable.prototype.resetRows = function () {
        var that = this;

        $.each(this.data, function (i, row) {
            that.$selectAll.prop('checked', false);
            that.$selectItem.prop('checked', false);
            if (that.header.stateField) {
                row[that.header.stateField] = false;
            }
        });
        this.initHiddenRows();
    };

    BootstrapTable.prototype.trigger = function (name) {
        var args = Array.prototype.slice.call(arguments, 1);

        name += '.bs.table';
        this.options[BootstrapTable.EVENTS[name]].apply(this.options, args);
        this.$el.trigger($.Event(name), args);

        this.options.onAll(name, args);
        this.$el.trigger($.Event('all.bs.table'), [name, args]);
    };

    BootstrapTable.prototype.resetHeader = function () {
        // fix #61: the hidden table reset header bug.
        // fix bug: get $el.css('width') error sometime (height = 500)
        clearTimeout(this.timeoutId_);
        this.timeoutId_ = setTimeout($.proxy(this.fitHeader, this), this.$el.is(':hidden') ? 100 : 0);
    };

    BootstrapTable.prototype.fitHeader = function () {
        var that = this,
            fixedBody,
            scrollWidth,
            focused,
            focusedTemp;

        if (that.$el.is(':hidden')) {
            that.timeoutId_ = setTimeout($.proxy(that.fitHeader, that), 100);
            return;
        }
        fixedBody = this.$tableBody.get(0);

        scrollWidth = fixedBody.scrollWidth > fixedBody.clientWidth &&
        fixedBody.scrollHeight > fixedBody.clientHeight + this.$header.outerHeight() ?
            getScrollBarWidth() : 0;

        this.$el.css('margin-top', -this.$header.outerHeight());

        focused = $(':focus');
        if (focused.length > 0) {
            var $th = focused.parents('th');
            if ($th.length > 0) {
                var dataField = $th.attr('data-field');
                if (dataField !== undefined) {
                    var $headerTh = this.$header.find("[data-field='" + dataField + "']");
                    if ($headerTh.length > 0) {
                        $headerTh.find(":input").addClass("focus-temp");
                    }
                }
            }
        }

        this.$header_ = this.$header.clone(true, true);
        this.$selectAll_ = this.$header_.find('[name="btSelectAll"]');
        this.$tableHeader.css({
            'margin-right': scrollWidth
        }).find('table').css('width', this.$el.outerWidth())
            .html('').attr('class', this.$el.attr('class'))
            .append(this.$header_);


        focusedTemp = $('.focus-temp:visible:eq(0)');
        if (focusedTemp.length > 0) {
            focusedTemp.focus();
            this.$header.find('.focus-temp').removeClass('focus-temp');
        }

        // fix bug: $.data() is not working as expected after $.append()
        this.$header.find('th[data-field]').each(function (i) {
            that.$header_.find(sprintf('th[data-field="%s"]', $(this).data('field'))).data($(this).data());
        });

        var visibleFields = this.getVisibleFields(),
            $ths = this.$header_.find('th');

        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {
            var $this = $(this),
                index = i;

            if (that.options.detailView && !that.options.cardView) {
                if (i === 0) {
                    that.$header_.find('th.detail').find('.fht-cell').width($this.innerWidth());
                }
                index = i - 1;
            }

            var $th = that.$header_.find(sprintf('th[data-field="%s"]', visibleFields[index]));
            if ($th.length > 1) {
                $th = $($ths[$this[0].cellIndex]);
            }

            $th.find('.fht-cell').width($this.innerWidth());
        });
        // horizontal scroll event
        // TODO: it's probably better improving the layout than binding to scroll event
        this.$tableBody.off('scroll').on('scroll', function () {
            that.$tableHeader.scrollLeft($(this).scrollLeft());

            if (that.options.showFooter && !that.options.cardView) {
                that.$tableFooter.scrollLeft($(this).scrollLeft());
            }
        });
        that.trigger('post-header');
    };

    BootstrapTable.prototype.resetFooter = function () {
        var that = this,
            data = that.getData(),
            html = [];

        if (!this.options.showFooter || this.options.cardView) { //do nothing
            return;
        }

        if (!this.options.cardView && this.options.detailView) {
            html.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>');
        }

        $.each(this.columns, function (i, column) {
            var key,
                falign = '', // footer align style
                valign = '',
                csses = [],
                style = {},
                class_ = sprintf(' class="%s"', column['class']);

            if (!column.visible) {
                return;
            }

            if (that.options.cardView && (!column.cardVisible)) {
                return;
            }

            falign = sprintf('text-align: %s; ', column.falign ? column.falign : column.align);
            valign = sprintf('vertical-align: %s; ', column.valign);

            style = calculateObjectValue(null, that.options.footerStyle);

            if (style && style.css) {
                for (key in style.css) {
                    csses.push(key + ': ' + style.css[key]);
                }
            }

            html.push('<td', class_, sprintf(' style="%s"', falign + valign + csses.concat().join('; ')), '>');
            html.push('<div class="th-inner">');

            html.push(calculateObjectValue(column, column.footerFormatter, [data], '&nbsp;') || '&nbsp;');

            html.push('</div>');
            html.push('<div class="fht-cell"></div>');
            html.push('</div>');
            html.push('</td>');
        });

        this.$tableFooter.find('tr').html(html.join(''));
        this.$tableFooter.show();
        clearTimeout(this.timeoutFooter_);
        this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this),
            this.$el.is(':hidden') ? 100 : 0);
    };

    BootstrapTable.prototype.fitFooter = function () {
        var that = this,
            $footerTd,
            elWidth,
            scrollWidth;

        clearTimeout(this.timeoutFooter_);
        if (this.$el.is(':hidden')) {
            this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this), 100);
            return;
        }

        elWidth = this.$el.css('width');
        scrollWidth = elWidth > this.$tableBody.width() ? getScrollBarWidth() : 0;

        this.$tableFooter.css({
            'margin-right': scrollWidth
        }).find('table').css('width', elWidth)
            .attr('class', this.$el.attr('class'));

        $footerTd = this.$tableFooter.find('td');

        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {
            var $this = $(this);

            $footerTd.eq(i).find('.fht-cell').width($this.innerWidth());
        });
    };

    BootstrapTable.prototype.toggleColumn = function (index, checked, needUpdate) {
        if (index === -1) {
            return;
        }
        this.columns[index].visible = checked;
        this.initHeader();
        this.initSearch();
        this.initPagination();
        this.initBody();

        if (this.options.showColumns) {
            var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);

            if (needUpdate) {
                $items.filter(sprintf('[value="%s"]', index)).prop('checked', checked);
            }

            if ($items.filter(':checked').length <= this.options.minimumCountColumns) {
                $items.filter(':checked').prop('disabled', true);
            }
        }
    };

    BootstrapTable.prototype.getVisibleFields = function () {
        var that = this,
            visibleFields = [];

        $.each(this.header.fields, function (j, field) {
            var column = that.columns[getFieldIndex(that.columns, field)];

            if (!column.visible) {
                return;
            }
            visibleFields.push(field);
        });
        return visibleFields;
    };

    // PUBLIC FUNCTION DEFINITION
    // =======================

    BootstrapTable.prototype.resetView = function (params) {
        var padding = 0;

        if (params && params.height) {
            this.options.height = params.height;
        }

        this.$selectAll.prop('checked', this.$selectItem.length > 0 &&
            this.$selectItem.length === this.$selectItem.filter(':checked').length);

        if (this.options.height) {
            var toolbarHeight = this.$toolbar.outerHeight(true),
                paginationHeight = this.$pagination.outerHeight(true),
                height = this.options.height - toolbarHeight - paginationHeight;
            	
/*            	var dheight = document.body.clientHeight;
            	if($('.bootstrap-table').length == 1){
            		console.log($('.bootstrap-table').length);
                    this.$tableContainer.css('height', dheight - 93 + 'px');
            	}*/
        }

        if (this.options.cardView) {
            // remove the element css
            this.$el.css('margin-top', '0');
            this.$tableContainer.css('padding-bottom', '0');
            this.$tableFooter.hide();
            return;
        }

        if (this.options.showHeader && this.options.height) {
            this.$tableHeader.show();
            //有的话,表头与内容不对齐;没有,无法使用排序
            this.resetHeader();
            padding += this.$header.outerHeight();
        } else {
            this.$tableHeader.hide();
            this.trigger('post-header');
        }

        if (this.options.showFooter) {
            this.resetFooter();
            if (this.options.height) {
                padding += this.$tableFooter.outerHeight() + 1;
            }
        }

        // Assign the correct sortable arrow
        this.getCaret();
//        this.$tableContainer.css('padding-bottom', padding + 'px');
        this.trigger('reset-view');
    };

    BootstrapTable.prototype.getData = function (useCurrentPage) {
        return (this.searchText || !$.isEmptyObject(this.filterColumns) || !$.isEmptyObject(this.filterColumnsPartial)) ?
            (useCurrentPage ? this.data.slice(this.pageFrom - 1, this.pageTo) : this.data) :
            (useCurrentPage ? this.options.data.slice(this.pageFrom - 1, this.pageTo) : this.options.data);
    };

    BootstrapTable.prototype.load = function (data) {
        var fixedScroll = false;

        // #431: support pagination
        if (this.options.sidePagination === 'server') {
            this.options.totalRows = data[this.options.totalField];
            fixedScroll = data.fixedScroll;
            data = data[this.options.dataField];
        } else if (!$.isArray(data)) { // support fixedScroll
            fixedScroll = data.fixedScroll;
            data = data.data;
        }

        this.initData(data);
        this.initSearch();
        this.initPagination();
        this.initBody(fixedScroll);
    };

    BootstrapTable.prototype.append = function (data) {
        this.initData(data, 'append');
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.prepend = function (data) {
        this.initData(data, 'prepend');
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.remove = function (params) {
        var len = this.options.data.length,
            i, row;

        if (!params.hasOwnProperty('field') || !params.hasOwnProperty('values')) {
            return;
        }

        for (i = len - 1; i >= 0; i--) {
            row = this.options.data[i];

            if (!row.hasOwnProperty(params.field)) {
                continue;
            }
            if ($.inArray(row[params.field], params.values) !== -1) {
                this.options.data.splice(i, 1);
                if (this.options.sidePagination === 'server') {
                    this.options.totalRows -= 1;
                }
            }
        }

        if (len === this.options.data.length) {
            return;
        }

        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.removeAll = function () {
        if (this.options.data.length > 0) {
            this.options.data.splice(0, this.options.data.length);
            this.initSearch();
            this.initPagination();
            this.initBody(true);
        }
    };

    BootstrapTable.prototype.getRowByUniqueId = function (id) {
        var uniqueId = this.options.uniqueId,
            len = this.options.data.length,
            dataRow = null,
            i, row, rowUniqueId;

        for (i = len - 1; i >= 0; i--) {
            row = this.options.data[i];

            if (row.hasOwnProperty(uniqueId)) { // uniqueId is a column
                rowUniqueId = row[uniqueId];
            } else if(row._data.hasOwnProperty(uniqueId)) { // uniqueId is a row data property
                rowUniqueId = row._data[uniqueId];
            } else {
                continue;
            }

            if (typeof rowUniqueId === 'string') {
                id = id.toString();
            } else if (typeof rowUniqueId === 'number') {
                if ((Number(rowUniqueId) === rowUniqueId) && (rowUniqueId % 1 === 0)) {
                    id = parseInt(id);
                } else if ((rowUniqueId === Number(rowUniqueId)) && (rowUniqueId !== 0)) {
                    id = parseFloat(id);
                }
            }

            if (rowUniqueId === id) {
                dataRow = row;
                break;
            }
        }

        return dataRow;
    };

    BootstrapTable.prototype.removeByUniqueId = function (id) {
        var len = this.options.data.length,
            row = this.getRowByUniqueId(id);

        if (row) {
            this.options.data.splice(this.options.data.indexOf(row), 1);
        }

        if (len === this.options.data.length) {
            return;
        }

        this.initSearch();
        this.initPagination();
        this.initBody(true);
    };

    BootstrapTable.prototype.updateByUniqueId = function (params) {
        var that = this;
        var allParams = $.isArray(params) ? params : [ params ];

        $.each(allParams, function(i, params) {
            var rowId;

            if (!params.hasOwnProperty('id') || !params.hasOwnProperty('row')) {
                return;
            }

            rowId = $.inArray(that.getRowByUniqueId(params.id), that.options.data);

            if (rowId === -1) {
                return;
            }
            $.extend(that.options.data[rowId], params.row);
        });

        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.insertRow = function (params) {
        if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {
            return;
        }
        this.data.splice(params.index, 0, params.row);
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.updateRow = function (params) {
        var that = this;
        var allParams = $.isArray(params) ? params : [ params ];

        $.each(allParams, function(i, params) {
            if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {
                return;
            }
            $.extend(that.options.data[params.index], params.row);
        });

        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.initHiddenRows = function () {
        this.hiddenRows = [];
    };

    BootstrapTable.prototype.showRow = function (params) {
        this.toggleRow(params, true);
    };

    BootstrapTable.prototype.hideRow = function (params) {
        this.toggleRow(params, false);
    };

    BootstrapTable.prototype.toggleRow = function (params, visible) {
        var row, index;

        if (params.hasOwnProperty('index')) {
            row = this.getData()[params.index];
        } else if (params.hasOwnProperty('uniqueId')) {
            row = this.getRowByUniqueId(params.uniqueId);
        }

        if (!row) {
            return;
        }

        index = $.inArray(row, this.hiddenRows);

        if (!visible && index === -1) {
            this.hiddenRows.push(row);
        } else if (visible && index > -1) {
            this.hiddenRows.splice(index, 1);
        }
        this.initBody(true);
    };

    BootstrapTable.prototype.getHiddenRows = function (show) {
        var that = this,
            data = this.getData(),
            rows = [];

        $.each(data, function (i, row) {
            if ($.inArray(row, that.hiddenRows) > -1) {
                rows.push(row);
            }
        });
        this.hiddenRows = rows;
        return rows;
    };

    BootstrapTable.prototype.mergeCells = function (options) {
        var row = options.index,
            col = $.inArray(options.field, this.getVisibleFields()),
            rowspan = options.rowspan || 1,
            colspan = options.colspan || 1,
            i, j,
            $tr = this.$body.find('>tr'),
            $td;

        if (this.options.detailView && !this.options.cardView) {
            col += 1;
        }

        $td = $tr.eq(row).find('>td').eq(col);

        if (row < 0 || col < 0 || row >= this.data.length) {
            return;
        }

        for (i = row; i < row + rowspan; i++) {
            for (j = col; j < col + colspan; j++) {
                $tr.eq(i).find('>td').eq(j).hide();
            }
        }

        $td.attr('rowspan', rowspan).attr('colspan', colspan).show();
    };

    BootstrapTable.prototype.updateCell = function (params) {
        if (!params.hasOwnProperty('index') ||
            !params.hasOwnProperty('field') ||
            !params.hasOwnProperty('value')) {
            return;
        }
        this.data[params.index][params.field] = params.value;

        if (params.reinit === false) {
            return;
        }
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.getOptions = function () {
        return this.options;
    };

    BootstrapTable.prototype.getSelections = function () {
        var that = this;

        return $.grep(this.options.data, function (row) {
            // fix #2424: from html with checkbox
            return row[that.header.stateField] === true;
        });
    };

    BootstrapTable.prototype.getAllSelections = function () {
        var that = this;

        return $.grep(this.options.data, function (row) {
            return row[that.header.stateField];
        });
    };

    BootstrapTable.prototype.checkAll = function () {
        this.checkAll_(true);
    };

    BootstrapTable.prototype.uncheckAll = function () {
        this.checkAll_(false);
    };

    BootstrapTable.prototype.checkInvert = function () {
        var that = this;
        var rows = that.$selectItem.filter(':enabled');
        var checked = rows.filter(':checked');
        rows.each(function() {
            $(this).prop('checked', !$(this).prop('checked'));
        });
        that.updateRows();
        that.updateSelected();
        that.trigger('uncheck-some', checked);
        checked = that.getSelections();
        that.trigger('check-some', checked);
    };

    BootstrapTable.prototype.checkAll_ = function (checked) {
        var rows;
        if (!checked) {
            rows = this.getSelections();
        }
        this.$selectAll.add(this.$selectAll_).prop('checked', checked);
        this.$selectItem.filter(':enabled').prop('checked', checked);
        this.updateRows();
        if (checked) {
            rows = this.getSelections();
        }
        this.trigger(checked ? 'check-all' : 'uncheck-all', rows);
    };

    BootstrapTable.prototype.check = function (index) {
        this.check_(true, index);
    };

    BootstrapTable.prototype.uncheck = function (index) {
        this.check_(false, index);
    };

    BootstrapTable.prototype.check_ = function (checked, index) {
        var $el = this.$selectItem.filter(sprintf('[data-index="%s"]', index)).prop('checked', checked);
        this.data[index][this.header.stateField] = checked;
        this.updateSelected();
        this.trigger(checked ? 'check' : 'uncheck', this.data[index], $el);
    };

    BootstrapTable.prototype.checkBy = function (obj) {
        this.checkBy_(true, obj);
    };

    BootstrapTable.prototype.uncheckBy = function (obj) {
        this.checkBy_(false, obj);
    };

    BootstrapTable.prototype.checkBy_ = function (checked, obj) {
        if (!obj.hasOwnProperty('field') || !obj.hasOwnProperty('values')) {
            return;
        }

        var that = this,
            rows = [];
        $.each(this.options.data, function (index, row) {
            if (!row.hasOwnProperty(obj.field)) {
                return false;
            }
            if ($.inArray(row[obj.field], obj.values) !== -1) {
                var $el = that.$selectItem.filter(':enabled')
                    .filter(sprintf('[data-index="%s"]', index)).prop('checked', checked);
                row[that.header.stateField] = checked;
                rows.push(row);
                that.trigger(checked ? 'check' : 'uncheck', row, $el);
            }
        });
        this.updateSelected();
        this.trigger(checked ? 'check-some' : 'uncheck-some', rows);
    };

    BootstrapTable.prototype.destroy = function () {
        this.$el.insertBefore(this.$container);
        $(this.options.toolbar).insertBefore(this.$el);
        this.$container.next().remove();
        this.$container.remove();
        this.$el.html(this.$el_.html())
            .css('margin-top', '0')
            .attr('class', this.$el_.attr('class') || ''); // reset the class
    };

    BootstrapTable.prototype.showLoading = function () {
        this.$tableLoading.show();
    };

    BootstrapTable.prototype.hideLoading = function () {
        this.$tableLoading.hide();
    };

    BootstrapTable.prototype.togglePagination = function () {
        this.options.pagination = !this.options.pagination;
        var button = this.$toolbar.find('button[name="paginationSwitch"] i');
        if (this.options.pagination) {
            button.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchDown);
        } else {
            button.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchUp);
        }
        this.updatePagination();
    };

    BootstrapTable.prototype.refresh = function (params) {
        if (params && params.url) {
            this.options.pageNumber = 1;
        }
        this.initServer(params && params.silent,
            params && params.query, params && params.url);
        this.trigger('refresh', params);
    };

    BootstrapTable.prototype.resetWidth = function () {
        if (this.options.showHeader && this.options.height) {
            this.fitHeader();
        }
        if (this.options.showFooter) {
            this.fitFooter();
        }
    };

    BootstrapTable.prototype.showColumn = function (field) {
        this.toggleColumn(getFieldIndex(this.columns, field), true, true);
    };

    BootstrapTable.prototype.hideColumn = function (field) {
        this.toggleColumn(getFieldIndex(this.columns, field), false, true);
    };

    BootstrapTable.prototype.getHiddenColumns = function () {
        return $.grep(this.columns, function (column) {
            return !column.visible;
        });
    };

    BootstrapTable.prototype.getVisibleColumns = function () {
        return $.grep(this.columns, function (column) {
            return column.visible;
        });
    };

    BootstrapTable.prototype.toggleAllColumns = function (visible) {
        $.each(this.columns, function (i, column) {
            this.columns[i].visible = visible;
        });

        this.initHeader();
        this.initSearch();
        this.initPagination();
        this.initBody();
        if (this.options.showColumns) {
            var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);

            if ($items.filter(':checked').length <= this.options.minimumCountColumns) {
                $items.filter(':checked').prop('disabled', true);
            }
        }
    };

    BootstrapTable.prototype.showAllColumns = function () {
        this.toggleAllColumns(true);
    };

    BootstrapTable.prototype.hideAllColumns = function () {
        this.toggleAllColumns(false);
    };

    BootstrapTable.prototype.filterBy = function (columns) {
        this.filterColumns = $.isEmptyObject(columns) ? {} : columns;
        this.options.pageNumber = 1;
        this.initSearch();
        this.updatePagination();
    };

    BootstrapTable.prototype.scrollTo = function (value) {
        if (typeof value === 'string') {
            value = value === 'bottom' ? this.$tableBody[0].scrollHeight : 0;
        }
        if (typeof value === 'number') {
            this.$tableBody.scrollTop(value);
        }
        if (typeof value === 'undefined') {
            return this.$tableBody.scrollTop();
        }
    };

    BootstrapTable.prototype.getScrollPosition = function () {
        return this.scrollTo();
    };

    BootstrapTable.prototype.selectPage = function (page) {
        if (page > 0 && page <= this.options.totalPages) {
            this.options.pageNumber = page;
            this.updatePagination();
        }
    };

    BootstrapTable.prototype.prevPage = function () {
        if (this.options.pageNumber > 1) {
            this.options.pageNumber--;
            this.updatePagination();
        }
    };

    BootstrapTable.prototype.nextPage = function () {
        if (this.options.pageNumber < this.options.totalPages) {
            this.options.pageNumber++;
            this.updatePagination();
        }
    };

    BootstrapTable.prototype.toggleView = function () {
        this.options.cardView = !this.options.cardView;
        this.initHeader();
        // Fixed remove toolbar when click cardView button.
        //that.initToolbar();
        this.initBody();
        this.trigger('toggle', this.options.cardView);
    };

    BootstrapTable.prototype.refreshOptions = function (options) {
        //If the objects are equivalent then avoid the call of destroy / init methods
        if (compareObjects(this.options, options, true)) {
            return;
        }
        this.options = $.extend(this.options, options);
        this.trigger('refresh-options', this.options);
        this.destroy();
        this.init();
    };

    BootstrapTable.prototype.resetSearch = function (text) {
        var $search = this.$toolbar.find('.search input');
        $search.val(text || '');
        this.onSearch({currentTarget: $search});
    };

    BootstrapTable.prototype.expandRow_ = function (expand, index) {
        var $tr = this.$body.find(sprintf('> tr[data-index="%s"]', index));
        if ($tr.next().is('tr.detail-view') === (expand ? false : true)) {
            $tr.find('> td > .detail-icon').click();
        }
    };

    BootstrapTable.prototype.expandRow = function (index) {
        this.expandRow_(true, index);
    };

    BootstrapTable.prototype.collapseRow = function (index) {
        this.expandRow_(false, index);
    };

    BootstrapTable.prototype.expandAllRows = function (isSubTable) {
        if (isSubTable) {
            var $tr = this.$body.find(sprintf('> tr[data-index="%s"]', 0)),
                that = this,
                detailIcon = null,
                executeInterval = false,
                idInterval = -1;

            if (!$tr.next().is('tr.detail-view')) {
                $tr.find('> td > .detail-icon').click();
                executeInterval = true;
            } else if (!$tr.next().next().is('tr.detail-view')) {
                $tr.next().find(".detail-icon").click();
                executeInterval = true;
            }

            if (executeInterval) {
                try {
                    idInterval = setInterval(function () {
                        detailIcon = that.$body.find("tr.detail-view").last().find(".detail-icon");
                        if (detailIcon.length > 0) {
                            detailIcon.click();
                        } else {
                            clearInterval(idInterval);
                        }
                    }, 1);
                } catch (ex) {
                    clearInterval(idInterval);
                }
            }
        } else {
            var trs = this.$body.children();
            for (var i = 0; i < trs.length; i++) {
                this.expandRow_(true, $(trs[i]).data("index"));
            }
        }
    };

    BootstrapTable.prototype.collapseAllRows = function (isSubTable) {
        if (isSubTable) {
            this.expandRow_(false, 0);
        } else {
            var trs = this.$body.children();
            for (var i = 0; i < trs.length; i++) {
                this.expandRow_(false, $(trs[i]).data("index"));
            }
        }
    };

    BootstrapTable.prototype.updateFormatText = function (name, text) {
        if (this.options[sprintf('format%s', name)]) {
            if (typeof text === 'string') {
                this.options[sprintf('format%s', name)] = function () {
                    return text;
                };
            } else if (typeof text === 'function') {
                this.options[sprintf('format%s', name)] = text;
            }
        }
        this.initToolbar();
        this.initPagination();
        this.initBody();
    };

    // BOOTSTRAP TABLE PLUGIN DEFINITION
    // =======================

    var allowedMethods = [
        'getOptions',
        'getSelections', 'getAllSelections', 'getData',
        'load', 'append', 'prepend', 'remove', 'removeAll',
        'insertRow', 'updateRow', 'updateCell', 'updateByUniqueId', 'removeByUniqueId',
        'getRowByUniqueId', 'showRow', 'hideRow', 'getHiddenRows',
        'mergeCells',
        'checkAll', 'uncheckAll', 'checkInvert',
        'check', 'uncheck',
        'checkBy', 'uncheckBy',
        'refresh',
        'resetView',
        'resetWidth',
        'destroy',
        'showLoading', 'hideLoading',
        'showColumn', 'hideColumn', 'getHiddenColumns', 'getVisibleColumns',
        'showAllColumns', 'hideAllColumns',
        'filterBy',
        'scrollTo',
        'getScrollPosition',
        'selectPage', 'prevPage', 'nextPage',
        'togglePagination',
        'toggleView',
        'refreshOptions',
        'resetSearch',
        'expandRow', 'collapseRow', 'expandAllRows', 'collapseAllRows',
        'updateFormatText'
    ];

    $.fn.bootstrapTable = function (option) {
        var value,
            args = Array.prototype.slice.call(arguments, 1);

        this.each(function () {
            var $this = $(this),
                data = $this.data('bootstrap.table'),
                options = $.extend({}, BootstrapTable.DEFAULTS, $this.data(),
                    typeof option === 'object' && option);

            if (typeof option === 'string') {
                if ($.inArray(option, allowedMethods) < 0) {
                    throw new Error("Unknown method: " + option);
                }

                if (!data) {
                    return;
                }

                value = data[option].apply(data, args);

                if (option === 'destroy') {
                    $this.removeData('bootstrap.table');
                }
            }

            if (!data) {
                $this.data('bootstrap.table', (data = new BootstrapTable(this, options)));
            }
        });

        return typeof value === 'undefined' ? this : value;
    };

    $.fn.bootstrapTable.Constructor = BootstrapTable;
    $.fn.bootstrapTable.defaults = BootstrapTable.DEFAULTS;
    $.fn.bootstrapTable.columnDefaults = BootstrapTable.COLUMN_DEFAULTS;
    $.fn.bootstrapTable.locales = BootstrapTable.LOCALES;
    $.fn.bootstrapTable.methods = allowedMethods;
    $.fn.bootstrapTable.utils = {
        sprintf: sprintf,
        getFieldIndex: getFieldIndex,
        compareObjects: compareObjects,
        calculateObjectValue: calculateObjectValue,
        getItemField: getItemField,
        objectKeys: objectKeys,
        isIEBrowser: isIEBrowser
    };

    // BOOTSTRAP TABLE INIT
    // =======================

    $(function () {
        $('[data-toggle="table"]').bootstrapTable();
    });
})(jQuery);
$(window).resize(function () {
    $('#continuousAlarmTable').bootstrapTable('resetView');
});
/*bootstrap-table-export.js*/
/**
 * @author zhixin wen <wenzhixin2010@gmail.com>
 * extensions: https://github.com/kayalshri/tableExport.jquery.plugin
 */

(function ($) {
    'use strict';
    var sprintf = $.fn.bootstrapTable.utils.sprintf;

    var TYPE_NAME = {
        json: 'JSON',
        xml: 'XML',
        png: 'PNG',
        csv: 'CSV',
        txt: 'TXT',
        sql: 'SQL',
        doc: 'MS-Word',
        excel: 'MS-Excel',
        powerpoint: 'MS-Powerpoint',
        pdf: 'PDF'
    };

    $.extend($.fn.bootstrapTable.defaults, {
        showExport: false,
        exportDataType: 'basic', // basic, all, selected
        // 'json', 'xml', 'png', 'csv', 'txt', 'sql', 'doc', 'excel', 'powerpoint', 'pdf'
        exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],
        exportOptions: {}
    });

    $.extend($.fn.bootstrapTable.defaults.icons, {
        export: 'glyphicon-export icon-share'
    });

    $.extend($.fn.bootstrapTable.locales, {
        formatExport: function () {
            return '导出';
        }
    });
    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);

    var BootstrapTable = $.fn.bootstrapTable.Constructor,
        _initToolbar = BootstrapTable.prototype.initToolbar;

    BootstrapTable.prototype.initToolbar = function () {
        this.showToolbar = this.options.showExport;

        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));

        if (this.options.showExport) {
            var that = this,
                $btnGroup = this.$toolbar.find('>.btn-group'),
                $export = $btnGroup.find('div.export');

            if (!$export.length) {
                $export = $([
                    '<div class="export btn-group">',
                        '<button class="btn' +
                            sprintf(' btn-%s', this.options.buttonsClass) +
                            sprintf(' btn-%s', this.options.iconSize) +
                            ' dropdown-toggle" ' +
                            'title="' + this.options.formatExport() + '" ' +
                            'data-toggle="dropdown" type="button">',
                            sprintf('<i class="%s %s"></i> ', this.options.iconsPrefix, this.options.icons.export),
                            '<span class="caret"></span>',
                        '</button>',
                        '<ul class="dropdown-menu" role="menu">',
                        '</ul>',
                    '</div>'].join('')).appendTo($btnGroup);

                var $menu = $export.find('.dropdown-menu'),
                    exportTypes = this.options.exportTypes;

                if (typeof this.options.exportTypes === 'string') {
                    var types = this.options.exportTypes.slice(1, -1).replace(/ /g, '').split(',');

                    exportTypes = [];
                    $.each(types, function (i, value) {
                        exportTypes.push(value.slice(1, -1));
                    });
                }
                $.each(exportTypes, function (i, type) {
                    if (TYPE_NAME.hasOwnProperty(type)) {
                        $menu.append(['<li data-type="' + type + '">',
                                '<a href="javascript:void(0)">',
                                    TYPE_NAME[type],
                                '</a>',
                            '</li>'].join(''));
                    }
                });

                $menu.find('li').click(function () {
                    var type = $(this).data('type'),
                        doExport = function () {
                            that.$el.tableExport($.extend({}, that.options.exportOptions, {
                                type: type,
                                escape: false
                            }));
                        };

                    if (that.options.exportDataType === 'all' && that.options.pagination) {
                        that.$el.one(that.options.sidePagination === 'server' ? 'post-body.bs.table' : 'page-change.bs.table', function () {
                            doExport();
                            that.togglePagination();
                        });
                        that.togglePagination();
                    } else if (that.options.exportDataType === 'selected') {
                        var data = that.getData(),
                            selectedData = that.getAllSelections();

                        // Quick fix #2220
                        if (that.options.sidePagination === 'server') {
                            data = {total: that.options.totalRows};
                            data[that.options.dataField] = that.getData();

                            selectedData = {total: that.options.totalRows};
                            selectedData[that.options.dataField] = that.getAllSelections();
                        }

                        that.load(selectedData);
                        doExport();
                        that.load(data);
                    } else {
                        doExport();
                    }
                });
            }
        }
    };
})(jQuery);
/*tableExport.js*/
/**
 * @preserve tableExport.jquery.plugin
 *
 * Copyright (c) 2015-2017 hhurz, https://github.com/hhurz/tableExport.jquery.plugin
 * Original work Copyright (c) 2014 Giri Raj, https://github.com/kayalshri/
 *
 * Licensed under the MIT License, http://opensource.org/licenses/mit-license
 */

(function ($) {
  $.fn.extend({
    tableExport: function (options) {
      var defaults = {
        consoleLog: false,
        csvEnclosure: '"',
        csvSeparator: ',',
        csvUseBOM: true,
        displayTableName: false,
        escape: false,
        excelstyles: [],       // e.g. ['border-bottom', 'border-top', 'border-left', 'border-right']
        fileName: 'tableExport',
        htmlContent: false,
        ignoreColumn: [],
        ignoreRow:[],
        jsonScope: 'all', // head, data, all
        jspdf: {orientation: 'p',
                unit: 'pt',
                format: 'a4', // jspdf page format or 'bestfit' for autmatic paper format selection
                margins: {left: 20, right: 10, top: 10, bottom: 10},
                autotable: {styles: {cellPadding: 2,
                                     rowHeight: 12,
                                     fontSize: 8,
                                     fillColor: 255,        // color value or 'inherit' to use css background-color from html table
                                     textColor: 50,         // color value or 'inherit' to use css color from html table
                                     fontStyle: 'normal',   // normal, bold, italic, bolditalic or 'inherit' to use css font-weight and fonst-style from html table
                                     overflow: 'ellipsize', // visible, hidden, ellipsize or linebreak
                                     halign: 'left',        // left, center, right
                                     valign: 'middle'       // top, middle, bottom
                                    },
                            headerStyles: {fillColor: [52, 73, 94],
                                           textColor: 255,
                                           fontStyle: 'bold',
                                           halign: 'center'
                                          },
                            alternateRowStyles: {fillColor: 245
                                                },
                            tableExport: {onAfterAutotable: null,
                                          onBeforeAutotable: null,
                                          onTable: null,
                                          outputImages: true
                                         }
                           }
               },
        numbers: {html: {decimalMark: '.',
                         thousandsSeparator: ','
                        },
                  output: // set to false to not format numbers in exported output
                          {decimalMark: '.',
                           thousandsSeparator: ','
                          }
                 },
        onCellData: null,
        onCellHtmlData: null,
        outputMode: 'file',  // 'file', 'string', 'base64' or 'window' (experimental)
        pdfmake: {enabled: false}, // true: use pdfmake instead of jspdf and jspdf-autotable (experimental)
        tbodySelector: 'tr',
        tfootSelector: 'tr', // set empty ('') to prevent export of tfoot rows
        theadSelector: 'tr',
        tableName: 'myTableName',
        type: 'csv', // 'csv', 'tsv', 'txt', 'sql', 'json', 'xml', 'excel', 'doc', 'png' or 'pdf'
        worksheetName: 'xlsWorksheetName'
      };

      var FONT_ROW_RATIO = 1.15;
      var el = this;
      var DownloadEvt = null;
      var $hrows = [];
      var $rows = [];
      var rowIndex = 0;
      var rowspans = [];
      var trData = '';
      var colNames = [];
      var blob;

      $.extend(true, defaults, options);

      colNames = GetColumnNames (el);

      if (defaults.type == 'csv' || defaults.type == 'tsv' || defaults.type == 'txt') {

        var csvData = "";
        var rowlength = 0;
        rowIndex = 0;

        function csvString(cell, rowIndex, colIndex) {
          var result = '';

          if (cell !== null) {
            var dataString = parseString(cell, rowIndex, colIndex);

            var csvValue = (dataString === null || dataString === '') ? '' : dataString.toString();

            if (defaults.type == 'tsv') {
              if (dataString instanceof Date)
                result = dataString.toLocaleString();

              // According to http://www.iana.org/assignments/media-types/text/tab-separated-values
              // are fields that contain tabs not allowable in tsv encoding
              result = replaceAll(csvValue, '\t', ' ');
            }
            else {
              // Takes a string and encapsulates it (by default in double-quotes) if it
              // contains the csv field separator, spaces, or linebreaks.
              if (dataString instanceof Date)
                result = defaults.csvEnclosure + dataString.toLocaleString() + defaults.csvEnclosure;
              else {
                result = replaceAll(csvValue, defaults.csvEnclosure, defaults.csvEnclosure + defaults.csvEnclosure);

                if (result.indexOf(defaults.csvSeparator) >= 0 || /[\r\n ]/g.test(result))
                  result = defaults.csvEnclosure + result + defaults.csvEnclosure;
              }
            }
          }

          return result;
        }

        var CollectCsvData = function ($rows, rowselector, length) {

          $rows.each(function () {
            trData = "";
            ForEachVisibleCell(this, rowselector, rowIndex, length + $rows.length,
                    function (cell, row, col) {
                      trData += csvString(cell, row, col) + (defaults.type == 'tsv' ? '\t' : defaults.csvSeparator);
                    });
            trData = $.trim(trData).substring(0, trData.length - 1);
            if (trData.length > 0) {

              if (csvData.length > 0)
                csvData += "\n";

              csvData += trData;
            }
            rowIndex++;
          });

          return $rows.length;
        };

        rowlength += CollectCsvData ($(el).find('thead').first().find(defaults.theadSelector), 'th,td', rowlength);
        $(el).find('tbody').each(function() {
          rowlength += CollectCsvData ($(this).find(defaults.tbodySelector), 'td,th', rowlength);
        });
        if (defaults.tfootSelector.length)
          CollectCsvData ($(el).find('tfoot').first().find(defaults.tfootSelector), 'td,th', rowlength);

        csvData += "\n";

        //output
        if (defaults.consoleLog === true)
          console.log(csvData);

        if (defaults.outputMode === 'string')
          return csvData;

        if (defaults.outputMode === 'base64')
          return base64encode(csvData);

        if (defaults.outputMode === 'window') {
          downloadFile(false, 'data:text/' + (defaults.type == 'csv' ? 'csv' : 'plain') + ';charset=utf-8,', csvData);
          return;
        }

        try {
          blob = new Blob([csvData], {type: "text/" + (defaults.type == 'csv' ? 'csv' : 'plain') + ";charset=utf-8"});
          saveAs(blob, defaults.fileName + '.' + defaults.type, (defaults.type != 'csv' || defaults.csvUseBOM === false));
        }
        catch (e) {
          downloadFile(defaults.fileName + '.' + defaults.type,
                       'data:text/' + (defaults.type == 'csv' ? 'csv' : 'plain') + ';charset=utf-8,' + ((defaults.type == 'csv' && defaults.csvUseBOM)? '\ufeff' : ''),
                       csvData);
        }

      } else if (defaults.type == 'sql') {

        // Header
        rowIndex = 0;
        var tdData = "INSERT INTO `" + defaults.tableName + "` (";
        $hrows = $(el).find('thead').first().find(defaults.theadSelector);
        $hrows.each(function () {
          ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                  function (cell, row, col) {
                    tdData += "'" + parseString(cell, row, col) + "',";
                  });
          rowIndex++;
          tdData = $.trim(tdData);
          tdData = $.trim(tdData).substring(0, tdData.length - 1);
        });
        tdData += ") VALUES ";
        // Row vs Column
        $(el).find('tbody').each(function() {
          $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
        });
        if (defaults.tfootSelector.length)
          $rows.push.apply ($rows, $(el).find('tfoot').find(defaults.tfootSelector));
        $($rows).each(function () {
          trData = "";
          ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                  function (cell, row, col) {
                    trData += "'" + parseString(cell, row, col) + "',";
                  });
          if (trData.length > 3) {
            tdData += "(" + trData;
            tdData = $.trim(tdData).substring(0, tdData.length - 1);
            tdData += "),";
          }
          rowIndex++;
        });

        tdData = $.trim(tdData).substring(0, tdData.length - 1);
        tdData += ";";

        //output
        if (defaults.consoleLog === true)
          console.log(tdData);

        if (defaults.outputMode === 'string')
          return tdData;

        if (defaults.outputMode === 'base64')
          return base64encode(tdData);

        try {
          blob = new Blob([tdData], {type: "text/plain;charset=utf-8"});
          saveAs(blob, defaults.fileName + '.sql');
        }
        catch (e) {
          downloadFile(defaults.fileName + '.sql',
                       'data:application/sql;charset=utf-8,',
                       tdData);
        }

      } else if (defaults.type == 'json') {

        var jsonHeaderArray = [];
        $hrows = $(el).find('thead').first().find(defaults.theadSelector);
        $hrows.each(function () {
          var jsonArrayTd = [];

          ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                  function (cell, row, col) {
                    jsonArrayTd.push(parseString(cell, row, col));
                  });
          jsonHeaderArray.push(jsonArrayTd);
        });

        var jsonArray = [];
        $(el).find('tbody').each(function() {
          $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
        });
        if (defaults.tfootSelector.length)
          $rows.push.apply ($rows, $(el).find('tfoot').find(defaults.tfootSelector));
        $($rows).each(function () {
          var jsonObjectTd = {};

          var colIndex = 0;
          ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                  function (cell, row, col) {
                    if (jsonHeaderArray.length) {
                      jsonObjectTd[jsonHeaderArray[jsonHeaderArray.length-1][colIndex]] = parseString(cell, row, col);
                    } else {
                      jsonObjectTd[colIndex] = parseString(cell, row, col);
                    }
                    colIndex++;
                  });
          if ($.isEmptyObject(jsonObjectTd) === false)
            jsonArray.push(jsonObjectTd);

          rowIndex++;
        });

        var sdata = "";

        if (defaults.jsonScope == 'head')
          sdata = JSON.stringify(jsonHeaderArray);
        else if (defaults.jsonScope == 'data')
          sdata = JSON.stringify(jsonArray);
        else // all
          sdata = JSON.stringify({header: jsonHeaderArray, data: jsonArray});

        if (defaults.consoleLog === true)
          console.log(sdata);

        if (defaults.outputMode === 'string')
          return sdata;

        if (defaults.outputMode === 'base64')
          return base64encode(sdata);

        try {
          blob = new Blob([sdata], {type: "application/json;charset=utf-8"});
          saveAs(blob, defaults.fileName + '.json');
        }
        catch (e) {
          downloadFile(defaults.fileName + '.json',
                       'data:application/json;charset=utf-8;base64,',
                       sdata);
        }

      } else if (defaults.type === 'xml') {

        rowIndex = 0;
        var xml = '<?xml version="1.0" encoding="utf-8"?>';
        xml += '<tabledata><fields>';

        // Header
        $hrows = $(el).find('thead').first().find(defaults.theadSelector);
        $hrows.each(function () {

          ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                  function (cell, row, col) {
                    xml += "<field>" + parseString(cell, row, col) + "</field>";
                  });
          rowIndex++;
        });
        xml += '</fields><data>';

        // Row Vs Column
        var rowCount = 1;
        $(el).find('tbody').each(function() {
          $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
        });
        if (defaults.tfootSelector.length)
          $rows.push.apply ($rows, $(el).find('tfoot').find(defaults.tfootSelector));
        $($rows).each(function () {
          var colCount = 1;
          trData = "";
          ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                  function (cell, row, col) {
                    trData += "<column-" + colCount + ">" + parseString(cell, row, col) + "</column-" + colCount + ">";
                    colCount++;
                  });
          if (trData.length > 0 && trData != "<column-1></column-1>") {
            xml += '<row id="' + rowCount + '">' + trData + '</row>';
            rowCount++;
          }

          rowIndex++;
        });
        xml += '</data></tabledata>';

        //output
        if (defaults.consoleLog === true)
          console.log(xml);

        if (defaults.outputMode === 'string')
          return xml;

        if (defaults.outputMode === 'base64')
          return base64encode(xml);

        try {
          blob = new Blob([xml], {type: "application/xml;charset=utf-8"});
          saveAs(blob, defaults.fileName + '.xml');
        }
        catch (e) {
          downloadFile(defaults.fileName + '.xml',
                       'data:application/xml;charset=utf-8;base64,',
                       xml);
        }

      } else if (defaults.type == 'excel' || defaults.type == 'xls' || defaults.type == 'word' || defaults.type == 'doc') {

        var MSDocType = (defaults.type == 'excel' || defaults.type == 'xls') ? 'excel' : 'word';
        var MSDocExt = (MSDocType == 'excel') ? 'xls' : 'doc';
        var MSDocSchema = 'xmlns:x="urn:schemas-microsoft-com:office:' + MSDocType + '"';
        var $tables = $(el).filter(function() {
            return $(this).data("tableexport-display") != 'none' &&
                   ($(this).is(':visible') ||
                    $(this).data("tableexport-display") == 'always');
          });
        var docData = '';

        $tables.each(function(){
          var $table = $(this);
          rowIndex = 0;
          colNames = GetColumnNames (this);

          docData += '<table><thead>';
          // Header
          $hrows = $table.find('thead').first().find(defaults.theadSelector);
          $hrows.each(function() {
            trData = "";
            ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
              function(cell, row, col) {
                if (cell !== null) {
                  var thstyle = '';
                  trData += '<th';
                  for (var styles in defaults.excelstyles) {
                    if (defaults.excelstyles.hasOwnProperty(styles)) {
                      var thcss = $(cell).css(defaults.excelstyles[styles]);
                      if (thcss !== '' && thcss !='0px none rgb(0, 0, 0)' && thcss != 'rgba(0, 0, 0, 0)') {
                        thstyle += (thstyle === '') ? 'style="' : ';';
                        thstyle += defaults.excelstyles[styles] + ':' + thcss;
                      }
                    }
                  }
                  if (thstyle !== '' )
                    trData += ' ' + thstyle + '"';
                  if ($(cell).is("[colspan]"))
                    trData += ' colspan="' + $(cell).attr('colspan') + '"';
                  if ($(cell).is("[rowspan]"))
                    trData += ' rowspan="' + $(cell).attr('rowspan') + '"';
                  trData += '>' + parseString(cell, row, col) + '</th>';
                }
              });
            if (trData.length > 0)
              docData += '<tr>' + trData + '</tr>';
            rowIndex++;
          });

          docData += '</thead><tbody>';
          // Row Vs Column, support multiple tbodys
          $table.find('tbody').each(function() {
            $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
          });
          if (defaults.tfootSelector.length)
            $rows.push.apply ($rows, $table.find('tfoot').find(defaults.tfootSelector));

          $($rows).each(function() {
            var $row = $(this);
            trData = "";
            ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
              function(cell, row, col) {
                if (cell !== null) {
                  var tdstyle = '';
                  var tdcss = $(cell).data("tableexport-msonumberformat");

                  if (typeof tdcss == 'undefined' && typeof defaults.onMsoNumberFormat === 'function')
                    tdcss = defaults.onMsoNumberFormat(cell, row, col);
                  
                  else tdcss='\\@';

                  if (typeof tdcss != 'undefined' && tdcss !== '')
                    tdstyle = 'style="mso-number-format:\'' + tdcss + '\'';

                  for (var cssStyle in defaults.excelstyles) {
                    if (defaults.excelstyles.hasOwnProperty(cssStyle)) {
                      tdcss = $(cell).css(defaults.excelstyles[cssStyle]);
                      if (tdcss === '')
                        tdcss = $row.css(defaults.excelstyles[cssStyle]);

                      if (tdcss !== '' && tdcss !='0px none rgb(0, 0, 0)' && tdcss != 'rgba(0, 0, 0, 0)') {
                        tdstyle += (tdstyle === '') ? 'style="' : ';';
                        tdstyle += defaults.excelstyles[cssStyle] + ':' + tdcss;
                      }
                    }
                  }
                  trData += '<td';
                  if (tdstyle !== '' )
                    trData += ' ' + tdstyle + '"';
                  if ($(cell).is("[colspan]"))
                    trData += ' colspan="' + $(cell).attr('colspan') + '"';
                  if ($(cell).is("[rowspan]"))
                    trData += ' rowspan="' + $(cell).attr('rowspan') + '"';
                  trData += '>' + parseString(cell, row, col).replace(/\n/g,'<br>') + '</td>';
                }
              });
            if (trData.length > 0)
              docData += '<tr>' + trData + '</tr>';
            rowIndex++;
          });

          if (defaults.displayTableName)
            docData += '<tr><td></td></tr><tr><td></td></tr><tr><td>' + parseString($('<p>' + defaults.tableName + '</p>')) + '</td></tr>';

          docData += '</tbody></table>';

          if (defaults.consoleLog === true)
            console.log(docData);
        });

        var docFile = '<html xmlns:o="urn:schemas-microsoft-com:office:office" ' + MSDocSchema + ' xmlns="http://www.w3.org/TR/REC-html40">';
        docFile += '<meta http-equiv="content-type" content="application/vnd.ms-' + MSDocType + '; charset=UTF-8">';
        docFile += "<head>";
        if (MSDocType === 'excel') {
          docFile += "<!--[if gte mso 9]>";
          docFile += "<xml>";
          docFile += "<x:ExcelWorkbook>";
          docFile += "<x:ExcelWorksheets>";
          docFile += "<x:ExcelWorksheet>";
          docFile += "<x:Name>";
          docFile += defaults.worksheetName;
          docFile += "</x:Name>";
          docFile += "<x:WorksheetOptions>";
          docFile += "<x:DisplayGridlines/>";
          docFile += "</x:WorksheetOptions>";
          docFile += "</x:ExcelWorksheet>";
          docFile += "</x:ExcelWorksheets>";
          docFile += "</x:ExcelWorkbook>";
          docFile += "</xml>";
          docFile += "<![endif]-->";
        }
        docFile += "<style>br {mso-data-placement:same-cell;}</style>";
        docFile += "</head>";
        docFile += "<body>";
        docFile += docData;
        docFile += "</body>";
        docFile += "</html>";

        if (defaults.consoleLog === true)
          console.log(docFile);

        if (defaults.outputMode === 'string')
          return docFile;

        if (defaults.outputMode === 'base64')
          return base64encode(docFile);

        try {
          blob = new Blob([docFile], {type: 'application/vnd.ms-' + defaults.type});
          saveAs(blob, defaults.fileName + '.' + MSDocExt);
        }
        catch (e) {
          downloadFile(defaults.fileName + '.' + MSDocExt,
                       'data:application/vnd.ms-' + MSDocType + ';base64,',
                       docFile);
        }

      } else if (defaults.type == 'xlsx') {

        var data = [];
        var ranges = [];
        rowIndex = 0;

        $rows = $(el).find('thead').first().find(defaults.theadSelector);
        $(el).find('tbody').each(function() {
          $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
        });
        if (defaults.tfootSelector.length)
          $rows.push.apply ($rows, $(el).find('tfoot').find(defaults.tfootSelector));

        $($rows).each(function () {
          var cols = [];
          ForEachVisibleCell(this, 'th,td', rowIndex, $rows.length,
            function (cell, row, col) {
              if (typeof cell !== 'undefined' && cell !== null) {

                var colspan = parseInt(cell.getAttribute('colspan'));
                var rowspan = parseInt(cell.getAttribute('rowspan'));

                var cellValue = parseString(cell, row, col);

                if(cellValue !== "" && cellValue == +cellValue) cellValue = +cellValue;

                //Skip ranges
                ranges.forEach(function(range) {
                  if(rowIndex >= range.s.r && rowIndex <= range.e.r && cols.length >= range.s.c && cols.length <= range.e.c) {
                    for(var i = 0; i <= range.e.c - range.s.c; ++i) cols.push(null);
                  }
                });

                //Handle Row Span
                if (rowspan || colspan) {
                  rowspan = rowspan || 1;
                  colspan = colspan || 1;
                  ranges.push({s:{r:rowIndex, c:cols.length},e:{r:rowIndex+rowspan-1, c:cols.length+colspan-1}});
                }

                //Handle Value
                cols.push(cellValue !== "" ? cellValue : null);

                //Handle Colspan
                if (colspan) for (var k = 0; k < colspan - 1; ++k) cols.push(null);
              }
            });
          data.push(cols);
          rowIndex++;
        });

        var wb = new jx_Workbook(),
            ws = jx_createSheet(data);

        // add ranges to worksheet
        ws['!merges'] = ranges;

        // add worksheet to workbook
        wb.SheetNames.push(defaults.worksheetName);
        wb.Sheets[defaults.worksheetName] = ws;

        var wbout = XLSX.write(wb, {bookType: defaults.type, bookSST: false, type: 'binary'});

        try {
          blob = new Blob([jx_s2ab(wbout)], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=UTF-8'});
          saveAs(blob, defaults.fileName + '.' + defaults.type);
        }
        catch (e) {
          downloadFile(defaults.fileName + '.' + defaults.type,
                       'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=UTF-8',
                       data);
        }

      } else if (defaults.type == 'png') {
        //html2canvas($(el)[0], {
        //  onrendered: function (canvas) {
        html2canvas($(el)[0]).then(
          function (canvas) {

            var image = canvas.toDataURL();
            var byteString = atob(image.substring(22)); // remove data stuff
            var buffer = new ArrayBuffer(byteString.length);
            var intArray = new Uint8Array(buffer);

            for (var i = 0; i < byteString.length; i++)
              intArray[i] = byteString.charCodeAt(i);

            if (defaults.consoleLog === true)
              console.log(byteString);

            if (defaults.outputMode === 'string')
              return byteString;

            if (defaults.outputMode === 'base64')
              return base64encode(image);

            if (defaults.outputMode === 'window') {
              window.open(image);
              return;
            }

            try {
              blob = new Blob([buffer], {type: "image/png"});
              saveAs(blob, defaults.fileName + '.png');
            }
            catch (e) {
              downloadFile(defaults.fileName + '.png',
                           'data:image/png,',
                           image);
            }
          //}
        });

      } else if (defaults.type == 'pdf') {

        if (defaults.pdfmake.enabled === true) {
          // pdf output using pdfmake
          // https://github.com/bpampuch/pdfmake

          var widths = [];
          var body = [];
          rowIndex = 0;

          $hrows = $(this).find('thead').first().find(defaults.theadSelector);
          $hrows.each(function () {
            var h = [];

            ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                    function (cell, row, col) {
                      h.push(parseString(cell, row, col));
                    });

            if (h.length)
              body.push(h);

            for(var i = widths.length; i < h.length;i++)
              widths.push("*");

            rowIndex++;
          });

          $(this).find('tbody').each(function() {
            $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
          });
          if (defaults.tfootSelector.length)
            $rows.push.apply ($rows, $(this).find('tfoot').find(defaults.tfootSelector));

          $($rows).each(function () {
            var r = [];

            ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                    function (cell, row, col) {
                      r.push(parseString(cell, row, col));
                    });

            if (r.length)
              body.push(r);
            rowIndex++;
          });

          var docDefinition = {
              pageOrientation: 'landscape',
              content: [
                      {
                        table: {
                          headerRows: $hrows.length,
                          widths: widths,
                          body: body
                        }
                      }
                     ]
          };
          pdfMake.createPdf(docDefinition).getBuffer(function (buffer) {

            try {
              var blob = new Blob([buffer], {type: "application/pdf"});
              saveAs(blob, defaults.fileName + '.pdf');
            }
            catch (e) {
              downloadFile(defaults.fileName + '.pdf',
                           'data:application/pdf;base64,',
                           buffer);
            }
          });

        }
        else if (defaults.jspdf.autotable === false) {
          // pdf output using jsPDF's core html support

          var addHtmlOptions = {
            dim: {
              w: getPropertyUnitValue($(el).first().get(0), 'width', 'mm'),
              h: getPropertyUnitValue($(el).first().get(0), 'height', 'mm')
            },
            pagesplit: false
          };

          var doc = new jsPDF(defaults.jspdf.orientation, defaults.jspdf.unit, defaults.jspdf.format);
          doc.addHTML($(el).first(),
                  defaults.jspdf.margins.left,
                  defaults.jspdf.margins.top,
                  addHtmlOptions,
                  function () {
                    jsPdfOutput(doc);
                  });
          //delete doc;
        }
        else {
          // pdf output using jsPDF AutoTable plugin
          // https://github.com/simonbengtsson/jsPDF-AutoTable

          var teOptions = defaults.jspdf.autotable.tableExport;

          // When setting jspdf.format to 'bestfit' tableExport tries to choose
          // the minimum required paper format and orientation in which the table
          // (or tables in multitable mode) completely fits without column adjustment
          if (typeof defaults.jspdf.format === 'string' && defaults.jspdf.format.toLowerCase() === 'bestfit') {
            var pageFormats = {
              'a0': [2383.94, 3370.39], 'a1': [1683.78, 2383.94],
              'a2': [1190.55, 1683.78], 'a3': [841.89, 1190.55],
              'a4': [595.28, 841.89]
            };
            var rk = '', ro = '';
            var mw = 0;

            $(el).filter(':visible').each(function () {
              if ($(this).css('display') != 'none') {
                var w = getPropertyUnitValue($(this).get(0), 'width', 'pt');

                if (w > mw) {
                  if (w > pageFormats.a0[0]) {
                    rk = 'a0';
                    ro = 'l';
                  }
                  for (var key in pageFormats) {
                    if (pageFormats.hasOwnProperty(key)) {
                      if (pageFormats[key][1] > w) {
                        rk = key;
                        ro = 'l';
                        if (pageFormats[key][0] > w)
                          ro = 'p';
                      }
                    }
                  }
                  mw = w;
                }
              }
            });
            defaults.jspdf.format = (rk === '' ? 'a4' : rk);
            defaults.jspdf.orientation = (ro === '' ? 'w' : ro);
          }

          // The jsPDF doc object is stored in defaults.jspdf.autotable.tableExport,
          // thus it can be accessed from any callback function
          teOptions.doc = new jsPDF(defaults.jspdf.orientation,
                  defaults.jspdf.unit,
                  defaults.jspdf.format);

          if (teOptions.outputImages === true)
            teOptions.images = {};

          if (typeof teOptions.images != 'undefined') {
            $(el).filter(function() {
              return $(this).data("tableexport-display") != 'none' &&
                     ($(this).is(':visible') ||
                      $(this).data("tableexport-display") == 'always');
            }).each(function () {
              var rowCount = 0;

              $hrows = $(this).find('thead').find(defaults.theadSelector);
              $(this).find('tbody').each(function() {
                $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
              });
              if (defaults.tfootSelector.length)
                $rows.push.apply ($rows, $(this).find('tfoot').find(defaults.tfootSelector));

              $($rows).each(function () {
                ForEachVisibleCell(this, 'td,th', $hrows.length + rowCount, $hrows.length + $rows.length,
                  function (cell, row, col) {
                    if (typeof cell !== 'undefined' && cell !== null) {
                      var kids = $(cell).children();
                      if (typeof kids != 'undefined' && kids.length > 0)
                        collectImages (cell, kids, teOptions);
                    }
                  });
                rowCount++;
              });
            });

            $hrows = [];
            $rows = [];
          }

          loadImages ( teOptions, function (imageCount) {

            $(el).filter(function() {
              return $(this).data("tableexport-display") != 'none' &&
                     ($(this).is(':visible') ||
                      $(this).data("tableexport-display") == 'always');
            }).each(function () {
              var colKey;
              var rowIndex = 0;

              colNames = GetColumnNames (this);

              teOptions.columns = [];
              teOptions.rows = [];
              teOptions.rowoptions = {};

              // onTable: optional callback function for every matching table that can be used
              // to modify the tableExport options or to skip the output of a particular table
              // if the table selector targets multiple tables
              if (typeof teOptions.onTable === 'function')
                if (teOptions.onTable($(this), defaults) === false)
                  return true; // continue to next iteration step (table)

              // each table works with an own copy of AutoTable options
              defaults.jspdf.autotable.tableExport = null;  // avoid deep recursion error
              var atOptions = $.extend(true, {}, defaults.jspdf.autotable);
              defaults.jspdf.autotable.tableExport = teOptions;

              atOptions.margin = {};
              $.extend(true, atOptions.margin, defaults.jspdf.margins);
              atOptions.tableExport = teOptions;

              // Fix jsPDF Autotable's row height calculation
              if (typeof atOptions.beforePageContent !== 'function') {
                atOptions.beforePageContent = function (data) {
                  if (data.pageCount == 1) {
                    var all = data.table.rows.concat(data.table.headerRow);
                    all.forEach(function (row) {
                      if ( row.height > 0 ) {
                        row.height += (2 - FONT_ROW_RATIO) / 2 * row.styles.fontSize;
                        data.table.height += (2 - FONT_ROW_RATIO) / 2 * row.styles.fontSize;
                      }
                    });
                  }
                };
              }

              if (typeof atOptions.createdHeaderCell !== 'function') {
                // apply some original css styles to pdf header cells
                atOptions.createdHeaderCell = function (cell, data) {

                  // jsPDF AutoTable plugin v2.0.14 fix: each cell needs its own styles object
                  cell.styles = $.extend({}, data.row.styles);

                  if (typeof teOptions.columns [data.column.dataKey] != 'undefined') {
                    var col = teOptions.columns [data.column.dataKey];

                    if (typeof col.rect != 'undefined') {
                      var rh;

                      cell.contentWidth = col.rect.width;

                      if (typeof teOptions.heightRatio == 'undefined' || teOptions.heightRatio === 0) {
                        if (data.row.raw [data.column.dataKey].rowspan)
                          rh = data.row.raw [data.column.dataKey].rect.height / data.row.raw [data.column.dataKey].rowspan;
                        else
                          rh = data.row.raw [data.column.dataKey].rect.height;

                        teOptions.heightRatio = cell.styles.rowHeight / rh;
                      }

                      rh = data.row.raw [data.column.dataKey].rect.height * teOptions.heightRatio;
                      if (rh > cell.styles.rowHeight)
                        cell.styles.rowHeight = rh;
                    }

                    if (typeof col.style != 'undefined' && col.style.hidden !== true) {
                      cell.styles.halign = col.style.align;
                      if (atOptions.styles.fillColor === 'inherit')
                        cell.styles.fillColor = col.style.bcolor;
                      if (atOptions.styles.textColor === 'inherit')
                        cell.styles.textColor = col.style.color;
                      if (atOptions.styles.fontStyle === 'inherit')
                        cell.styles.fontStyle = col.style.fstyle;
                    }
                  }
                };
              }

              if (typeof atOptions.createdCell !== 'function') {
                // apply some original css styles to pdf table cells
                atOptions.createdCell = function (cell, data) {
                  var rowopt = teOptions.rowoptions [data.row.index + ":" + data.column.dataKey];

                  if (typeof rowopt != 'undefined' &&
                      typeof rowopt.style != 'undefined' &&
                      rowopt.style.hidden !== true) {
                    cell.styles.halign = rowopt.style.align;
                    if (atOptions.styles.fillColor === 'inherit')
                      cell.styles.fillColor = rowopt.style.bcolor;
                    if (atOptions.styles.textColor === 'inherit')
                      cell.styles.textColor = rowopt.style.color;
                    if (atOptions.styles.fontStyle === 'inherit')
                      cell.styles.fontStyle = rowopt.style.fstyle;
                  }
                };
              }

              if (typeof atOptions.drawHeaderCell !== 'function') {
                atOptions.drawHeaderCell = function (cell, data) {
                  var colopt = teOptions.columns [data.column.dataKey];

                  if ((colopt.style.hasOwnProperty("hidden") !== true || colopt.style.hidden !== true) &&
                      colopt.rowIndex >= 0 )
                    return prepareAutoTableText (cell, data, colopt);
                  else
                    return false; // cell is hidden
                };
              }

              if (typeof atOptions.drawCell !== 'function') {
                atOptions.drawCell = function (cell, data) {
                  var rowopt = teOptions.rowoptions [data.row.index + ":" + data.column.dataKey];
                  if ( prepareAutoTableText (cell, data, rowopt) ) {

                    teOptions.doc.rect(cell.x, cell.y, cell.width, cell.height, cell.styles.fillStyle);

                    if (typeof rowopt != 'undefined' && typeof rowopt.kids != 'undefined' && rowopt.kids.length > 0) {

                      var dh = cell.height / rowopt.rect.height;
                      if ( dh > teOptions.dh || typeof teOptions.dh == 'undefined' )
                        teOptions.dh = dh;
                      teOptions.dw = cell.width / rowopt.rect.width;

                      drawCellElements (cell, rowopt.kids, teOptions);
                    }
                    teOptions.doc.autoTableText(cell.text, cell.textPos.x, cell.textPos.y, {
                        halign: cell.styles.halign,
                        valign: cell.styles.valign
                    });
                  }
                  return false;
                };
              }

              // collect header and data rows
              teOptions.headerrows = [];
              $hrows = $(this).find('thead').find(defaults.theadSelector);
              $hrows.each(function () {
                colKey = 0;

                teOptions.headerrows[rowIndex] = [];

                ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                        function (cell, row, col) {
                          var obj = getCellStyles (cell);
                          obj.title = parseString(cell, row, col);
                          obj.key = colKey++;
                          obj.rowIndex = rowIndex;
                          teOptions.headerrows[rowIndex].push(obj);
                        });
                rowIndex++;
              });

              if (rowIndex > 0) {
                // iterate through last row
                $.each(teOptions.headerrows[rowIndex-1], function () {
                  var obj = this;
                  if (rowIndex > 1 && this.rect === null)
                    obj = teOptions.headerrows[rowIndex-2][this.key];
                  if (obj !== null)
                    teOptions.columns.push(obj);
                });
              }

              var rowCount = 0;
              $rows = [];
              $(this).find('tbody').each(function() {
                $rows.push.apply ($rows, $(this).find(defaults.tbodySelector));
              });
              if (defaults.tfootSelector.length)
                $rows.push.apply ($rows, $(this).find('tfoot').find(defaults.tfootSelector));
              $($rows).each(function () {
                var rowData = [];
                colKey = 0;

                ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                        function (cell, row, col) {
                          if (typeof teOptions.columns[colKey] === 'undefined') {
                            // jsPDF-Autotable needs columns. Thus define hidden ones for tables without thead
                            var obj = {
                              title: '',
                              key: colKey,
                              style: {
                                hidden: true
                              }
                            };
                            teOptions.columns.push(obj);
                          }
                          if (typeof cell !== 'undefined' && cell !== null) {
                            var obj = getCellStyles (cell);
                            obj.kids = $(cell).children();
                            teOptions.rowoptions [rowCount + ":" + colKey++] = obj;
                          }
                          else {
                            var obj = $.extend(true, {}, teOptions.rowoptions [rowCount + ":" + (colKey-1)]);
                            obj.colspan = -1;
                            teOptions.rowoptions [rowCount + ":" + colKey++] = obj;
                          }

                          rowData.push(parseString(cell, row, col));
                        });
                if (rowData.length) {
                  teOptions.rows.push(rowData);
                  rowCount++;
                }
                rowIndex++;
              });

              // onBeforeAutotable: optional callback function before calling
              // jsPDF AutoTable that can be used to modify the AutoTable options
              if (typeof teOptions.onBeforeAutotable === 'function')
                teOptions.onBeforeAutotable($(this), teOptions.columns, teOptions.rows, atOptions);

              teOptions.doc.autoTable(teOptions.columns, teOptions.rows, atOptions);

              // onAfterAutotable: optional callback function after returning
              // from jsPDF AutoTable that can be used to modify the AutoTable options
              if (typeof teOptions.onAfterAutotable === 'function')
                teOptions.onAfterAutotable($(this), atOptions);

              // set the start position for the next table (in case there is one)
              defaults.jspdf.autotable.startY = teOptions.doc.autoTableEndPosY() + atOptions.margin.top;

            });

            jsPdfOutput(teOptions.doc);

            if (typeof teOptions.headerrows != 'undefined')
              teOptions.headerrows.length = 0;
            if (typeof teOptions.columns != 'undefined')
              teOptions.columns.length = 0;
            if (typeof teOptions.rows != 'undefined')
              teOptions.rows.length = 0;
            delete teOptions.doc;
            teOptions.doc = null;
          });
        }
      }

      function FindColObject (objects, colIndex, rowIndex) {
        var result = null;
        $.each(objects, function () {
          if (this.rowIndex == rowIndex && this.key == colIndex) {
            result = this;
            return false;
          }
        });
        return result;
      }

      function GetColumnNames (table) {
        var result = [];
        $(table).find('thead').first().find('th').each(function(index, el) {
          if ($(el).attr("data-field") !== undefined)
            result[index] = $(el).attr("data-field");
          else
            result[index] = index.toString();
        });
        return result;
      }

      function isColumnIgnored($row, colIndex) {
        var result = false;
        if (defaults.ignoreColumn.length > 0) {
          if (typeof defaults.ignoreColumn[0] == 'string') {
            if (colNames.length > colIndex && typeof colNames[colIndex] != 'undefined')
              if ($.inArray(colNames[colIndex], defaults.ignoreColumn) != -1)
                result = true;
          }
          else if (typeof defaults.ignoreColumn[0] == 'number') {
            if ($.inArray(colIndex, defaults.ignoreColumn) != -1 ||
                $.inArray(colIndex-$row.length, defaults.ignoreColumn) != -1)
              result = true;
          }
        }
        return result;
      }

      function ForEachVisibleCell(tableRow, selector, rowIndex, rowCount, cellcallback) {
        if ($.inArray(rowIndex, defaults.ignoreRow) == -1 &&
            $.inArray(rowIndex-rowCount, defaults.ignoreRow) == -1) {

          var $row = $(tableRow).filter(function() {
            return $(this).data("tableexport-display") != 'none' &&
                   ($(this).is(':visible') ||
                    $(this).data("tableexport-display") == 'always' ||
                    $(this).closest('table').data("tableexport-display") == 'always');
          }).find(selector);

          var rowColspan = 0;
          var rowColIndex = 0;

          $row.each(function (colIndex) {
            if ($(this).data("tableexport-display") == 'always' ||
                ($(this).css('display') != 'none' &&
                 $(this).css('visibility') != 'hidden' &&
                 $(this).data("tableexport-display") != 'none')) {
              if (isColumnIgnored($row, colIndex) === false) {
                if (typeof (cellcallback) === "function") {
                  var c, Colspan = 0;
                  var r, Rowspan = 0;

                  // handle rowspans from previous rows
                  if (typeof rowspans[rowIndex] != 'undefined' && rowspans[rowIndex].length > 0) {
                    for (c = 0; c <= colIndex; c++) {
                      if (typeof rowspans[rowIndex][c] != 'undefined') {
                        cellcallback(null, rowIndex, c);
                        delete rowspans[rowIndex][c];
                        colIndex++;
                      }
                    }
                  }
                  rowColIndex = colIndex;

                  if ($(this).is("[colspan]")) {
                    Colspan = parseInt($(this).attr('colspan'));
                    rowColspan += Colspan > 0 ? Colspan - 1 : 0;
                  }

                  if ($(this).is("[rowspan]"))
                    Rowspan = parseInt($(this).attr('rowspan'));

                  // output content of current cell
                  cellcallback(this, rowIndex, colIndex);

                  // handle colspan of current cell
                  for (c = 0; c < Colspan - 1; c++)
                    cellcallback(null, rowIndex, colIndex + c);

                  // store rowspan for following rows
                  if (Rowspan) {
                    for (r = 1; r < Rowspan; r++) {
                      if (typeof rowspans[rowIndex + r] == 'undefined')
                        rowspans[rowIndex + r] = [];

                      rowspans[rowIndex + r][colIndex + rowColspan] = "";

                      for (c = 1; c < Colspan; c++)
                        rowspans[rowIndex + r][colIndex + rowColspan - c] = "";
                    }
                  }
                }
              }
            }
          });
          // handle rowspans from previous rows
          if (typeof rowspans[rowIndex] != 'undefined' && rowspans[rowIndex].length > 0) {
            for (var c = 0; c <= rowspans[rowIndex].length; c++) {
              if (typeof rowspans[rowIndex][c] != 'undefined') {
                cellcallback(null, rowIndex, c);
                delete rowspans[rowIndex][c];
              }
            }
          }
        }
      }

      function jsPdfOutput(doc) {
        if (defaults.consoleLog === true)
          console.log(doc.output());

        if (defaults.outputMode === 'string')
          return doc.output();

        if (defaults.outputMode === 'base64')
          return base64encode(doc.output());

        if (defaults.outputMode === 'window') {
          window.open(URL.createObjectURL(doc.output("blob")));
          return;
        }

        try {
          var blob = doc.output('blob');
          saveAs(blob, defaults.fileName + '.pdf');
        }
        catch (e) {
          downloadFile(defaults.fileName + '.pdf',
                       'data:application/pdf;base64,',
                       doc.output());
        }
      }

      function prepareAutoTableText (cell, data, cellopt) {
        var cs = 0;
        if ( typeof cellopt != 'undefined' )
          cs = cellopt.colspan;

        if ( cs >= 0 ) {
          // colspan handling
          var cellWidth = cell.width;
          var textPosX = cell.textPos.x;
          var i = data.table.columns.indexOf(data.column);

          for (var c = 1; c < cs; c++) {
            var column = data.table.columns[i+c];
            cellWidth += column.width;
          }

          if ( cs > 1 ) {
            if ( cell.styles.halign === 'right' )
              textPosX = cell.textPos.x + cellWidth - cell.width;
            else if ( cell.styles.halign === 'center' )
              textPosX = cell.textPos.x + (cellWidth - cell.width) / 2;
          }

          cell.width = cellWidth;
          cell.textPos.x = textPosX;

          if ( typeof cellopt != 'undefined' && cellopt.rowspan > 1 )
            cell.height = cell.height * cellopt.rowspan;

          // fix jsPDF's calculation of text position
          if ( cell.styles.valign === 'middle' || cell.styles.valign === 'bottom' ) {
            var splittedText = typeof cell.text === 'string' ? cell.text.split(/\r\n|\r|\n/g) : cell.text;
            var lineCount = splittedText.length || 1;
            if (lineCount > 2)
              cell.textPos.y -= ((2 - FONT_ROW_RATIO) / 2 * data.row.styles.fontSize) * (lineCount-2) / 3 ;
          }
          return true;
        }
        else
          return false; // cell is hidden (colspan = -1), don't draw it
      }

      function collectImages (cell, elements, teOptions) {
        if (typeof teOptions.images != 'undefined') {
          elements.each(function () {
            var kids = $(this).children();

            if ( $(this).is("img") ) {
              var hash = strHashCode(this.src);

              teOptions.images[hash] = { url: this.src,
                                         src: this.src };
            }

            if (typeof kids != 'undefined' && kids.length > 0)
              collectImages (cell, kids, teOptions);
          });
        }
      }

      function loadImages (teOptions, callback) {
        var i;
        var imageCount = 0;
        var x = 0;

        function done() {
          callback(imageCount);
        }
        function loadImage(image) {
          if (!image.url)
            return;
          var img = new Image();
          imageCount = ++x;
          img.crossOrigin = 'Anonymous';
          img.onerror = img.onload = function () {
            if(img.complete) {

              if (img.src.indexOf('data:image/') === 0) {
                img.width = image.width || img.width || 0;
                img.height = image.height || img.height || 0;
              }

              if (img.width + img.height) {
                var canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");

                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage( img, 0, 0 );

                image.src = canvas.toDataURL("image/jpeg");
              }
            }
            if(!--x)
              done();
          };
          img.src = image.url;
        }

        if (typeof teOptions.images != 'undefined') {
          for (i in teOptions.images)
            if (teOptions.images.hasOwnProperty(i))
              loadImage(teOptions.images[i]);
        }

        return x || done();
      }

      function drawCellElements (cell, elements, teOptions) {
        elements.each(function () {
          var kids = $(this).children();

          if ( $(this).is("div") ) {
            var bcolor = rgb2array(getStyle(this, 'background-color'), [255, 255, 255]);
            var lcolor = rgb2array(getStyle(this, 'border-top-color'), [0, 0, 0]);
            var lwidth = getPropertyUnitValue(this, 'border-top-width', defaults.jspdf.unit);

            var r = this.getBoundingClientRect();
            var ux = this.offsetLeft * teOptions.dw;
            var uy = this.offsetTop * teOptions.dh;
            var uw = r.width * teOptions.dw;
            var uh = r.height * teOptions.dh;

            teOptions.doc.setDrawColor.apply (undefined, lcolor);
            teOptions.doc.setFillColor.apply (undefined, bcolor);
            teOptions.doc.setLineWidth (lwidth);
            teOptions.doc.rect(cell.x + ux, cell.y + uy, uw, uh, lwidth ? "FD" : "F");
          }
          else if ( $(this).is("img") ) {
            if (typeof teOptions.images != 'undefined') {
              var hash = strHashCode(this.src);
              var image = teOptions.images[hash];

              if (typeof image != 'undefined') {

                var arCell = cell.width / cell.height;
                var arImg  = this.width / this.height;
                var imgWidth = cell.width;
                var imgHeight = cell.height;
                var uy = 0;

                if (arImg < arCell) {
                  imgHeight = Math.min (cell.height, this.height);
                  imgWidth  = this.width * imgHeight / this.height;
                }
                else if (arImg > arCell) {
                  imgWidth  = Math.min (cell.width, this.width);
                  imgHeight = this.height * imgWidth / this.width;
                }

                if (imgHeight < cell.height)
                  uy = (cell.height - imgHeight) / 2;

                teOptions.doc.addImage (image.src, cell.textPos.x, cell.y + uy, imgWidth, imgHeight);
                cell.textPos.x += imgWidth;
              }
            }
          }

          if (typeof kids != 'undefined' && kids.length > 0)
            drawCellElements (cell, kids, teOptions);
        });
      }

      function escapeRegExp(string) {
        return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
      }

      function replaceAll(string, find, replace) {
        return string.replace(new RegExp(escapeRegExp(find), 'g'), replace);
      }

      function parseNumber(value) {
        value = value || "0";
        value = replaceAll(value, defaults.numbers.html.thousandsSeparator, '');
        value = replaceAll(value, defaults.numbers.html.decimalMark, '.');

        return typeof value === "number" || jQuery.isNumeric(value) !== false ? value : false;
      }

      function parseString(cell, rowIndex, colIndex) {
        var result = '';

        if (cell !== null) {
          var $cell = $(cell);
          var htmlData;

          if ($cell[0].hasAttribute("data-tableexport-value"))
            htmlData = $cell.data("tableexport-value");
          else {
            htmlData = $cell.html();

            if (htmlData != '') {
              var html = $.parseHTML( htmlData );

              htmlData = '';
              $.each( html, function() {
                if ( $(this).is("input") )
                  htmlData += $cell.find('input').val();
                else if ( $(this).is("select") )
                  htmlData += $cell.find('select option:selected').text();
                else {
                  htmlData += $cell.html();
                  return false;
                }
              });
            }
          }

          if (typeof defaults.onCellHtmlData === 'function')
            htmlData = defaults.onCellHtmlData($cell, rowIndex, colIndex, htmlData);

          if (defaults.htmlContent === true) {
            result = $.trim(htmlData);
          }
          else {
            var text = htmlData.replace(/\n/g,'\u2028').replace(/<br\s*[\/]?>/gi, '\u2060');
            var obj = $('<div/>').html(text).contents();
            text = '';
            $.each(obj.text().split("\u2028"), function(i, v) {
              if (i > 0)
                text += " ";
              text += $.trim(v);
            });

            $.each(text.split("\u2060"), function(i, v) {
              if (i > 0)
                result += "\n";
              result += $.trim(v).replace(/\u00AD/g, ""); // remove soft hyphens
            });

            if (defaults.type == 'json' || defaults.numbers.output === false) {
              var number = parseNumber (result);

              if (number !== false)
                result = Number (number);
            }
            else if (defaults.numbers.html.decimalMark != defaults.numbers.output.decimalMark ||
                     defaults.numbers.html.thousandsSeparator != defaults.numbers.output.thousandsSeparator) {
              var number = parseNumber (result);

              if ( number !== false ) {
                var frac = ("" + number).split('.');
                if ( frac.length == 1 )
                  frac[1] = "";
                var mod = frac[0].length > 3 ? frac[0].length % 3 : 0;

                result = (number < 0 ? "-" : "") +
                         (defaults.numbers.output.thousandsSeparator ? ((mod ? frac[0].substr(0, mod) + defaults.numbers.output.thousandsSeparator : "") + frac[0].substr(mod).replace(/(\d{3})(?=\d)/g, "$1" + defaults.numbers.output.thousandsSeparator)) : frac[0]) +
                         (frac[1].length ? defaults.numbers.output.decimalMark + frac[1] : "");
              }
            }
          }

          if (defaults.escape === true) {
            result = escape(result);
          }

          if (typeof defaults.onCellData === 'function') {
            result = defaults.onCellData($cell, rowIndex, colIndex, result);
          }
        }

        return result;
      }

      function hyphenate(a, b, c) {
        return b + "-" + c.toLowerCase();
      }

      function rgb2array(rgb_string, default_result) {
        var re = /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/;
        var bits = re.exec(rgb_string);
        var result = default_result;
        if (bits)
          result = [ parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3]) ];
        return result;
      }

      function getCellStyles (cell) {
        var a = getStyle(cell, 'text-align');
        var fw = getStyle(cell, 'font-weight');
        var fs = getStyle(cell, 'font-style');
        var f = '';
        if (a == 'start')
          a = getStyle(cell, 'direction') == 'rtl' ? 'right' : 'left';
        if (fw >= 700)
          f = 'bold';
        if (fs == 'italic')
          f += fs;
        if (f === '')
          f = 'normal';

        var result = {
          style: {
            align: a,
            bcolor: rgb2array(getStyle(cell, 'background-color'), [255, 255, 255]),
            color: rgb2array(getStyle(cell, 'color'), [0, 0, 0]),
            fstyle: f
          },
          colspan: (parseInt($(cell).attr('colspan')) || 0),
          rowspan: (parseInt($(cell).attr('rowspan')) || 0)
        };

        if (cell !== null) {
          var r = cell.getBoundingClientRect();
          result.rect = {
            width: r.width,
            height: r.height
          };
        }

        return result;
      }

      // get computed style property
      function getStyle(target, prop) {
        try {
          if (window.getComputedStyle) { // gecko and webkit
            prop = prop.replace(/([a-z])([A-Z])/, hyphenate);  // requires hyphenated, not camel
            return window.getComputedStyle(target, null).getPropertyValue(prop);
          }
          if (target.currentStyle) { // ie
            return target.currentStyle[prop];
          }
          return target.style[prop];
        }
        catch (e) {
        }
        return "";
      }

      function getUnitValue(parent, value, unit) {
        var baseline = 100;  // any number serves

        var temp = document.createElement("div");  // create temporary element
        temp.style.overflow = "hidden";  // in case baseline is set too low
        temp.style.visibility = "hidden";  // no need to show it

        parent.appendChild(temp); // insert it into the parent for em, ex and %

        temp.style.width = baseline + unit;
        var factor = baseline / temp.offsetWidth;

        parent.removeChild(temp);  // clean up

        return (value * factor);
      }

      function getPropertyUnitValue(target, prop, unit) {
        var value = getStyle(target, prop);  // get the computed style value

        var numeric = value.match(/\d+/);  // get the numeric component
        if (numeric !== null) {
          numeric = numeric[0];  // get the string

          return getUnitValue (target.parentElement, numeric, unit);
        }
        return 0;
      }

      function jx_Workbook() {
        if(!(this instanceof jx_Workbook)) return new jx_Workbook();
        this.SheetNames = [];
        this.Sheets = {};
      }

      function jx_s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
      }

      function jx_datenum(v, date1904) {
        if(date1904) v+=1462;
        var epoch = Date.parse(v);
        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
      }

      function jx_createSheet(data) {
        var ws = {};
        var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
        for(var R = 0; R != data.length; ++R) {
          for(var C = 0; C != data[R].length; ++C) {
            if(range.s.r > R) range.s.r = R;
            if(range.s.c > C) range.s.c = C;
            if(range.e.r < R) range.e.r = R;
            if(range.e.c < C) range.e.c = C;
            var cell = {v: data[R][C] };
            if(cell.v === null) continue;
            var cell_ref = XLSX.utils.encode_cell({c:C,r:R});

            if(typeof cell.v === 'number') cell.t = 'n';
            else if(typeof cell.v === 'boolean') cell.t = 'b';
            else if(cell.v instanceof Date) {
              cell.t = 'n'; cell.z = XLSX.SSF._table[14];
              cell.v = jx_datenum(cell.v);
            }
            else cell.t = 's';
            ws[cell_ref] = cell;
          }
        }

        if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
        return ws;
      }

      function strHashCode (str) {
        var hash = 0, i, chr, len;
        if (str.length === 0) return hash;
        for (i = 0, len = str.length; i < len; i++) {
          chr   = str.charCodeAt(i);
          hash  = ((hash << 5) - hash) + chr;
          hash |= 0; // Convert to 32bit integer
        }
        return hash;
      }

      function downloadFile(filename, header, data) {

        var ua = window.navigator.userAgent;
        if (filename !== false && (ua.indexOf("MSIE ") > 0 || !!ua.match(/Trident.*rv\:11\./))) {
          if (window.navigator.msSaveOrOpenBlob)
            window.navigator.msSaveOrOpenBlob(new Blob([data]), filename);
          else {
            // Internet Explorer (<= 9) workaround by Darryl (https://github.com/dawiong/tableExport.jquery.plugin)
            // based on sampopes answer on http://stackoverflow.com/questions/22317951
            // ! Not working for json and pdf format !
            var frame = document.createElement("iframe");

            if (frame) {
              document.body.appendChild(frame);
              frame.setAttribute("style", "display:none");
              frame.contentDocument.open("txt/html", "replace");
              frame.contentDocument.write(data);
              frame.contentDocument.close();
              frame.focus();

              frame.contentDocument.execCommand("SaveAs", true, filename);
              document.body.removeChild(frame);
            }
          }
        }
        else {
          var DownloadLink = document.createElement('a');

          if (DownloadLink) {
            DownloadLink.style.display = 'none';
            if (filename !== false)
              DownloadLink.download = filename;
            else
              DownloadLink.target = '_blank';

            if (header.toLowerCase().indexOf("base64,") >= 0)
              DownloadLink.href = header + base64encode(data);
            else
              DownloadLink.href = header + encodeURIComponent(data);

            document.body.appendChild(DownloadLink);

            if (document.createEvent) {
              if (DownloadEvt === null)
                DownloadEvt = document.createEvent('MouseEvents');

              DownloadEvt.initEvent('click', true, false);
              DownloadLink.dispatchEvent(DownloadEvt);
            }
            else if (document.createEventObject)
              DownloadLink.fireEvent('onclick');
            else if (typeof DownloadLink.onclick == 'function')
              DownloadLink.onclick();

            document.body.removeChild(DownloadLink);
          }
        }
      }

      function utf8Encode(string) {
        string = string.replace(/\x0d\x0a/g, "\x0a");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
          var c = string.charCodeAt(n);
          if (c < 128) {
            utftext += String.fromCharCode(c);
          }
          else if ((c > 127) && (c < 2048)) {
            utftext += String.fromCharCode((c >> 6) | 192);
            utftext += String.fromCharCode((c & 63) | 128);
          }
          else {
            utftext += String.fromCharCode((c >> 12) | 224);
            utftext += String.fromCharCode(((c >> 6) & 63) | 128);
            utftext += String.fromCharCode((c & 63) | 128);
          }
        }
        return utftext;
      }

      function base64encode(input) {
        var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        input = utf8Encode(input);
        while (i < input.length) {
          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);
          enc1 = chr1 >> 2;
          enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
          enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
          enc4 = chr3 & 63;
          if (isNaN(chr2)) {
            enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
            enc4 = 64;
          }
          output = output +
                  keyStr.charAt(enc1) + keyStr.charAt(enc2) +
                  keyStr.charAt(enc3) + keyStr.charAt(enc4);
        }
        return output;
      }

      return this;
    }
  });
})(jQuery);
/*bootstrap-editable.js*/
/*! X-editable - v1.5.1 
* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery
* http://github.com/vitalets/x-editable
* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */
/**
Form with single input element, two buttons and two states: normal/loading.
Applied as jQuery method to DIV tag (not to form tag!). This is because form can be in loading state when spinner shown.
Editableform is linked with one of input types, e.g. 'text', 'select' etc.

@class editableform
@uses text
@uses textarea
**/
(function ($) {
    "use strict";
    
    var EditableForm = function (div, options) {
        this.options = $.extend({}, $.fn.editableform.defaults, options);
        this.$div = $(div); //div, containing form. Not form tag. Not editable-element.
        if(!this.options.scope) {
            this.options.scope = this;
        }
        //nothing shown after init
    };

    EditableForm.prototype = {
        constructor: EditableForm,
        initInput: function() {  //called once
            //take input from options (as it is created in editable-element)
            this.input = this.options.input;
            
            //set initial value
            //todo: may be add check: typeof str === 'string' ? 
            this.value = this.input.str2value(this.options.value); 
            
            //prerender: get input.$input
            this.input.prerender();
        },
        initTemplate: function() {
            this.$form = $($.fn.editableform.template); 
        },
        initButtons: function() {
            var $btn = this.$form.find('.editable-buttons');
            $btn.append($.fn.editableform.buttons);
            if(this.options.showbuttons === 'bottom') {
                $btn.addClass('editable-buttons-bottom');
            }
        },
        /**
        Renders editableform

        @method render
        **/        
        render: function() {
            //init loader
            this.$loading = $($.fn.editableform.loading);        
            this.$div.empty().append(this.$loading);
            
            //init form template and buttons
            this.initTemplate();
            if(this.options.showbuttons) {
                this.initButtons();
            } else {
                this.$form.find('.editable-buttons').remove();
            }

            //show loading state
            this.showLoading();            
            
            //flag showing is form now saving value to server. 
            //It is needed to wait when closing form.
            this.isSaving = false;
            
            /**        
            Fired when rendering starts
            @event rendering 
            @param {Object} event event object
            **/            
            this.$div.triggerHandler('rendering');
            
            //init input
            this.initInput();
            
            //append input to form
            this.$form.find('div.editable-input').append(this.input.$tpl);            
            
            //append form to container
            this.$div.append(this.$form);
            
            //render input
            $.when(this.input.render())
            .then($.proxy(function () {
                //setup input to submit automatically when no buttons shown
                if(!this.options.showbuttons) {
                    this.input.autosubmit(); 
                }
                 
                //attach 'cancel' handler
                this.$form.find('.editable-cancel').click($.proxy(this.cancel, this));
                
                if(this.input.error) {
                    this.error(this.input.error);
                    this.$form.find('.editable-submit').attr('disabled', true);
                    this.input.$input.attr('disabled', true);
                    //prevent form from submitting
                    this.$form.submit(function(e){ e.preventDefault(); });
                } else {
                    this.error(false);
                    this.input.$input.removeAttr('disabled');
                    this.$form.find('.editable-submit').removeAttr('disabled');
                    var value = (this.value === null || this.value === undefined || this.value === '') ? this.options.defaultValue : this.value;
                    this.input.value2input(value);
                    //attach submit handler
                    this.$form.submit($.proxy(this.submit, this));
                }

                /**        
                Fired when form is rendered
                @event rendered
                @param {Object} event event object
                **/            
                this.$div.triggerHandler('rendered');                

                this.showForm();
                
                //call postrender method to perform actions required visibility of form
                if(this.input.postrender) {
                    this.input.postrender();
                }                
            }, this));
        },
        cancel: function() {   
            /**        
            Fired when form was cancelled by user
            @event cancel 
            @param {Object} event event object
            **/              
            this.$div.triggerHandler('cancel');
        },
        showLoading: function() {
            var w, h;
            if(this.$form) {
                //set loading size equal to form
                w = this.$form.outerWidth();
                h = this.$form.outerHeight(); 
                if(w) {
                    this.$loading.width(w);
                }
                if(h) {
                    this.$loading.height(h);
                }
                this.$form.hide();
            } else {
                //stretch loading to fill container width
                w = this.$loading.parent().width();
                if(w) {
                    this.$loading.width(w);
                }
            }
            this.$loading.show(); 
        },

        showForm: function(activate) {
            this.$loading.hide();
            this.$form.show();
            if(activate !== false) {
                this.input.activate(); 
            }
            /**        
            Fired when form is shown
            @event show 
            @param {Object} event event object
            **/                    
            this.$div.triggerHandler('show');
        },

        error: function(msg) {
            var $group = this.$form.find('.control-group'),
                $block = this.$form.find('.editable-error-block'),
                lines;

            if(msg === false) {
                $group.removeClass($.fn.editableform.errorGroupClass);
                $block.removeClass($.fn.editableform.errorBlockClass).empty().hide(); 
            } else {
                //convert newline to <br> for more pretty error display
                if(msg) {
                    lines = (''+msg).split('\n');
                    for (var i = 0; i < lines.length; i++) {
                        lines[i] = $('<div>').text(lines[i]).html();
                    }
                    msg = lines.join('<br>');
                }
                $group.addClass($.fn.editableform.errorGroupClass);
                $block.addClass($.fn.editableform.errorBlockClass).html(msg).show();
            }
        },

        submit: function(e) {
            e.stopPropagation();
            e.preventDefault();
            
            //get new value from input
            var newValue = this.input.input2value(); 

            //validation: if validate returns string or truthy value - means error
            //if returns object like {newValue: '...'} => submitted value is reassigned to it
            var error = this.validate(newValue);
            if ($.type(error) === 'object' && error.newValue !== undefined) {
                newValue = error.newValue;
                this.input.value2input(newValue);
                if(typeof error.msg === 'string') {
                    this.error(error.msg);
                    this.showForm();
                    return;
                }
            } else if (error) {
                this.error(error);
                this.showForm();
                return;
            } 
            
            //if value not changed --> trigger 'nochange' event and return
            /*jslint eqeq: true*/
            if (!this.options.savenochange && this.input.value2str(newValue) == this.input.value2str(this.value)) {
            /*jslint eqeq: false*/                
                /**        
                Fired when value not changed but form is submitted. Requires savenochange = false.
                @event nochange 
                @param {Object} event event object
                **/                    
                this.$div.triggerHandler('nochange');            
                return;
            } 

            //convert value for submitting to server
            var submitValue = this.input.value2submit(newValue);
            
            this.isSaving = true;
            
            //sending data to server
            $.when(this.save(submitValue))
            .done($.proxy(function(response) {
                this.isSaving = false;

                //run success callback
                var res = typeof this.options.success === 'function' ? this.options.success.call(this.options.scope, response, newValue) : null;

                //if success callback returns false --> keep form open and do not activate input
                if(res === false) {
                    this.error(false);
                    this.showForm(false);
                    return;
                }

                //if success callback returns string -->  keep form open, show error and activate input               
                if(typeof res === 'string') {
                    this.error(res);
                    this.showForm();
                    return;
                }

                //if success callback returns object like {newValue: <something>} --> use that value instead of submitted
                //it is usefull if you want to chnage value in url-function
                if(res && typeof res === 'object' && res.hasOwnProperty('newValue')) {
                    newValue = res.newValue;
                }

                //clear error message
                this.error(false);   
                this.value = newValue;
                /**        
                Fired when form is submitted
                @event save 
                @param {Object} event event object
                @param {Object} params additional params
                @param {mixed} params.newValue raw new value
                @param {mixed} params.submitValue submitted value as string
                @param {Object} params.response ajax response

                @example
                $('#form-div').on('save'), function(e, params){
                    if(params.newValue === 'username') {...}
                });
                **/
                this.$div.triggerHandler('save', {newValue: newValue, submitValue: submitValue, response: response});
            }, this))
            .fail($.proxy(function(xhr) {
                this.isSaving = false;

                var msg;
                if(typeof this.options.error === 'function') {
                    msg = this.options.error.call(this.options.scope, xhr, newValue);
                } else {
                    msg = typeof xhr === 'string' ? xhr : xhr.responseText || xhr.statusText || 'Unknown error!';
                }

                this.error(msg);
                this.showForm();
            }, this));
        },

        save: function(submitValue) {
            //try parse composite pk defined as json string in data-pk 
            this.options.pk = $.fn.editableutils.tryParseJson(this.options.pk, true); 
            
            var pk = (typeof this.options.pk === 'function') ? this.options.pk.call(this.options.scope) : this.options.pk,
            /*
              send on server in following cases:
              1. url is function
              2. url is string AND (pk defined OR send option = always) 
            */
            send = !!(typeof this.options.url === 'function' || (this.options.url && ((this.options.send === 'always') || (this.options.send === 'auto' && pk !== null && pk !== undefined)))),
            params;

            if (send) { //send to server
                this.showLoading();

                //standard params
                params = {
                    name: this.options.name || '',
                    value: submitValue,
                    pk: pk 
                };

                //additional params
                if(typeof this.options.params === 'function') {
                    params = this.options.params.call(this.options.scope, params);  
                } else {
                    //try parse json in single quotes (from data-params attribute)
                    this.options.params = $.fn.editableutils.tryParseJson(this.options.params, true);   
                    $.extend(params, this.options.params);
                }

                if(typeof this.options.url === 'function') { //user's function
                    return this.options.url.call(this.options.scope, params);
                } else {  
                    //send ajax to server and return deferred object
                    return $.ajax($.extend({
                        url     : this.options.url,
                        data    : params,
                        type    : 'POST'
                    }, this.options.ajaxOptions));
                }
            }
        }, 

        validate: function (value) {
            if (value === undefined) {
                value = this.value;
            }
            if (typeof this.options.validate === 'function') {
                return this.options.validate.call(this.options.scope, value);
            }
        },

        option: function(key, value) {
            if(key in this.options) {
                this.options[key] = value;
            }
            
            if(key === 'value') {
                this.setValue(value);
            }
            
            //do not pass option to input as it is passed in editable-element
        },

        setValue: function(value, convertStr) {
            if(convertStr) {
                this.value = this.input.str2value(value);
            } else {
                this.value = value;
            }
            
            //if form is visible, update input
            if(this.$form && this.$form.is(':visible')) {
                this.input.value2input(this.value);
            }            
        }               
    };

    /*
    Initialize editableform. Applied to jQuery object.

    @method $().editableform(options)
    @params {Object} options
    @example
    var $form = $('&lt;div&gt;').editableform({
        type: 'text',
        name: 'username',
        url: '/post',
        value: 'vitaliy'
    });

    //to display form you should call 'render' method
    $form.editableform('render');     
    */
    $.fn.editableform = function (option) {
        var args = arguments;
        return this.each(function () {
            var $this = $(this), 
            data = $this.data('editableform'), 
            options = typeof option === 'object' && option; 
            if (!data) {
                $this.data('editableform', (data = new EditableForm(this, options)));
            }

            if (typeof option === 'string') { //call method 
                data[option].apply(data, Array.prototype.slice.call(args, 1));
            } 
        });
    };

    //keep link to constructor to allow inheritance
    $.fn.editableform.Constructor = EditableForm;    

    //defaults
    $.fn.editableform.defaults = {
        /* see also defaults for input */

        /**
        Type of input. Can be <code>text|textarea|select|date|checklist</code>

        @property type 
        @type string
        @default 'text'
        **/
        type: 'text',
        /**
        Url for submit, e.g. <code>'/post'</code>  
        If function - it will be called instead of ajax. Function should return deferred object to run fail/done callbacks.

        @property url 
        @type string|function
        @default null
        @example
        url: function(params) {
            var d = new $.Deferred;
            if(params.value === 'abc') {
                return d.reject('error message'); //returning error via deferred object
            } else {
                //async saving data in js model
                someModel.asyncSaveMethod({
                   ..., 
                   success: function(){
                      d.resolve();
                   }
                }); 
                return d.promise();
            }
        } 
        **/        
        url:null,
        /**
        Additional params for submit. If defined as <code>object</code> - it is **appended** to original ajax data (pk, name and value).  
        If defined as <code>function</code> - returned object **overwrites** original ajax data.
        @example
        params: function(params) {
            //originally params contain pk, name and value
            params.a = 1;
            return params;
        }

        @property params 
        @type object|function
        @default null
        **/          
        params:null,
        /**
        Name of field. Will be submitted on server. Can be taken from <code>id</code> attribute

        @property name 
        @type string
        @default null
        **/         
        name: null,
        /**
        Primary key of editable object (e.g. record id in database). For composite keys use object, e.g. <code>{id: 1, lang: 'en'}</code>.
        Can be calculated dynamically via function.

        @property pk 
        @type string|object|function
        @default null
        **/         
        pk: null,
        /**
        Initial value. If not defined - will be taken from element's content.
        For __select__ type should be defined (as it is ID of shown text).

        @property value 
        @type string|object
        @default null
        **/        
        value: null,
        /**
        Value that will be displayed in input if original field value is empty (`null|undefined|''`).

        @property defaultValue 
        @type string|object
        @default null
        @since 1.4.6
        **/        
        defaultValue: null,
        /**
        Strategy for sending data on server. Can be `auto|always|never`.
        When 'auto' data will be sent on server **only if pk and url defined**, otherwise new value will be stored locally.

        @property send 
        @type string
        @default 'auto'
        **/          
        send: 'auto', 
        /**
        Function for client-side validation. If returns string - means validation not passed and string showed as error.
        Since 1.5.1 you can modify submitted value by returning object from `validate`: 
        `{newValue: '...'}` or `{newValue: '...', msg: '...'}`

        @property validate 
        @type function
        @default null
        @example
        validate: function(value) {
            if($.trim(value) == '') {
                return 'This field is required';
            }
        }
        **/         
        validate: null,
        /**
        Success callback. Called when value successfully sent on server and **response status = 200**.  
        Usefull to work with json response. For example, if your backend response can be <code>{success: true}</code>
        or <code>{success: false, msg: "server error"}</code> you can check it inside this callback.  
        If it returns **string** - means error occured and string is shown as error message.  
        If it returns **object like** <code>{newValue: &lt;something&gt;}</code> - it overwrites value, submitted by user.  
        Otherwise newValue simply rendered into element.
        
        @property success 
        @type function
        @default null
        @example
        success: function(response, newValue) {
            if(!response.success) return response.msg;
        }
        **/          
        success: null,
        /**
        Error callback. Called when request failed (response status != 200).  
        Usefull when you want to parse error response and display a custom message.
        Must return **string** - the message to be displayed in the error block.
                
        @property error 
        @type function
        @default null
        @since 1.4.4
        @example
        error: function(response, newValue) {
            if(response.status === 500) {
                return 'Service unavailable. Please try later.';
            } else {
                return response.responseText;
            }
        }
        **/          
        error: null,
        /**
        Additional options for submit ajax request.
        List of values: http://api.jquery.com/jQuery.ajax
        
        @property ajaxOptions 
        @type object
        @default null
        @since 1.1.1        
        @example 
        ajaxOptions: {
            type: 'put',
            dataType: 'json'
        }        
        **/        
        ajaxOptions: null,
        /**
        Where to show buttons: left(true)|bottom|false  
        Form without buttons is auto-submitted.

        @property showbuttons 
        @type boolean|string
        @default true
        @since 1.1.1
        **/         
        showbuttons: true,
        /**
        Scope for callback methods (success, validate).  
        If <code>null</code> means editableform instance itself. 

        @property scope 
        @type DOMElement|object
        @default null
        @since 1.2.0
        @private
        **/            
        scope: null,
        /**
        Whether to save or cancel value when it was not changed but form was submitted

        @property savenochange 
        @type boolean
        @default false
        @since 1.2.0
        **/
        savenochange: false
    };   

    /*
    Note: following params could redefined in engine: bootstrap or jqueryui:
    Classes 'control-group' and 'editable-error-block' must always present!
    */      
    $.fn.editableform.template = '<form class="form-inline editableform">'+
    '<div class="control-group">' + 
    '<div><div class="editable-input"></div><div class="editable-buttons"></div></div>'+
    '<div class="editable-error-block"></div>' + 
    '</div>' + 
    '</form>';

    //loading div
    $.fn.editableform.loading = '<div class="editableform-loading"></div>';

    //buttons
    $.fn.editableform.buttons = '<button type="submit" class="editable-submit">ok</button>'+
    '<button type="button" class="editable-cancel">cancel</button>';      

    //error class attached to control-group
    $.fn.editableform.errorGroupClass = null;  

    //error class attached to editable-error-block
    $.fn.editableform.errorBlockClass = 'editable-error';
    
    //engine
    $.fn.editableform.engine = 'jquery';
}(window.jQuery));

/**
* EditableForm utilites
*/
(function ($) {
    "use strict";
    
    //utils
    $.fn.editableutils = {
        /**
        * classic JS inheritance function
        */  
        inherit: function (Child, Parent) {
            var F = function() { };
            F.prototype = Parent.prototype;
            Child.prototype = new F();
            Child.prototype.constructor = Child;
            Child.superclass = Parent.prototype;
        },

        /**
        * set caret position in input
        * see http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area
        */        
        setCursorPosition: function(elem, pos) {
            if (elem.setSelectionRange) {
                elem.setSelectionRange(pos, pos);
            } else if (elem.createTextRange) {
                var range = elem.createTextRange();
                range.collapse(true);
                range.moveEnd('character', pos);
                range.moveStart('character', pos);
                range.select();
            }
        },

        /**
        * function to parse JSON in *single* quotes. (jquery automatically parse only double quotes)
        * That allows such code as: <a data-source="{'a': 'b', 'c': 'd'}">
        * safe = true --> means no exception will be thrown
        * for details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery
        */
        tryParseJson: function(s, safe) {
            if (typeof s === 'string' && s.length && s.match(/^[\{\[].*[\}\]]$/)) {
                if (safe) {
                    try {
                        /*jslint evil: true*/
                        s = (new Function('return ' + s))();
                        /*jslint evil: false*/
                    } catch (e) {} finally {
                        return s;
                    }
                } else {
                    /*jslint evil: true*/
                    s = (new Function('return ' + s))();
                    /*jslint evil: false*/
                }
            }
            return s;
        },

        /**
        * slice object by specified keys
        */
        sliceObj: function(obj, keys, caseSensitive /* default: false */) {
            var key, keyLower, newObj = {};

            if (!$.isArray(keys) || !keys.length) {
                return newObj;
            }

            for (var i = 0; i < keys.length; i++) {
                key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    newObj[key] = obj[key];
                }

                if(caseSensitive === true) {
                    continue;
                }

                //when getting data-* attributes via $.data() it's converted to lowercase.
                //details: http://stackoverflow.com/questions/7602565/using-data-attributes-with-jquery
                //workaround is code below.
                keyLower = key.toLowerCase();
                if (obj.hasOwnProperty(keyLower)) {
                    newObj[key] = obj[keyLower];
                }
            }

            return newObj;
        },

        /*
        exclude complex objects from $.data() before pass to config
        */
        getConfigData: function($element) {
            var data = {};
            $.each($element.data(), function(k, v) {
                if(typeof v !== 'object' || (v && typeof v === 'object' && (v.constructor === Object || v.constructor === Array))) {
                    data[k] = v;
                }
            });
            return data;
        },

        /*
         returns keys of object
        */
        objectKeys: function(o) {
            if (Object.keys) {
                return Object.keys(o);  
            } else {
                if (o !== Object(o)) {
                    throw new TypeError('Object.keys called on a non-object');
                }
                var k=[], p;
                for (p in o) {
                    if (Object.prototype.hasOwnProperty.call(o,p)) {
                        k.push(p);
                    }
                }
                return k;
            }

        },
        
       /**
        method to escape html.
       **/
       escape: function(str) {
           return $('<div>').text(str).html();
       },
       
       /*
        returns array items from sourceData having value property equal or inArray of 'value'
       */
       itemsByValue: function(value, sourceData, valueProp) {
           if(!sourceData || value === null) {
               return [];
           }
           
           if (typeof(valueProp) !== "function") {
               var idKey = valueProp || 'value';
               valueProp = function (e) { return e[idKey]; };
           }
                      
           var isValArray = $.isArray(value),
           result = [], 
           that = this;

           $.each(sourceData, function(i, o) {
               if(o.children) {
                   result = result.concat(that.itemsByValue(value, o.children, valueProp));
               } else {
                   /*jslint eqeq: true*/
                   if(isValArray) {
                       if($.grep(value, function(v){  return v == (o && typeof o === 'object' ? valueProp(o) : o); }).length) {
                           result.push(o); 
                       }
                   } else {
                       var itemValue = (o && (typeof o === 'object')) ? valueProp(o) : o;
                       if(value == itemValue) {
                           result.push(o); 
                       }
                   }
                   /*jslint eqeq: false*/
               }
           });
           
           return result;
       },
       
       /*
       Returns input by options: type, mode. 
       */
       createInput: function(options) {
           var TypeConstructor, typeOptions, input,
           type = options.type;

           //`date` is some kind of virtual type that is transformed to one of exact types
           //depending on mode and core lib
           if(type === 'date') {
               //inline
               if(options.mode === 'inline') {
                   if($.fn.editabletypes.datefield) {
                       type = 'datefield';
                   } else if($.fn.editabletypes.dateuifield) {
                       type = 'dateuifield';
                   }
               //popup
               } else {
                   if($.fn.editabletypes.date) {
                       type = 'date';
                   } else if($.fn.editabletypes.dateui) {
                       type = 'dateui';
                   }
               }
               
               //if type still `date` and not exist in types, replace with `combodate` that is base input
               if(type === 'date' && !$.fn.editabletypes.date) {
                   type = 'combodate';
               } 
           }
           
           //`datetime` should be datetimefield in 'inline' mode
           if(type === 'datetime' && options.mode === 'inline') {
             type = 'datetimefield';  
           }           

           //change wysihtml5 to textarea for jquery UI and plain versions
           if(type === 'wysihtml5' && !$.fn.editabletypes[type]) {
               type = 'textarea';
           }

           //create input of specified type. Input will be used for converting value, not in form
           if(typeof $.fn.editabletypes[type] === 'function') {
               TypeConstructor = $.fn.editabletypes[type];
               typeOptions = this.sliceObj(options, this.objectKeys(TypeConstructor.defaults));
               input = new TypeConstructor(typeOptions);
               return input;
           } else {
               $.error('Unknown type: '+ type);
               return false; 
           }  
       },
       
       //see http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
       supportsTransitions: function () {
           var b = document.body || document.documentElement,
               s = b.style,
               p = 'transition',
               v = ['Moz', 'Webkit', 'Khtml', 'O', 'ms'];
               
           if(typeof s[p] === 'string') {
               return true; 
           }

           // Tests for vendor specific prop
           p = p.charAt(0).toUpperCase() + p.substr(1);
           for(var i=0; i<v.length; i++) {
               if(typeof s[v[i] + p] === 'string') { 
                   return true; 
               }
           }
           return false;
       }            
       
    };      
}(window.jQuery));

/**
Attaches stand-alone container with editable-form to HTML element. Element is used only for positioning, value is not stored anywhere.<br>
This method applied internally in <code>$().editable()</code>. You should subscribe on it's events (save / cancel) to get profit of it.<br>
Final realization can be different: bootstrap-popover, jqueryui-tooltip, poshytip, inline-div. It depends on which js file you include.<br>
Applied as jQuery method.

@class editableContainer
@uses editableform
**/
(function ($) {
    "use strict";

    var Popup = function (element, options) {
        this.init(element, options);
    };
    
    var Inline = function (element, options) {
        this.init(element, options);
    };    

    //methods
    Popup.prototype = {
        containerName: null, //method to call container on element
        containerDataName: null, //object name in element's .data()
        innerCss: null, //tbd in child class
        containerClass: 'editable-container editable-popup', //css class applied to container element
        defaults: {}, //container itself defaults
        
        init: function(element, options) {
            this.$element = $(element);
            //since 1.4.1 container do not use data-* directly as they already merged into options.
            this.options = $.extend({}, $.fn.editableContainer.defaults, options);         
            this.splitOptions();
            
            //set scope of form callbacks to element
            this.formOptions.scope = this.$element[0]; 
            
            this.initContainer();
            
            //flag to hide container, when saving value will finish
            this.delayedHide = false;

            //bind 'destroyed' listener to destroy container when element is removed from dom
            this.$element.on('destroyed', $.proxy(function(){
                this.destroy();
            }, this)); 
            
            //attach document handler to close containers on click / escape
            if(!$(document).data('editable-handlers-attached')) {
                //close all on escape
                $(document).on('keyup.editable', function (e) {
                    if (e.which === 27) {
                        $('.editable-open').editableContainer('hide');
                        //todo: return focus on element 
                    }
                });

                //close containers when click outside 
                //(mousedown could be better than click, it closes everything also on drag drop)
                $(document).on('click.editable', function(e) {
                    var $target = $(e.target), i,
                        exclude_classes = ['.editable-container', 
                                           '.ui-datepicker-header', 
                                           '.datepicker', //in inline mode datepicker is rendered into body
                                           '.modal-backdrop', 
                                           '.bootstrap-wysihtml5-insert-image-modal', 
                                           '.bootstrap-wysihtml5-insert-link-modal'
                                           ];
                    
                    //check if element is detached. It occurs when clicking in bootstrap datepicker
                    if (!$.contains(document.documentElement, e.target)) {
                      return;
                    }

                    //for some reason FF 20 generates extra event (click) in select2 widget with e.target = document
                    //we need to filter it via construction below. See https://github.com/vitalets/x-editable/issues/199
                    //Possibly related to http://stackoverflow.com/questions/10119793/why-does-firefox-react-differently-from-webkit-and-ie-to-click-event-on-selec
                    if($target.is(document)) {
                       return; 
                    }
                    
                    //if click inside one of exclude classes --> no nothing
                    for(i=0; i<exclude_classes.length; i++) {
                         if($target.is(exclude_classes[i]) || $target.parents(exclude_classes[i]).length) {
                             return;
                         }
                    }
                      
                    //close all open containers (except one - target)
                    Popup.prototype.closeOthers(e.target);
                });
                
                $(document).data('editable-handlers-attached', true);
            }                        
        },

        //split options on containerOptions and formOptions
        splitOptions: function() {
            this.containerOptions = {};
            this.formOptions = {};
            
            if(!$.fn[this.containerName]) {
                throw new Error(this.containerName + ' not found. Have you included corresponding js file?');   
            }
            
            //keys defined in container defaults go to container, others go to form
            for(var k in this.options) {
              if(k in this.defaults) {
                 this.containerOptions[k] = this.options[k];
              } else {
                 this.formOptions[k] = this.options[k];
              } 
            }
        },
        
        /*
        Returns jquery object of container
        @method tip()
        */         
        tip: function() {
            return this.container() ? this.container().$tip : null;
        },

        /* returns container object */
        container: function() {
            var container;
            //first, try get it by `containerDataName`
            if(this.containerDataName) {
                if(container = this.$element.data(this.containerDataName)) {
                    return container;
                }
            }
            //second, try `containerName`
            container = this.$element.data(this.containerName);
            return container;
        },

        /* call native method of underlying container, e.g. this.$element.popover('method') */ 
        call: function() {
            this.$element[this.containerName].apply(this.$element, arguments); 
        },        
        
        initContainer: function(){
            this.call(this.containerOptions);
        },

        renderForm: function() {
            this.$form
            .editableform(this.formOptions)
            .on({
                save: $.proxy(this.save, this), //click on submit button (value changed)
                nochange: $.proxy(function(){ this.hide('nochange'); }, this), //click on submit button (value NOT changed)                
                cancel: $.proxy(function(){ this.hide('cancel'); }, this), //click on calcel button
                show: $.proxy(function() {
                    if(this.delayedHide) {
                        this.hide(this.delayedHide.reason);
                        this.delayedHide = false;
                    } else {
                        this.setPosition();
                    }
                }, this), //re-position container every time form is shown (occurs each time after loading state)
                rendering: $.proxy(this.setPosition, this), //this allows to place container correctly when loading shown
                resize: $.proxy(this.setPosition, this), //this allows to re-position container when form size is changed 
                rendered: $.proxy(function(){
                    /**        
                    Fired when container is shown and form is rendered (for select will wait for loading dropdown options).  
                    **Note:** Bootstrap popover has own `shown` event that now cannot be separated from x-editable's one.
                    The workaround is to check `arguments.length` that is always `2` for x-editable.                     
                    
                    @event shown 
                    @param {Object} event event object
                    @example
                    $('#username').on('shown', function(e, editable) {
                        editable.input.$input.val('overwriting value of input..');
                    });                     
                    **/                      
                    /*
                     TODO: added second param mainly to distinguish from bootstrap's shown event. It's a hotfix that will be solved in future versions via namespaced events.  
                    */
                    this.$element.triggerHandler('shown', $(this.options.scope).data('editable')); 
                }, this) 
            })
            .editableform('render');
        },        

        /**
        Shows container with form
        @method show()
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.
        **/
        /* Note: poshytip owerwrites this method totally! */          
        show: function (closeAll) {
            this.$element.addClass('editable-open');
            if(closeAll !== false) {
                //close all open containers (except this)
                this.closeOthers(this.$element[0]);  
            }
            
            //show container itself
            this.innerShow();
            this.tip().addClass(this.containerClass);

            /*
            Currently, form is re-rendered on every show. 
            The main reason is that we dont know, what will container do with content when closed:
            remove(), detach() or just hide() - it depends on container.
            
            Detaching form itself before hide and re-insert before show is good solution, 
            but visually it looks ugly --> container changes size before hide.  
            */             
            
            //if form already exist - delete previous data 
            if(this.$form) {
                //todo: destroy prev data!
                //this.$form.destroy();
            }

            this.$form = $('<div>');
            
            //insert form into container body
            if(this.tip().is(this.innerCss)) {
                //for inline container
                this.tip().append(this.$form); 
            } else {
                this.tip().find(this.innerCss).append(this.$form);
            } 
            
            //render form
            this.renderForm();
        },

        /**
        Hides container with form
        @method hide()
        @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>
        **/         
        hide: function(reason) {  
            if(!this.tip() || !this.tip().is(':visible') || !this.$element.hasClass('editable-open')) {
                return;
            }
            
            //if form is saving value, schedule hide
            if(this.$form.data('editableform').isSaving) {
                this.delayedHide = {reason: reason};
                return;    
            } else {
                this.delayedHide = false;
            }

            this.$element.removeClass('editable-open');   
            this.innerHide();

            /**
            Fired when container was hidden. It occurs on both save or cancel.  
            **Note:** Bootstrap popover has own `hidden` event that now cannot be separated from x-editable's one.
            The workaround is to check `arguments.length` that is always `2` for x-editable. 

            @event hidden 
            @param {object} event event object
            @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|manual</code>
            @example
            $('#username').on('hidden', function(e, reason) {
                if(reason === 'save' || reason === 'cancel') {
                    //auto-open next editable
                    $(this).closest('tr').next().find('.editable').editable('show');
                } 
            });
            **/
            this.$element.triggerHandler('hidden', reason || 'manual');   
        },

        /* internal show method. To be overwritten in child classes */
        innerShow: function () {
             
        },        

        /* internal hide method. To be overwritten in child classes */
        innerHide: function () {

        },
        
        /**
        Toggles container visibility (show / hide)
        @method toggle()
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.
        **/          
        toggle: function(closeAll) {
            if(this.container() && this.tip() && this.tip().is(':visible')) {
                this.hide();
            } else {
                this.show(closeAll);
            } 
        },

        /*
        Updates the position of container when content changed.
        @method setPosition()
        */       
        setPosition: function() {
            //tbd in child class
        },

        save: function(e, params) {
            /**        
            Fired when new value was submitted. You can use <code>$(this).data('editableContainer')</code> inside handler to access to editableContainer instance
            
            @event save 
            @param {Object} event event object
            @param {Object} params additional params
            @param {mixed} params.newValue submitted value
            @param {Object} params.response ajax response
            @example
            $('#username').on('save', function(e, params) {
                //assuming server response: '{success: true}'
                var pk = $(this).data('editableContainer').options.pk;
                if(params.response && params.response.success) {
                    alert('value: ' + params.newValue + ' with pk: ' + pk + ' saved!');
                } else {
                    alert('error!'); 
                } 
            });
            **/             
            this.$element.triggerHandler('save', params);
            
            //hide must be after trigger, as saving value may require methods of plugin, applied to input
            this.hide('save');
        },

        /**
        Sets new option
        
        @method option(key, value)
        @param {string} key 
        @param {mixed} value 
        **/         
        option: function(key, value) {
            this.options[key] = value;
            if(key in this.containerOptions) {
                this.containerOptions[key] = value;
                this.setContainerOption(key, value); 
            } else {
                this.formOptions[key] = value;
                if(this.$form) {
                    this.$form.editableform('option', key, value);  
                }
            }
        },
        
        setContainerOption: function(key, value) {
            this.call('option', key, value);
        },

        /**
        Destroys the container instance
        @method destroy()
        **/        
        destroy: function() {
            this.hide();
            this.innerDestroy();
            this.$element.off('destroyed');
            this.$element.removeData('editableContainer');
        },
        
        /* to be overwritten in child classes */
        innerDestroy: function() {
            
        }, 
        
        /*
        Closes other containers except one related to passed element. 
        Other containers can be cancelled or submitted (depends on onblur option)
        */
        closeOthers: function(element) {
            $('.editable-open').each(function(i, el){
                //do nothing with passed element and it's children
                if(el === element || $(el).find(element).length) {
                    return;
                }

                //otherwise cancel or submit all open containers 
                var $el = $(el),
                ec = $el.data('editableContainer');

                if(!ec) {
                    return;  
                }
                
                if(ec.options.onblur === 'cancel') {
                    $el.data('editableContainer').hide('onblur');
                } else if(ec.options.onblur === 'submit') {
                    $el.data('editableContainer').tip().find('form').submit();
                }
            });

        },
        
        /**
        Activates input of visible container (e.g. set focus)
        @method activate()
        **/         
        activate: function() {
            if(this.tip && this.tip().is(':visible') && this.$form) {
               this.$form.data('editableform').input.activate(); 
            }
        } 

    };

    /**
    jQuery method to initialize editableContainer.
    
    @method $().editableContainer(options)
    @params {Object} options
    @example
    $('#edit').editableContainer({
        type: 'text',
        url: '/post',
        pk: 1,
        value: 'hello'
    });
    **/  
    $.fn.editableContainer = function (option) {
        var args = arguments;
        return this.each(function () {
            var $this = $(this),
            dataKey = 'editableContainer', 
            data = $this.data(dataKey),
            options = typeof option === 'object' && option,
            Constructor = (options.mode === 'inline') ? Inline : Popup;             

            if (!data) {
                $this.data(dataKey, (data = new Constructor(this, options)));
            }

            if (typeof option === 'string') { //call method 
                data[option].apply(data, Array.prototype.slice.call(args, 1));
            }            
        });
    };     

    //store constructors
    $.fn.editableContainer.Popup = Popup;
    $.fn.editableContainer.Inline = Inline;

    //defaults
    $.fn.editableContainer.defaults = {
        /**
        Initial value of form input

        @property value 
        @type mixed
        @default null
        @private
        **/        
        value: null,
        /**
        Placement of container relative to element. Can be <code>top|right|bottom|left</code>. Not used for inline container.

        @property placement 
        @type string
        @default 'top'
        **/        
        placement: 'top',
        /**
        Whether to hide container on save/cancel.

        @property autohide 
        @type boolean
        @default true
        @private 
        **/        
        autohide: true,
        /**
        Action when user clicks outside the container. Can be <code>cancel|submit|ignore</code>.  
        Setting <code>ignore</code> allows to have several containers open. 

        @property onblur 
        @type string
        @default 'cancel'
        @since 1.1.1
        **/        
        onblur: 'cancel',
        
        /**
        Animation speed (inline mode only)
        @property anim 
        @type string
        @default false
        **/        
        anim: false,
        
        /**
        Mode of editable, can be `popup` or `inline` 
        
        @property mode 
        @type string         
        @default 'popup'
        @since 1.4.0        
        **/        
        mode: 'popup'        
    };

    /* 
    * workaround to have 'destroyed' event to destroy popover when element is destroyed
    * see http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom
    */
    jQuery.event.special.destroyed = {
        remove: function(o) {
            if (o.handler) {
                o.handler();
            }
        }
    };    

}(window.jQuery));

/**
* Editable Inline 
* ---------------------
*/
(function ($) {
    "use strict";
    
    //copy prototype from EditableContainer
    //extend methods
    $.extend($.fn.editableContainer.Inline.prototype, $.fn.editableContainer.Popup.prototype, {
        containerName: 'editableform',
        innerCss: '.editable-inline',
        containerClass: 'editable-container editable-inline', //css class applied to container element
                 
        initContainer: function(){
            //container is <span> element
            this.$tip = $('<span></span>');
            
            //convert anim to miliseconds (int)
            if(!this.options.anim) {
                this.options.anim = 0;
            }         
        },
        
        splitOptions: function() {
            //all options are passed to form
            this.containerOptions = {};
            this.formOptions = this.options;
        },
        
        tip: function() {
           return this.$tip; 
        },
        
        innerShow: function () {
            this.$element.hide();
            this.tip().insertAfter(this.$element).show();
        }, 
        
        innerHide: function () {
            this.$tip.hide(this.options.anim, $.proxy(function() {
                this.$element.show();
                this.innerDestroy();
            }, this)); 
        },
        
        innerDestroy: function() {
            if(this.tip()) {
                this.tip().empty().remove();
            }
        } 
    });

}(window.jQuery));
/**
Makes editable any HTML element on the page. Applied as jQuery method.

@class editable
@uses editableContainer
**/
(function ($) {
    "use strict";

    var Editable = function (element, options) {
        this.$element = $(element);
        //data-* has more priority over js options: because dynamically created elements may change data-* 
        this.options = $.extend({}, $.fn.editable.defaults, options, $.fn.editableutils.getConfigData(this.$element));  
        if(this.options.selector) {
            this.initLive();
        } else {
            this.init();
        }
        
        //check for transition support
        if(this.options.highlight && !$.fn.editableutils.supportsTransitions()) {
            this.options.highlight = false;
        }
    };

    Editable.prototype = {
        constructor: Editable, 
        init: function () {
            var isValueByText = false, 
                doAutotext, finalize;

            //name
            this.options.name = this.options.name || this.$element.attr('id');
             
            //create input of specified type. Input needed already here to convert value for initial display (e.g. show text by id for select)
            //also we set scope option to have access to element inside input specific callbacks (e. g. source as function)
            this.options.scope = this.$element[0]; 
            this.input = $.fn.editableutils.createInput(this.options);
            if(!this.input) {
                return; 
            }            

            //set value from settings or by element's text
            if (this.options.value === undefined || this.options.value === null) {
                this.value = this.input.html2value($.trim(this.$element.html()));
                isValueByText = true;
            } else {
                /*
                  value can be string when received from 'data-value' attribute
                  for complext objects value can be set as json string in data-value attribute, 
                  e.g. data-value="{city: 'Moscow', street: 'Lenina'}"
                */
                this.options.value = $.fn.editableutils.tryParseJson(this.options.value, true); 
                if(typeof this.options.value === 'string') {
                    this.value = this.input.str2value(this.options.value);
                } else {
                    this.value = this.options.value;
                }
            }
            
            //add 'editable' class to every editable element
            this.$element.addClass('editable');
            
            //specifically for "textarea" add class .editable-pre-wrapped to keep linebreaks
            if(this.input.type === 'textarea') {
                this.$element.addClass('editable-pre-wrapped');
            }
            
            //attach handler activating editable. In disabled mode it just prevent default action (useful for links)
            if(this.options.toggle !== 'manual') {
                this.$element.addClass('editable-click');
                this.$element.on(this.options.toggle + '.editable', $.proxy(function(e){
                    //prevent following link if editable enabled
                    if(!this.options.disabled) {
                        e.preventDefault();
                    }
                    
                    //stop propagation not required because in document click handler it checks event target
                    //e.stopPropagation();
                    
                    if(this.options.toggle === 'mouseenter') {
                        //for hover only show container
                        this.show();
                    } else {
                        //when toggle='click' we should not close all other containers as they will be closed automatically in document click listener
                        var closeAll = (this.options.toggle !== 'click');
                        this.toggle(closeAll);
                    }
                }, this));
            } else {
                this.$element.attr('tabindex', -1); //do not stop focus on element when toggled manually
            }
            
            //if display is function it's far more convinient to have autotext = always to render correctly on init
            //see https://github.com/vitalets/x-editable-yii/issues/34
            if(typeof this.options.display === 'function') {
                this.options.autotext = 'always';
            }
            
            //check conditions for autotext:
            switch(this.options.autotext) {
              case 'always':
               doAutotext = true;
              break;
              case 'auto':
                //if element text is empty and value is defined and value not generated by text --> run autotext
                doAutotext = !$.trim(this.$element.text()).length && this.value !== null && this.value !== undefined && !isValueByText;
              break;
              default:
               doAutotext = false;
            }

            //depending on autotext run render() or just finilize init
            $.when(doAutotext ? this.render() : true).then($.proxy(function() {
                if(this.options.disabled) {
                    this.disable();
                } else {
                    this.enable(); 
                }
               /**        
               Fired when element was initialized by `$().editable()` method. 
               Please note that you should setup `init` handler **before** applying `editable`. 
                              
               @event init 
               @param {Object} event event object
               @param {Object} editable editable instance (as here it cannot accessed via data('editable'))
               @since 1.2.0
               @example
               $('#username').on('init', function(e, editable) {
                   alert('initialized ' + editable.options.name);
               });
               $('#username').editable();
               **/                  
                this.$element.triggerHandler('init', this);
            }, this));
        },

        /*
         Initializes parent element for live editables 
        */
        initLive: function() {
           //store selector 
           var selector = this.options.selector;
           //modify options for child elements
           this.options.selector = false; 
           this.options.autotext = 'never';
           //listen toggle events
           this.$element.on(this.options.toggle + '.editable', selector, $.proxy(function(e){
               var $target = $(e.target);
               if(!$target.data('editable')) {
                   //if delegated element initially empty, we need to clear it's text (that was manually set to `empty` by user)
                   //see https://github.com/vitalets/x-editable/issues/137 
                   if($target.hasClass(this.options.emptyclass)) {
                      $target.empty();
                   }
                   $target.editable(this.options).trigger(e);
               }
           }, this)); 
        },
        
        /*
        Renders value into element's text.
        Can call custom display method from options.
        Can return deferred object.
        @method render()
        @param {mixed} response server response (if exist) to pass into display function
        */          
        render: function(response) {
            //do not display anything
            if(this.options.display === false) {
                return;
            }
            
            //if input has `value2htmlFinal` method, we pass callback in third param to be called when source is loaded
            if(this.input.value2htmlFinal) {
                return this.input.value2html(this.value, this.$element[0], this.options.display, response); 
            //if display method defined --> use it    
            } else if(typeof this.options.display === 'function') {
                return this.options.display.call(this.$element[0], this.value, response);
            //else use input's original value2html() method    
            } else {
                return this.input.value2html(this.value, this.$element[0]); 
            }
        },
        
        /**
        Enables editable
        @method enable()
        **/          
        enable: function() {
            this.options.disabled = false;
            this.$element.removeClass('editable-disabled');
            this.handleEmpty(this.isEmpty);
            if(this.options.toggle !== 'manual') {
                if(this.$element.attr('tabindex') === '-1') {    
                    this.$element.removeAttr('tabindex');                                
                }
            }
        },
        
        /**
        Disables editable
        @method disable()
        **/         
        disable: function() {
            this.options.disabled = true; 
            this.hide();           
            this.$element.addClass('editable-disabled');
            this.handleEmpty(this.isEmpty);
            //do not stop focus on this element
            this.$element.attr('tabindex', -1);                
        },
        
        /**
        Toggles enabled / disabled state of editable element
        @method toggleDisabled()
        **/         
        toggleDisabled: function() {
            if(this.options.disabled) {
                this.enable();
            } else { 
                this.disable(); 
            }
        },  
        
        /**
        Sets new option
        
        @method option(key, value)
        @param {string|object} key option name or object with several options
        @param {mixed} value option new value
        @example
        $('.editable').editable('option', 'pk', 2);
        **/          
        option: function(key, value) {
            //set option(s) by object
            if(key && typeof key === 'object') {
               $.each(key, $.proxy(function(k, v){
                  this.option($.trim(k), v); 
               }, this)); 
               return;
            }

            //set option by string             
            this.options[key] = value;                          
            
            //disabled
            if(key === 'disabled') {
               return value ? this.disable() : this.enable();
            } 
            
            //value
            if(key === 'value') {
                this.setValue(value);
            }
            
            //transfer new option to container! 
            if(this.container) {
                this.container.option(key, value);  
            }
             
            //pass option to input directly (as it points to the same in form)
            if(this.input.option) {
                this.input.option(key, value);
            }
            
        },              
        
        /*
        * set emptytext if element is empty
        */
        handleEmpty: function (isEmpty) {
            //do not handle empty if we do not display anything
            if(this.options.display === false) {
                return;
            }

            /* 
            isEmpty may be set directly as param of method.
            It is required when we enable/disable field and can't rely on content 
            as node content is text: "Empty" that is not empty %)
            */
            if(isEmpty !== undefined) { 
                this.isEmpty = isEmpty;
            } else {
                //detect empty
                //for some inputs we need more smart check
                //e.g. wysihtml5 may have <br>, <p></p>, <img>
                if(typeof(this.input.isEmpty) === 'function') {
                    this.isEmpty = this.input.isEmpty(this.$element);                    
                } else {
                    this.isEmpty = $.trim(this.$element.html()) === '';
                }
            }           
            
            //emptytext shown only for enabled
            if(!this.options.disabled) {
                if (this.isEmpty) {
                    this.$element.html(this.options.emptytext);
                    if(this.options.emptyclass) {
                        this.$element.addClass(this.options.emptyclass);
                    }
                } else if(this.options.emptyclass) {
                    this.$element.removeClass(this.options.emptyclass);
                }
            } else {
                //below required if element disable property was changed
                if(this.isEmpty) {
                    this.$element.empty();
                    if(this.options.emptyclass) {
                        this.$element.removeClass(this.options.emptyclass);
                    }
                }
            }
        },        
        
        /**
        Shows container with form
        @method show()
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.
        **/  
        show: function (closeAll) {
            if(this.options.disabled) {
                return;
            }
            
            //init editableContainer: popover, tooltip, inline, etc..
            if(!this.container) {
                var containerOptions = $.extend({}, this.options, {
                    value: this.value,
                    input: this.input //pass input to form (as it is already created)
                });
                this.$element.editableContainer(containerOptions);
                //listen `save` event 
                this.$element.on("save.internal", $.proxy(this.save, this));
                this.container = this.$element.data('editableContainer'); 
            } else if(this.container.tip().is(':visible')) {
                return;
            }      
            
            //show container
            this.container.show(closeAll);
        },
        
        /**
        Hides container with form
        @method hide()
        **/       
        hide: function () {   
            if(this.container) {  
                this.container.hide();
            }
        },
        
        /**
        Toggles container visibility (show / hide)
        @method toggle()
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.
        **/  
        toggle: function(closeAll) {
            if(this.container && this.container.tip().is(':visible')) {
                this.hide();
            } else {
                this.show(closeAll);
            }
        },
        
        /*
        * called when form was submitted
        */          
        save: function(e, params) {
            //mark element with unsaved class if needed
            if(this.options.unsavedclass) {
                /*
                 Add unsaved css to element if:
                  - url is not user's function 
                  - value was not sent to server
                  - params.response === undefined, that means data was not sent
                  - value changed 
                */
                var sent = false;
                sent = sent || typeof this.options.url === 'function';
                sent = sent || this.options.display === false; 
                sent = sent || params.response !== undefined; 
                sent = sent || (this.options.savenochange && this.input.value2str(this.value) !== this.input.value2str(params.newValue)); 
                
                if(sent) {
                    this.$element.removeClass(this.options.unsavedclass); 
                } else {
                    this.$element.addClass(this.options.unsavedclass);                    
                }
            }
            
            //highlight when saving
            if(this.options.highlight) {
                var $e = this.$element,
                    bgColor = $e.css('background-color');
                    
                $e.css('background-color', this.options.highlight);
                setTimeout(function(){
                    if(bgColor === 'transparent') {
                        bgColor = ''; 
                    }
                    $e.css('background-color', bgColor);
                    $e.addClass('editable-bg-transition');
                    setTimeout(function(){
                       $e.removeClass('editable-bg-transition');  
                    }, 1700);
                }, 10);
            }
            
            //set new value
            this.setValue(params.newValue, false, params.response);
            
            /**        
            Fired when new value was submitted. You can use <code>$(this).data('editable')</code> to access to editable instance
            
            @event save 
            @param {Object} event event object
            @param {Object} params additional params
            @param {mixed} params.newValue submitted value
            @param {Object} params.response ajax response
            @example
            $('#username').on('save', function(e, params) {
                alert('Saved value: ' + params.newValue);
            });
            **/
            //event itself is triggered by editableContainer. Description here is only for documentation              
        },

        validate: function () {
            if (typeof this.options.validate === 'function') {
                return this.options.validate.call(this, this.value);
            }
        },
        
        /**
        Sets new value of editable
        @method setValue(value, convertStr)
        @param {mixed} value new value 
        @param {boolean} convertStr whether to convert value from string to internal format
        **/         
        setValue: function(value, convertStr, response) {
            if(convertStr) {
                this.value = this.input.str2value(value);
            } else {
                this.value = value;
            }
            if(this.container) {
                this.container.option('value', this.value);
            }
            $.when(this.render(response))
            .then($.proxy(function() {
                this.handleEmpty();
            }, this));
        },
        
        /**
        Activates input of visible container (e.g. set focus)
        @method activate()
        **/         
        activate: function() {
            if(this.container) {
               this.container.activate(); 
            }
        },
        
        /**
        Removes editable feature from element
        @method destroy()
        **/        
        destroy: function() {
            this.disable();
            
            if(this.container) {
               this.container.destroy(); 
            }
            
            this.input.destroy();

            if(this.options.toggle !== 'manual') {
                this.$element.removeClass('editable-click');
                this.$element.off(this.options.toggle + '.editable');
            } 
            
            this.$element.off("save.internal");
            
            this.$element.removeClass('editable editable-open editable-disabled');
            this.$element.removeData('editable');
        }        
    };

    /* EDITABLE PLUGIN DEFINITION
    * ======================= */

    /**
    jQuery method to initialize editable element.
    
    @method $().editable(options)
    @params {Object} options
    @example
    $('#username').editable({
        type: 'text',
        url: '/post',
        pk: 1
    });
    **/
    $.fn.editable = function (option) {
        //special API methods returning non-jquery object
        var result = {}, args = arguments, datakey = 'editable';
        switch (option) {
            /**
            Runs client-side validation for all matched editables
            
            @method validate()
            @returns {Object} validation errors map
            @example
            $('#username, #fullname').editable('validate');
            // possible result:
            {
              username: "username is required",
              fullname: "fullname should be minimum 3 letters length"
            }
            **/
            case 'validate':
                this.each(function () {
                    var $this = $(this), data = $this.data(datakey), error;
                    if (data && (error = data.validate())) {
                        result[data.options.name] = error;
                    }
                });
            return result;

            /**
            Returns current values of editable elements.   
            Note that it returns an **object** with name-value pairs, not a value itself. It allows to get data from several elements.    
            If value of some editable is `null` or `undefined` it is excluded from result object.
            When param `isSingle` is set to **true** - it is supposed you have single element and will return value of editable instead of object.   
             
            @method getValue()
            @param {bool} isSingle whether to return just value of single element
            @returns {Object} object of element names and values
            @example
            $('#username, #fullname').editable('getValue');
            //result:
            {
            username: "superuser",
            fullname: "John"
            }
            //isSingle = true
            $('#username').editable('getValue', true);
            //result "superuser" 
            **/
            case 'getValue':
                if(arguments.length === 2 && arguments[1] === true) { //isSingle = true
                    result = this.eq(0).data(datakey).value;
                } else {
                    this.each(function () {
                        var $this = $(this), data = $this.data(datakey);
                        if (data && data.value !== undefined && data.value !== null) {
                            result[data.options.name] = data.input.value2submit(data.value);
                        }
                    });
                }
            return result;

            /**
            This method collects values from several editable elements and submit them all to server.   
            Internally it runs client-side validation for all fields and submits only in case of success.  
            See <a href="#newrecord">creating new records</a> for details.  
            Since 1.5.1 `submit` can be applied to single element to send data programmatically. In that case
            `url`, `success` and `error` is taken from initial options and you can just call `$('#username').editable('submit')`. 
            
            @method submit(options)
            @param {object} options 
            @param {object} options.url url to submit data 
            @param {object} options.data additional data to submit
            @param {object} options.ajaxOptions additional ajax options
            @param {function} options.error(obj) error handler 
            @param {function} options.success(obj,config) success handler
            @returns {Object} jQuery object
            **/
            case 'submit':  //collects value, validate and submit to server for creating new record
                var config = arguments[1] || {},
                $elems = this,
                errors = this.editable('validate');

                // validation ok
                if($.isEmptyObject(errors)) {
                    var ajaxOptions = {};
                                                      
                    // for single element use url, success etc from options
                    if($elems.length === 1) {
                        var editable = $elems.data('editable');
                        //standard params
                        var params = {
                            name: editable.options.name || '',
                            value: editable.input.value2submit(editable.value),
                            pk: (typeof editable.options.pk === 'function') ? 
                                editable.options.pk.call(editable.options.scope) : 
                                editable.options.pk 
                        };

                        //additional params
                        if(typeof editable.options.params === 'function') {
                            params = editable.options.params.call(editable.options.scope, params);  
                        } else {
                            //try parse json in single quotes (from data-params attribute)
                            editable.options.params = $.fn.editableutils.tryParseJson(editable.options.params, true);   
                            $.extend(params, editable.options.params);
                        }

                        ajaxOptions = {
                            url: editable.options.url,
                            data: params,
                            type: 'POST'  
                        };
                        
                        // use success / error from options 
                        config.success = config.success || editable.options.success;
                        config.error = config.error || editable.options.error;
                        
                    // multiple elements
                    } else {
                        var values = this.editable('getValue'); 
                        
                        ajaxOptions = {
                            url: config.url,
                            data: values, 
                            type: 'POST'
                        };                        
                    }                    

                    // ajax success callabck (response 200 OK)
                    ajaxOptions.success = typeof config.success === 'function' ? function(response) {
                            config.success.call($elems, response, config);
                        } : $.noop;
                                  
                    // ajax error callabck
                    ajaxOptions.error = typeof config.error === 'function' ? function() {
                             config.error.apply($elems, arguments);
                        } : $.noop;
                       
                    // extend ajaxOptions    
                    if(config.ajaxOptions) { 
                        $.extend(ajaxOptions, config.ajaxOptions);
                    }
                    
                    // extra data 
                    if(config.data) {
                        $.extend(ajaxOptions.data, config.data);
                    }                     
                    
                    // perform ajax request
                    $.ajax(ajaxOptions);
                } else { //client-side validation error
                    if(typeof config.error === 'function') {
                        config.error.call($elems, errors);
                    }
                }
            return this;
        }

        //return jquery object
        return this.each(function () {
            var $this = $(this), 
                data = $this.data(datakey), 
                options = typeof option === 'object' && option;

            //for delegated targets do not store `editable` object for element
            //it's allows several different selectors.
            //see: https://github.com/vitalets/x-editable/issues/312    
            if(options && options.selector) {
                data = new Editable(this, options);
                return; 
            }    
            
            if (!data) {
                $this.data(datakey, (data = new Editable(this, options)));
            }

            if (typeof option === 'string') { //call method 
                data[option].apply(data, Array.prototype.slice.call(args, 1));
            } 
        });
    };    
            

    $.fn.editable.defaults = {
        /**
        Type of input. Can be <code>text|textarea|select|date|checklist</code> and more

        @property type 
        @type string
        @default 'text'
        **/
        type: 'text',        
        /**
        Sets disabled state of editable

        @property disabled 
        @type boolean
        @default false
        **/         
        disabled: false,
        /**
        How to toggle editable. Can be <code>click|dblclick|mouseenter|manual</code>.   
        When set to <code>manual</code> you should manually call <code>show/hide</code> methods of editable.    
        **Note**: if you call <code>show</code> or <code>toggle</code> inside **click** handler of some DOM element, 
        you need to apply <code>e.stopPropagation()</code> because containers are being closed on any click on document.
        
        @example
        $('#edit-button').click(function(e) {
            e.stopPropagation();
            $('#username').editable('toggle');
        });

        @property toggle 
        @type string
        @default 'click'
        **/          
        toggle: 'click',
        /**
        Text shown when element is empty.

        @property emptytext 
        @type string
        @default 'Empty'
        **/         
        emptytext: 'Empty',
        /**
        Allows to automatically set element's text based on it's value. Can be <code>auto|always|never</code>. Useful for select and date.
        For example, if dropdown list is <code>{1: 'a', 2: 'b'}</code> and element's value set to <code>1</code>, it's html will be automatically set to <code>'a'</code>.  
        <code>auto</code> - text will be automatically set only if element is empty.  
        <code>always|never</code> - always(never) try to set element's text.

        @property autotext 
        @type string
        @default 'auto'
        **/          
        autotext: 'auto', 
        /**
        Initial value of input. If not set, taken from element's text.  
        Note, that if element's text is empty - text is automatically generated from value and can be customized (see `autotext` option).  
        For example, to display currency sign:
        @example
        <a id="price" data-type="text" data-value="100"></a>
        <script>
        $('#price').editable({
            ...
            display: function(value) {
              $(this).text(value + '$');
            } 
        }) 
        </script>
                
        @property value 
        @type mixed
        @default element's text
        **/
        value: null,
        /**
        Callback to perform custom displaying of value in element's text.  
        If `null`, default input's display used.  
        If `false`, no displaying methods will be called, element's text will never change.  
        Runs under element's scope.  
        _**Parameters:**_  
        
        * `value` current value to be displayed
        * `response` server response (if display called after ajax submit), since 1.4.0
         
        For _inputs with source_ (select, checklist) parameters are different:  
          
        * `value` current value to be displayed
        * `sourceData` array of items for current input (e.g. dropdown items) 
        * `response` server response (if display called after ajax submit), since 1.4.0
                  
        To get currently selected items use `$.fn.editableutils.itemsByValue(value, sourceData)`.
        
        @property display 
        @type function|boolean
        @default null
        @since 1.2.0
        @example
        display: function(value, sourceData) {
           //display checklist as comma-separated values
           var html = [],
               checked = $.fn.editableutils.itemsByValue(value, sourceData);
               
           if(checked.length) {
               $.each(checked, function(i, v) { html.push($.fn.editableutils.escape(v.text)); });
               $(this).html(html.join(', '));
           } else {
               $(this).empty(); 
           }
        }
        **/          
        display: null,
        /**
        Css class applied when editable text is empty.

        @property emptyclass 
        @type string
        @since 1.4.1        
        @default editable-empty
        **/        
        emptyclass: 'editable-empty',
        /**
        Css class applied when value was stored but not sent to server (`pk` is empty or `send = 'never'`).  
        You may set it to `null` if you work with editables locally and submit them together.  

        @property unsavedclass 
        @type string
        @since 1.4.1        
        @default editable-unsaved
        **/        
        unsavedclass: 'editable-unsaved',
        /**
        If selector is provided, editable will be delegated to the specified targets.  
        Usefull for dynamically generated DOM elements.  
        **Please note**, that delegated targets can't be initialized with `emptytext` and `autotext` options, 
        as they actually become editable only after first click.  
        You should manually set class `editable-click` to these elements.  
        Also, if element originally empty you should add class `editable-empty`, set `data-value=""` and write emptytext into element:

        @property selector 
        @type string
        @since 1.4.1        
        @default null
        @example
        <div id="user">
          <!-- empty -->
          <a href="#" data-name="username" data-type="text" class="editable-click editable-empty" data-value="" title="Username">Empty</a>
          <!-- non-empty -->
          <a href="#" data-name="group" data-type="select" data-source="/groups" data-value="1" class="editable-click" title="Group">Operator</a>
        </div>     
        
        <script>
        $('#user').editable({
            selector: 'a',
            url: '/post',
            pk: 1
        });
        </script>
        **/         
        selector: null,
        /**
        Color used to highlight element after update. Implemented via CSS3 transition, works in modern browsers.
        
        @property highlight 
        @type string|boolean
        @since 1.4.5        
        @default #FFFF80 
        **/
        highlight: '#FFFF80'
    };
    
}(window.jQuery));

/**
AbstractInput - base class for all editable inputs.
It defines interface to be implemented by any input type.
To create your own input you can inherit from this class.

@class abstractinput
**/
(function ($) {
    "use strict";

    //types
    $.fn.editabletypes = {};

    var AbstractInput = function () { };

    AbstractInput.prototype = {
       /**
        Initializes input

        @method init() 
        **/
       init: function(type, options, defaults) {
           this.type = type;
           this.options = $.extend({}, defaults, options);
       },

       /*
       this method called before render to init $tpl that is inserted in DOM
       */
       prerender: function() {
           this.$tpl = $(this.options.tpl); //whole tpl as jquery object    
           this.$input = this.$tpl;         //control itself, can be changed in render method
           this.$clear = null;              //clear button
           this.error = null;               //error message, if input cannot be rendered           
       },
       
       /**
        Renders input from tpl. Can return jQuery deferred object.
        Can be overwritten in child objects

        @method render()
       **/
       render: function() {

       }, 

       /**
        Sets element's html by value. 

        @method value2html(value, element)
        @param {mixed} value
        @param {DOMElement} element
       **/
       value2html: function(value, element) {
           $(element)[this.options.escape ? 'text' : 'html']($.trim(value));
       },

       /**
        Converts element's html to value

        @method html2value(html)
        @param {string} html
        @returns {mixed}
       **/
       html2value: function(html) {
           return $('<div>').html(html).text();
       },

       /**
        Converts value to string (for internal compare). For submitting to server used value2submit().

        @method value2str(value) 
        @param {mixed} value
        @returns {string}
       **/
       value2str: function(value) {
           return value;
       }, 

       /**
        Converts string received from server into value. Usually from `data-value` attribute.

        @method str2value(str)
        @param {string} str
        @returns {mixed}
       **/
       str2value: function(str) {
           return str;
       }, 
       
       /**
        Converts value for submitting to server. Result can be string or object.

        @method value2submit(value) 
        @param {mixed} value
        @returns {mixed}
       **/
       value2submit: function(value) {
           return value;
       },

       /**
        Sets value of input.

        @method value2input(value) 
        @param {mixed} value
       **/
       value2input: function(value) {
           this.$input.val(value);
       },

       /**
        Returns value of input. Value can be object (e.g. datepicker)

        @method input2value() 
       **/
       input2value: function() { 
           return this.$input.val();
       }, 

       /**
        Activates input. For text it sets focus.

        @method activate() 
       **/
       activate: function() {
           if(this.$input.is(':visible')) {
               this.$input.focus();
           }
       },

       /**
        Creates input.

        @method clear() 
       **/        
       clear: function() {
           this.$input.val(null);
       },

       /**
        method to escape html.
       **/
       escape: function(str) {
           return $('<div>').text(str).html();
       },
       
       /**
        attach handler to automatically submit form when value changed (useful when buttons not shown)
       **/
       autosubmit: function() {
        
       },
       
       /**
       Additional actions when destroying element 
       **/
       destroy: function() {
       },

       // -------- helper functions --------
       setClass: function() {          
           if(this.options.inputclass) {
               this.$input.addClass(this.options.inputclass); 
           } 
       },

       setAttr: function(attr) {
           if (this.options[attr] !== undefined && this.options[attr] !== null) {
               this.$input.attr(attr, this.options[attr]);
           } 
       },
       
       option: function(key, value) {
            this.options[key] = value;
       }
       
    };
        
    AbstractInput.defaults = {  
        /**
        HTML template of input. Normally you should not change it.

        @property tpl 
        @type string
        @default ''
        **/   
        tpl: '',
        /**
        CSS class automatically applied to input
        
        @property inputclass 
        @type string
        @default null
        **/         
        inputclass: null,
        
        /**
        If `true` - html will be escaped in content of element via $.text() method.  
        If `false` - html will not be escaped, $.html() used.  
        When you use own `display` function, this option obviosly has no effect.
        
        @property escape 
        @type boolean
        @since 1.5.0
        @default true
        **/         
        escape: true,
                
        //scope for external methods (e.g. source defined as function)
        //for internal use only
        scope: null,
        
        //need to re-declare showbuttons here to get it's value from common config (passed only options existing in defaults)
        showbuttons: true 
    };
    
    $.extend($.fn.editabletypes, {abstractinput: AbstractInput});
        
}(window.jQuery));

/**
List - abstract class for inputs that have source option loaded from js array or via ajax

@class list
@extends abstractinput
**/
(function ($) {
    "use strict";
    
    var List = function (options) {
       
    };

    $.fn.editableutils.inherit(List, $.fn.editabletypes.abstractinput);

    $.extend(List.prototype, {
        render: function () {
            var deferred = $.Deferred();

            this.error = null;
            this.onSourceReady(function () {
                this.renderList();
                deferred.resolve();
            }, function () {
                this.error = this.options.sourceError;
                deferred.resolve();
            });

            return deferred.promise();
        },

        html2value: function (html) {
            return null; //can't set value by text
        },
        
        value2html: function (value, element, display, response) {
            var deferred = $.Deferred(),
                success = function () {
                    if(typeof display === 'function') {
                        //custom display method
                        display.call(element, value, this.sourceData, response); 
                    } else {
                        this.value2htmlFinal(value, element);
                    }
                    deferred.resolve();
               };
            
            //for null value just call success without loading source
            if(value === null) {
               success.call(this);   
            } else {
               this.onSourceReady(success, function () { deferred.resolve(); });
            }

            return deferred.promise();
        },  

        // ------------- additional functions ------------

        onSourceReady: function (success, error) {
            //run source if it function
            var source;
            if ($.isFunction(this.options.source)) {
                source = this.options.source.call(this.options.scope);
                this.sourceData = null;
                //note: if function returns the same source as URL - sourceData will be taken from cahce and no extra request performed
            } else {
                source = this.options.source;
            }            
            
            //if allready loaded just call success
            if(this.options.sourceCache && $.isArray(this.sourceData)) {
                success.call(this);
                return; 
            }

            //try parse json in single quotes (for double quotes jquery does automatically)
            try {
                source = $.fn.editableutils.tryParseJson(source, false);
            } catch (e) {
                error.call(this);
                return;
            }

            //loading from url
            if (typeof source === 'string') {
                //try to get sourceData from cache
                if(this.options.sourceCache) {
                    var cacheID = source,
                    cache;

                    if (!$(document).data(cacheID)) {
                        $(document).data(cacheID, {});
                    }
                    cache = $(document).data(cacheID);

                    //check for cached data
                    if (cache.loading === false && cache.sourceData) { //take source from cache
                        this.sourceData = cache.sourceData;
                        this.doPrepend();
                        success.call(this);
                        return;
                    } else if (cache.loading === true) { //cache is loading, put callback in stack to be called later
                        cache.callbacks.push($.proxy(function () {
                            this.sourceData = cache.sourceData;
                            this.doPrepend();
                            success.call(this);
                        }, this));

                        //also collecting error callbacks
                        cache.err_callbacks.push($.proxy(error, this));
                        return;
                    } else { //no cache yet, activate it
                        cache.loading = true;
                        cache.callbacks = [];
                        cache.err_callbacks = [];
                    }
                }
                
                //ajaxOptions for source. Can be overwritten bt options.sourceOptions
                var ajaxOptions = $.extend({
                    url: source,
                    type: 'get',
                    cache: false,
                    dataType: 'json',
                    success: $.proxy(function (data) {
                        if(cache) {
                            cache.loading = false;
                        }
                        this.sourceData = this.makeArray(data);
                        if($.isArray(this.sourceData)) {
                            if(cache) {
                                //store result in cache
                                cache.sourceData = this.sourceData;
                                //run success callbacks for other fields waiting for this source
                                $.each(cache.callbacks, function () { this.call(); }); 
                            }
                            this.doPrepend();
                            success.call(this);
                        } else {
                            error.call(this);
                            if(cache) {
                                //run error callbacks for other fields waiting for this source
                                $.each(cache.err_callbacks, function () { this.call(); }); 
                            }
                        }
                    }, this),
                    error: $.proxy(function () {
                        error.call(this);
                        if(cache) {
                             cache.loading = false;
                             //run error callbacks for other fields
                             $.each(cache.err_callbacks, function () { this.call(); }); 
                        }
                    }, this)
                }, this.options.sourceOptions);
                
                //loading sourceData from server
                $.ajax(ajaxOptions);
                
            } else { //options as json/array
                this.sourceData = this.makeArray(source);
                    
                if($.isArray(this.sourceData)) {
                    this.doPrepend();
                    success.call(this);   
                } else {
                    error.call(this);
                }
            }
        },

        doPrepend: function () {
            if(this.options.prepend === null || this.options.prepend === undefined) {
                return;  
            }
            
            if(!$.isArray(this.prependData)) {
                //run prepend if it is function (once)
                if ($.isFunction(this.options.prepend)) {
                    this.options.prepend = this.options.prepend.call(this.options.scope);
                }
              
                //try parse json in single quotes
                this.options.prepend = $.fn.editableutils.tryParseJson(this.options.prepend, true);
                
                //convert prepend from string to object
                if (typeof this.options.prepend === 'string') {
                    this.options.prepend = {'': this.options.prepend};
                }
                
                this.prependData = this.makeArray(this.options.prepend);
            }

            if($.isArray(this.prependData) && $.isArray(this.sourceData)) {
                this.sourceData = this.prependData.concat(this.sourceData);
            }
        },

        /*
         renders input list
        */
        renderList: function() {
            // this method should be overwritten in child class
        },
       
         /*
         set element's html by value
        */
        value2htmlFinal: function(value, element) {
            // this method should be overwritten in child class
        },        

        /**
        * convert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]
        */
        makeArray: function(data) {
            var count, obj, result = [], item, iterateItem;
            if(!data || typeof data === 'string') {
                return null; 
            }

            if($.isArray(data)) { //array
                /* 
                   function to iterate inside item of array if item is object.
                   Caclulates count of keys in item and store in obj. 
                */
                iterateItem = function (k, v) {
                    obj = {value: k, text: v};
                    if(count++ >= 2) {
                        return false;// exit from `each` if item has more than one key.
                    }
                };
            
                for(var i = 0; i < data.length; i++) {
                    item = data[i]; 
                    if(typeof item === 'object') {
                        count = 0; //count of keys inside item
                        $.each(item, iterateItem);
                        //case: [{val1: 'text1'}, {val2: 'text2} ...]
                        if(count === 1) { 
                            result.push(obj); 
                            //case: [{value: 1, text: 'text1'}, {value: 2, text: 'text2'}, ...]
                        } else if(count > 1) {
                            //removed check of existance: item.hasOwnProperty('value') && item.hasOwnProperty('text')
                            if(item.children) {
                                item.children = this.makeArray(item.children);   
                            }
                            result.push(item);
                        }
                    } else {
                        //case: ['text1', 'text2' ...]
                        result.push({value: item, text: item}); 
                    }
                }
            } else {  //case: {val1: 'text1', val2: 'text2, ...}
                $.each(data, function (k, v) {
                    result.push({value: k, text: v});
                });  
            }
            return result;
        },
        
        option: function(key, value) {
            this.options[key] = value;
            if(key === 'source') {
                this.sourceData = null;
            }
            if(key === 'prepend') {
                this.prependData = null;
            }            
        }        

    });      

    List.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        /**
        Source data for list.  
        If **array** - it should be in format: `[{value: 1, text: "text1"}, {value: 2, text: "text2"}, ...]`  
        For compability, object format is also supported: `{"1": "text1", "2": "text2" ...}` but it does not guarantee elements order.
        
        If **string** - considered ajax url to load items. In that case results will be cached for fields with the same source and name. See also `sourceCache` option.
          
        If **function**, it should return data in format above (since 1.4.0).
        
        Since 1.4.1 key `children` supported to render OPTGROUP (for **select** input only).  
        `[{text: "group1", children: [{value: 1, text: "text1"}, {value: 2, text: "text2"}]}, ...]` 

		
        @property source 
        @type string | array | object | function
        @default null
        **/         
        source: null, 
        /**
        Data automatically prepended to the beginning of dropdown list.
        
        @property prepend 
        @type string | array | object | function
        @default false
        **/         
        prepend: false,
        /**
        Error message when list cannot be loaded (e.g. ajax error)
        
        @property sourceError 
        @type string
        @default Error when loading list
        **/          
        sourceError: 'Error when loading list',
        /**
        if <code>true</code> and source is **string url** - results will be cached for fields with the same source.    
        Usefull for editable column in grid to prevent extra requests.
        
        @property sourceCache 
        @type boolean
        @default true
        @since 1.2.0
        **/        
        sourceCache: true,
        /**
        Additional ajax options to be used in $.ajax() when loading list from server.
        Useful to send extra parameters (`data` key) or change request method (`type` key).
        
        @property sourceOptions 
        @type object|function
        @default null
        @since 1.5.0
        **/        
        sourceOptions: null
    });

    $.fn.editabletypes.list = List;      

}(window.jQuery));

/**
Text input

@class text
@extends abstractinput
@final
@example
<a href="#" id="username" data-type="text" data-pk="1">awesome</a>
<script>
$(function(){
    $('#username').editable({
        url: '/post',
        title: 'Enter username'
    });
});
</script>
**/
(function ($) {
    "use strict";
    
    var Text = function (options) {
        this.init('text', options, Text.defaults);
    };

    $.fn.editableutils.inherit(Text, $.fn.editabletypes.abstractinput);

    $.extend(Text.prototype, {
        render: function() {
           this.renderClear();
           this.setClass();
           this.setAttr('placeholder');
        },
        
        activate: function() {
            if(this.$input.is(':visible')) {
                this.$input.focus();
                $.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length);
                if(this.toggleClear) {
                    this.toggleClear();
                }
            }
        },
        
        //render clear button
        renderClear:  function() {
           if (this.options.clear) {
               this.$clear = $('<span class="editable-clear-x"></span>');
               this.$input.after(this.$clear)
                          .css('padding-right', 24)
                          .keyup($.proxy(function(e) {
                              //arrows, enter, tab, etc
                              if(~$.inArray(e.keyCode, [40,38,9,13,27])) {
                                return;
                              }                            

                              clearTimeout(this.t);
                              var that = this;
                              this.t = setTimeout(function() {
                                that.toggleClear(e);
                              }, 100);
                              
                          }, this))
                          .parent().css('position', 'relative');
                          
               this.$clear.click($.proxy(this.clear, this));                       
           }            
        },
        
        postrender: function() {
            /*
            //now `clear` is positioned via css
            if(this.$clear) {
                //can position clear button only here, when form is shown and height can be calculated
//                var h = this.$input.outerHeight(true) || 20,
                var h = this.$clear.parent().height(),
                    delta = (h - this.$clear.height()) / 2;
                    
                //this.$clear.css({bottom: delta, right: delta});
            }
            */ 
        },
        
        //show / hide clear button
        toggleClear: function(e) {
            if(!this.$clear) {
                return;
            }
            
            var len = this.$input.val().length,
                visible = this.$clear.is(':visible');
                 
            if(len && !visible) {
                this.$clear.show();
            } 
            
            if(!len && visible) {
                this.$clear.hide();
            } 
        },
        
        clear: function() {
           this.$clear.hide();
           this.$input.val('').focus();
        }          
    });

    Text.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        /**
        @property tpl 
        @default <input type="text">
        **/         
        tpl: '<input type="text">',
        /**
        Placeholder attribute of input. Shown when input is empty.

        @property placeholder 
        @type string
        @default null
        **/             
        placeholder: null,
        
        /**
        Whether to show `clear` button 
        
        @property clear 
        @type boolean
        @default true        
        **/
        clear: true
    });

    $.fn.editabletypes.text = Text;

}(window.jQuery));

/**
Textarea input

@class textarea
@extends abstractinput
@final
@example
<a href="#" id="comments" data-type="textarea" data-pk="1">awesome comment!</a>
<script>
$(function(){
    $('#comments').editable({
        url: '/post',
        title: 'Enter comments',
        rows: 10
    });
});
</script>
**/
(function ($) {
    "use strict";
    
    var Textarea = function (options) {
        this.init('textarea', options, Textarea.defaults);
    };

    $.fn.editableutils.inherit(Textarea, $.fn.editabletypes.abstractinput);

    $.extend(Textarea.prototype, {
        render: function () {
            this.setClass();
            this.setAttr('placeholder');
            this.setAttr('rows');                        
            
            //ctrl + enter
            this.$input.keydown(function (e) {
                if (e.ctrlKey && e.which === 13) {
                    $(this).closest('form').submit();
                }
            });
        },
        
       //using `white-space: pre-wrap` solves \n  <--> BR conversion very elegant!
       /* 
       value2html: function(value, element) {
            var html = '', lines;
            if(value) {
                lines = value.split("\n");
                for (var i = 0; i < lines.length; i++) {
                    lines[i] = $('<div>').text(lines[i]).html();
                }
                html = lines.join('<br>');
            }
            $(element).html(html);
        },
       
        html2value: function(html) {
            if(!html) {
                return '';
            }

            var regex = new RegExp(String.fromCharCode(10), 'g');
            var lines = html.split(/<br\s*\/?>/i);
            for (var i = 0; i < lines.length; i++) {
                var text = $('<div>').html(lines[i]).text();

                // Remove newline characters (\n) to avoid them being converted by value2html() method
                // thus adding extra <br> tags
                text = text.replace(regex, '');

                lines[i] = text;
            }
            return lines.join("\n");
        },
         */
        activate: function() {
            $.fn.editabletypes.text.prototype.activate.call(this);
        }
    });

    Textarea.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        /**
        @property tpl
        @default <textarea></textarea>
        **/
        tpl:'<textarea></textarea>',
        /**
        @property inputclass
        @default input-large
        **/
        inputclass: 'input-large',
        /**
        Placeholder attribute of input. Shown when input is empty.

        @property placeholder
        @type string
        @default null
        **/
        placeholder: null,
        /**
        Number of rows in textarea

        @property rows
        @type integer
        @default 7
        **/        
        rows: 7        
    });

    $.fn.editabletypes.textarea = Textarea;

}(window.jQuery));

/**
Select (dropdown)

@class select
@extends list
@final
@example
<a href="#" id="status" data-type="select" data-pk="1" data-url="/post" data-title="Select status"></a>
<script>
$(function(){
    $('#status').editable({
        value: 2,    
        source: [
              {value: 1, text: 'Active'},
              {value: 2, text: 'Blocked'},
              {value: 3, text: 'Deleted'}
           ]
    });
});
</script>
**/
(function ($) {
    "use strict";
    
    var Select = function (options) {
        this.init('select', options, Select.defaults);
    };

    $.fn.editableutils.inherit(Select, $.fn.editabletypes.list);

    $.extend(Select.prototype, {
        renderList: function() {
            this.$input.empty();

            var fillItems = function($el, data) {
                var attr;
                if($.isArray(data)) {
                    for(var i=0; i<data.length; i++) {
                        attr = {};
                        if(data[i].children) {
                            attr.label = data[i].text;
                            $el.append(fillItems($('<optgroup>', attr), data[i].children)); 
                        } else {
                            attr.value = data[i].value;
                            if(data[i].disabled) {
                                attr.disabled = true;
                            }
                            $el.append($('<option>', attr).text(data[i].text)); 
                        }
                    }
                }
                return $el;
            };        

            fillItems(this.$input, this.sourceData);
            
            this.setClass();
            
            //enter submit
            this.$input.on('keydown.editable', function (e) {
                if (e.which === 13) {
                    $(this).closest('form').submit();
                }
            });            
        },
       
        value2htmlFinal: function(value, element) {
            var text = '', 
                items = $.fn.editableutils.itemsByValue(value, this.sourceData);
                
            if(items.length) {
                text = items[0].text;
            }
            
            //$(element).text(text);
            $.fn.editabletypes.abstractinput.prototype.value2html.call(this, text, element);
        },
        
        autosubmit: function() {
            this.$input.off('keydown.editable').on('change.editable', function(){
                $(this).closest('form').submit();
            });
        }
    });      

    Select.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {
        /**
        @property tpl 
        @default <select></select>
        **/         
        tpl:'<select></select>'
    });

    $.fn.editabletypes.select = Select;      

}(window.jQuery));

/**
List of checkboxes. 
Internally value stored as javascript array of values.

@class checklist
@extends list
@final
@example
<a href="#" id="options" data-type="checklist" data-pk="1" data-url="/post" data-title="Select options"></a>
<script>
$(function(){
    $('#options').editable({
        value: [2, 3],    
        source: [
              {value: 1, text: 'option1'},
              {value: 2, text: 'option2'},
              {value: 3, text: 'option3'}
           ]
    });
});
</script>
**/
(function ($) {
    "use strict";
    
    var Checklist = function (options) {
        this.init('checklist', options, Checklist.defaults);
    };

    $.fn.editableutils.inherit(Checklist, $.fn.editabletypes.list);

    $.extend(Checklist.prototype, {
        renderList: function() {
            var $label, $div;
            
            this.$tpl.empty();
            
            if(!$.isArray(this.sourceData)) {
                return;
            }

            for(var i=0; i<this.sourceData.length; i++) {
                $label = $('<label>').append($('<input>', {
                                           type: 'checkbox',
                                           value: this.sourceData[i].value 
                                     }))
                                     .append($('<span>').text(' '+this.sourceData[i].text));
                
                $('<div>').append($label).appendTo(this.$tpl);
            }
            
            this.$input = this.$tpl.find('input[type="checkbox"]');
            this.setClass();
        },
       
       value2str: function(value) {
           return $.isArray(value) ? value.sort().join($.trim(this.options.separator)) : '';
       },  
       
       //parse separated string
        str2value: function(str) {
           var reg, value = null;
           if(typeof str === 'string' && str.length) {
               reg = new RegExp('\\s*'+$.trim(this.options.separator)+'\\s*');
               value = str.split(reg);
           } else if($.isArray(str)) {
               value = str; 
           } else {
               value = [str];
           }
           return value;
        },       
       
       //set checked on required checkboxes
       value2input: function(value) {
            this.$input.prop('checked', false);
            if($.isArray(value) && value.length) {
               this.$input.each(function(i, el) {
                   var $el = $(el);
                   // cannot use $.inArray as it performs strict comparison
                   $.each(value, function(j, val){
                       /*jslint eqeq: true*/
                       if($el.val() == val) {
                       /*jslint eqeq: false*/                           
                           $el.prop('checked', true);
                       }
                   });
               }); 
            }  
        },  
        
       input2value: function() { 
           var checked = [];
           this.$input.filter(':checked').each(function(i, el) {
               checked.push($(el).val());
           });
           return checked;
       },            
          
       //collect text of checked boxes
        value2htmlFinal: function(value, element) {
           var html = [],
               checked = $.fn.editableutils.itemsByValue(value, this.sourceData),
               escape = this.options.escape;
               
           if(checked.length) {
               $.each(checked, function(i, v) {
                   var text = escape ? $.fn.editableutils.escape(v.text) : v.text; 
                   html.push(text); 
               });
               $(element).html(html.join('<br>'));
           } else {
               $(element).empty(); 
           }
        },
        
       activate: function() {
           this.$input.first().focus();
       },
       
       autosubmit: function() {
           this.$input.on('keydown', function(e){
               if (e.which === 13) {
                   $(this).closest('form').submit();
               }
           });
       }
    });      

    Checklist.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {
        /**
        @property tpl 
        @default <div></div>
        **/         
        tpl:'<div class="editable-checklist"></div>',
        
        /**
        @property inputclass 
        @type string
        @default null
        **/         
        inputclass: null,        
        
        /**
        Separator of values when reading from `data-value` attribute

        @property separator 
        @type string
        @default ','
        **/         
        separator: ','
    });

    $.fn.editabletypes.checklist = Checklist;      

}(window.jQuery));

/**
HTML5 input types.
Following types are supported:

* password
* email
* url
* tel
* number
* range
* time

Learn more about html5 inputs:  
http://www.w3.org/wiki/HTML5_form_additions  
To check browser compatibility please see:  
https://developer.mozilla.org/en-US/docs/HTML/Element/Input
            
@class html5types 
@extends text
@final
@since 1.3.0
@example
<a href="#" id="email" data-type="email" data-pk="1">admin@example.com</a>
<script>
$(function(){
    $('#email').editable({
        url: '/post',
        title: 'Enter email'
    });
});
</script>
**/

/**
@property tpl 
@default depends on type
**/ 

/*
Password
*/
(function ($) {
    "use strict";
    
    var Password = function (options) {
        this.init('password', options, Password.defaults);
    };
    $.fn.editableutils.inherit(Password, $.fn.editabletypes.text);
    $.extend(Password.prototype, {
       //do not display password, show '[hidden]' instead
       value2html: function(value, element) {
           if(value) {
               $(element).text('[hidden]');
           } else {
               $(element).empty(); 
           }
       },
       //as password not displayed, should not set value by html
       html2value: function(html) {
           return null;
       }       
    });    
    Password.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {
        tpl: '<input type="password">'
    });
    $.fn.editabletypes.password = Password;
}(window.jQuery));


/*
Email
*/
(function ($) {
    "use strict";
    
    var Email = function (options) {
        this.init('email', options, Email.defaults);
    };
    $.fn.editableutils.inherit(Email, $.fn.editabletypes.text);
    Email.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {
        tpl: '<input type="email">'
    });
    $.fn.editabletypes.email = Email;
}(window.jQuery));


/*
Url
*/
(function ($) {
    "use strict";
    
    var Url = function (options) {
        this.init('url', options, Url.defaults);
    };
    $.fn.editableutils.inherit(Url, $.fn.editabletypes.text);
    Url.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {
        tpl: '<input type="url">'
    });
    $.fn.editabletypes.url = Url;
}(window.jQuery));


/*
Tel
*/
(function ($) {
    "use strict";
    
    var Tel = function (options) {
        this.init('tel', options, Tel.defaults);
    };
    $.fn.editableutils.inherit(Tel, $.fn.editabletypes.text);
    Tel.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {
        tpl: '<input type="tel">'
    });
    $.fn.editabletypes.tel = Tel;
}(window.jQuery));


/*
Number
*/
(function ($) {
    "use strict";
    
    var NumberInput = function (options) {
        this.init('number', options, NumberInput.defaults);
    };
    $.fn.editableutils.inherit(NumberInput, $.fn.editabletypes.text);
    $.extend(NumberInput.prototype, {
         render: function () {
            NumberInput.superclass.render.call(this);
            this.setAttr('min');
            this.setAttr('max');
            this.setAttr('step');
        },
        postrender: function() {
            if(this.$clear) {
                //increase right ffset  for up/down arrows
                this.$clear.css({right: 24});
                /*
                //can position clear button only here, when form is shown and height can be calculated
                var h = this.$input.outerHeight(true) || 20,
                    delta = (h - this.$clear.height()) / 2;
                
                //add 12px to offset right for up/down arrows    
                this.$clear.css({top: delta, right: delta + 16});
                */
            } 
        }        
    });     
    NumberInput.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {
        tpl: '<input type="number">',
        inputclass: 'input-mini',
        min: null,
        max: null,
        step: null
    });
    $.fn.editabletypes.number = NumberInput;
}(window.jQuery));


/*
Range (inherit from number)
*/
(function ($) {
    "use strict";
    
    var Range = function (options) {
        this.init('range', options, Range.defaults);
    };
    $.fn.editableutils.inherit(Range, $.fn.editabletypes.number);
    $.extend(Range.prototype, {
        render: function () {
            this.$input = this.$tpl.filter('input');
            
            this.setClass();
            this.setAttr('min');
            this.setAttr('max');
            this.setAttr('step');           
            
            this.$input.on('input', function(){
                $(this).siblings('output').text($(this).val()); 
            });  
        },
        activate: function() {
            this.$input.focus();
        }         
    });
    Range.defaults = $.extend({}, $.fn.editabletypes.number.defaults, {
        tpl: '<input type="range"><output style="width: 30px; display: inline-block"></output>',
        inputclass: 'input-medium'
    });
    $.fn.editabletypes.range = Range;
}(window.jQuery));

/*
Time
*/
(function ($) {
    "use strict";

    var Time = function (options) {
        this.init('time', options, Time.defaults);
    };
    //inherit from abstract, as inheritance from text gives selection error.
    $.fn.editableutils.inherit(Time, $.fn.editabletypes.abstractinput);
    $.extend(Time.prototype, {
        render: function() {
           this.setClass();
        }        
    });
    Time.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        tpl: '<input type="time">'
    });
    $.fn.editabletypes.time = Time;
}(window.jQuery));

/**
Select2 input. Based on amazing work of Igor Vaynberg https://github.com/ivaynberg/select2.  
Please see [original select2 docs](http://ivaynberg.github.com/select2) for detailed description and options.  
 
You should manually download and include select2 distributive:  

    <link href="select2/select2.css" rel="stylesheet" type="text/css"></link>  
    <script src="select2/select2.js"></script>  
    
To make it **bootstrap-styled** you can use css from [here](https://github.com/t0m/select2-bootstrap-css): 

    <link href="select2-bootstrap.css" rel="stylesheet" type="text/css"></link>    
    
**Note:** currently `autotext` feature does not work for select2 with `ajax` remote source.    
You need initially put both `data-value` and element's text youself:    

    <a href="#" data-type="select2" data-value="1">Text1</a>
    
    
@class select2
@extends abstractinput
@since 1.4.1
@final
@example
<a href="#" id="country" data-type="select2" data-pk="1" data-value="ru" data-url="/post" data-title="Select country"></a>
<script>
$(function(){
    //local source
    $('#country').editable({
        source: [
              {id: 'gb', text: 'Great Britain'},
              {id: 'us', text: 'United States'},
              {id: 'ru', text: 'Russia'}
           ],
        select2: {
           multiple: true
        }
    });
    //remote source (simple)
    $('#country').editable({
        source: '/getCountries',
        select2: {
            placeholder: 'Select Country',
            minimumInputLength: 1
        }
    });
    //remote source (advanced)
    $('#country').editable({
        select2: {
            placeholder: 'Select Country',
            allowClear: true,
            minimumInputLength: 3,
            id: function (item) {
                return item.CountryId;
            },
            ajax: {
                url: '/getCountries',
                dataType: 'json',
                data: function (term, page) {
                    return { query: term };
                },
                results: function (data, page) {
                    return { results: data };
                }
            },
            formatResult: function (item) {
                return item.CountryName;
            },
            formatSelection: function (item) {
                return item.CountryName;
            },
            initSelection: function (element, callback) {
                return $.get('/getCountryById', { query: element.val() }, function (data) {
                    callback(data);
                });
            } 
        }  
    });
});
</script>
**/
(function ($) {
    "use strict";
    
    var Constructor = function (options) {
        this.init('select2', options, Constructor.defaults);

        options.select2 = options.select2 || {};

        this.sourceData = null;
        
        //placeholder
        if(options.placeholder) {
            options.select2.placeholder = options.placeholder;
        }
       
        //if not `tags` mode, use source
        if(!options.select2.tags && options.source) {
            var source = options.source;
            //if source is function, call it (once!)
            if ($.isFunction(options.source)) {
                source = options.source.call(options.scope);
            }               

            if (typeof source === 'string') {
                options.select2.ajax = options.select2.ajax || {};
                //some default ajax params
                if(!options.select2.ajax.data) {
                    options.select2.ajax.data = function(term) {return { query:term };};
                }
                if(!options.select2.ajax.results) {
                    options.select2.ajax.results = function(data) { return {results:data };};
                }
                options.select2.ajax.url = source;
            } else {
                //check format and convert x-editable format to select2 format (if needed)
                this.sourceData = this.convertSource(source);
                options.select2.data = this.sourceData;
            }
        } 

        //overriding objects in config (as by default jQuery extend() is not recursive)
        this.options.select2 = $.extend({}, Constructor.defaults.select2, options.select2);

        //detect whether it is multi-valued
        this.isMultiple = this.options.select2.tags || this.options.select2.multiple;
        this.isRemote = ('ajax' in this.options.select2);

        //store function returning ID of item
        //should be here as used inautotext for local source
        this.idFunc = this.options.select2.id;
        if (typeof(this.idFunc) !== "function") {
            var idKey = this.idFunc || 'id';
            this.idFunc = function (e) { return e[idKey]; };
        }

        //store function that renders text in select2
        this.formatSelection = this.options.select2.formatSelection;
        if (typeof(this.formatSelection) !== "function") {
            this.formatSelection = function (e) { return e.text; };
        }
    };

    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);

    $.extend(Constructor.prototype, {
        render: function() {
            this.setClass();

            //can not apply select2 here as it calls initSelection 
            //over input that does not have correct value yet.
            //apply select2 only in value2input
            //this.$input.select2(this.options.select2);

            //when data is loaded via ajax, we need to know when it's done to populate listData
            if(this.isRemote) {
                //listen to loaded event to populate data
                this.$input.on('select2-loaded', $.proxy(function(e) {
                    this.sourceData = e.items.results;
                }, this));
            }

            //trigger resize of editableform to re-position container in multi-valued mode
            if(this.isMultiple) {
               this.$input.on('change', function() {
                   $(this).closest('form').parent().triggerHandler('resize');
               });
            }
       },

       value2html: function(value, element) {
           var text = '', data,
               that = this;

           if(this.options.select2.tags) { //in tags mode just assign value
              data = value; 
              //data = $.fn.editableutils.itemsByValue(value, this.options.select2.tags, this.idFunc);
           } else if(this.sourceData) {
              data = $.fn.editableutils.itemsByValue(value, this.sourceData, this.idFunc); 
           } else {
              //can not get list of possible values 
              //(e.g. autotext for select2 with ajax source)
           }

           //data may be array (when multiple values allowed)
           if($.isArray(data)) {
               //collect selected data and show with separator
               text = [];
               $.each(data, function(k, v){
                   text.push(v && typeof v === 'object' ? that.formatSelection(v) : v);
               });
           } else if(data) {
               text = that.formatSelection(data);
           }

           text = $.isArray(text) ? text.join(this.options.viewseparator) : text;

           //$(element).text(text);
           Constructor.superclass.value2html.call(this, text, element); 
       },

       html2value: function(html) {
           return this.options.select2.tags ? this.str2value(html, this.options.viewseparator) : null;
       },

       value2input: function(value) {
           // if value array => join it anyway
           if($.isArray(value)) {
              value = value.join(this.getSeparator());
           }

           //for remote source just set value, text is updated by initSelection
           if(!this.$input.data('select2')) {
               this.$input.val(value);
               this.$input.select2(this.options.select2);
           } else {
               //second argument needed to separate initial change from user's click (for autosubmit)   
               this.$input.val(value).trigger('change', true); 

               //Uncaught Error: cannot call val() if initSelection() is not defined
               //this.$input.select2('val', value);
           }

           // if defined remote source AND no multiple mode AND no user's initSelection provided --> 
           // we should somehow get text for provided id.
           // The solution is to use element's text as text for that id (exclude empty)
           if(this.isRemote && !this.isMultiple && !this.options.select2.initSelection) {
               // customId and customText are methods to extract `id` and `text` from data object
               // we can use this workaround only if user did not define these methods
               // otherwise we cant construct data object
               var customId = this.options.select2.id,
                   customText = this.options.select2.formatSelection;

               if(!customId && !customText) {
                   var $el = $(this.options.scope);
                   if (!$el.data('editable').isEmpty) {
                       var data = {id: value, text: $el.text()};
                       this.$input.select2('data', data); 
                   }
               }
           }
       },
       
       input2value: function() { 
           return this.$input.select2('val');
       },

       str2value: function(str, separator) {
            if(typeof str !== 'string' || !this.isMultiple) {
                return str;
            }

            separator = separator || this.getSeparator();

            var val, i, l;

            if (str === null || str.length < 1) {
                return null;
            }
            val = str.split(separator);
            for (i = 0, l = val.length; i < l; i = i + 1) {
                val[i] = $.trim(val[i]);
            }

            return val;
       },

        autosubmit: function() {
            this.$input.on('change', function(e, isInitial){
                if(!isInitial) {
                  $(this).closest('form').submit();
                }
            });
        },

        getSeparator: function() {
            return this.options.select2.separator || $.fn.select2.defaults.separator;
        },

        /*
        Converts source from x-editable format: {value: 1, text: "1"} to
        select2 format: {id: 1, text: "1"}
        */
        convertSource: function(source) {
            if($.isArray(source) && source.length && source[0].value !== undefined) {
                for(var i = 0; i<source.length; i++) {
                    if(source[i].value !== undefined) {
                        source[i].id = source[i].value;
                        delete source[i].value;
                    }
                }
            }
            return source;
        },
        
        destroy: function() {
            if(this.$input.data('select2')) {
                this.$input.select2('destroy');
            }
        }
        
    });

    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        /**
        @property tpl 
        @default <input type="hidden">
        **/
        tpl:'<input type="hidden">',
        /**
        Configuration of select2. [Full list of options](http://ivaynberg.github.com/select2).

        @property select2 
        @type object
        @default null
        **/
        select2: null,
        /**
        Placeholder attribute of select

        @property placeholder 
        @type string
        @default null
        **/
        placeholder: null,
        /**
        Source data for select. It will be assigned to select2 `data` property and kept here just for convenience.
        Please note, that format is different from simple `select` input: use 'id' instead of 'value'.
        E.g. `[{id: 1, text: "text1"}, {id: 2, text: "text2"}, ...]`.

        @property source 
        @type array|string|function
        @default null        
        **/
        source: null,
        /**
        Separator used to display tags.

        @property viewseparator 
        @type string
        @default ', '        
        **/
        viewseparator: ', '
    });

    $.fn.editabletypes.select2 = Constructor;

}(window.jQuery));

/**
* Combodate - 1.0.5
* Dropdown date and time picker.
* Converts text input into dropdowns to pick day, month, year, hour, minute and second.
* Uses momentjs as datetime library http://momentjs.com.
* For i18n include corresponding file from https://github.com/timrwood/moment/tree/master/lang 
*
* Confusion at noon and midnight - see http://en.wikipedia.org/wiki/12-hour_clock#Confusion_at_noon_and_midnight
* In combodate: 
* 12:00 pm --> 12:00 (24-h format, midday)
* 12:00 am --> 00:00 (24-h format, midnight, start of day)
* 
* Differs from momentjs parse rules:
* 00:00 pm, 12:00 pm --> 12:00 (24-h format, day not change)
* 00:00 am, 12:00 am --> 00:00 (24-h format, day not change)
* 
* 
* Author: Vitaliy Potapov
* Project page: http://github.com/vitalets/combodate
* Copyright (c) 2012 Vitaliy Potapov. Released under MIT License.
**/
(function ($) {

    var Combodate = function (element, options) {
        this.$element = $(element);
        if(!this.$element.is('input')) {
            $.error('Combodate should be applied to INPUT element');
            return;
        }
        this.options = $.extend({}, $.fn.combodate.defaults, options, this.$element.data());
        this.init();  
     };

    Combodate.prototype = {
        constructor: Combodate, 
        init: function () {
            this.map = {
                //key   regexp    moment.method
                day:    ['D',    'date'], 
                month:  ['M',    'month'], 
                year:   ['Y',    'year'], 
                hour:   ['[Hh]', 'hours'],
                minute: ['m',    'minutes'], 
                second: ['s',    'seconds'],
                ampm:   ['[Aa]', ''] 
            };
            
            this.$widget = $('<span class="combodate"></span>').html(this.getTemplate());
                      
            this.initCombos();
            
            //update original input on change 
            this.$widget.on('change', 'select', $.proxy(function(e) {
                this.$element.val(this.getValue()).change();
                // update days count if month or year changes
                if (this.options.smartDays) {
                    if ($(e.target).is('.month') || $(e.target).is('.year')) {
                        this.fillCombo('day');
                    }
                }
            }, this));
            
            this.$widget.find('select').css('width', 'auto');
                                       
            // hide original input and insert widget                                       
            this.$element.hide().after(this.$widget);
            
            // set initial value
            this.setValue(this.$element.val() || this.options.value);
        },
        
        /*
         Replace tokens in template with <select> elements 
        */         
        getTemplate: function() {
            var tpl = this.options.template;

            //first pass
            $.each(this.map, function(k, v) {
                v = v[0]; 
                var r = new RegExp(v+'+'),
                    token = v.length > 1 ? v.substring(1, 2) : v;
                    
                tpl = tpl.replace(r, '{'+token+'}');
            });

            //replace spaces with &nbsp;
            tpl = tpl.replace(/ /g, '&nbsp;');

            //second pass
            $.each(this.map, function(k, v) {
                v = v[0];
                var token = v.length > 1 ? v.substring(1, 2) : v;
                    
                tpl = tpl.replace('{'+token+'}', '<select class="'+k+'"></select>');
            });   

            return tpl;
        },
        
        /*
         Initialize combos that presents in template 
        */        
        initCombos: function() {
            for (var k in this.map) {
                var $c = this.$widget.find('.'+k);
                // set properties like this.$day, this.$month etc.
                this['$'+k] = $c.length ? $c : null;
                // fill with items
                this.fillCombo(k);
            }
        },

        /*
         Fill combo with items 
        */        
        fillCombo: function(k) {
            var $combo = this['$'+k];
            if (!$combo) {
                return;
            }

            // define method name to fill items, e.g `fillDays`
            var f = 'fill' + k.charAt(0).toUpperCase() + k.slice(1); 
            var items = this[f]();
            var value = $combo.val();

            $combo.empty();
            for(var i=0; i<items.length; i++) {
                $combo.append('<option value="'+items[i][0]+'">'+items[i][1]+'</option>');
            }

            $combo.val(value);
        },

        /*
         Initialize items of combos. Handles `firstItem` option 
        */
        fillCommon: function(key) {
            var values = [],
                relTime;
                
            if(this.options.firstItem === 'name') {
                //need both to support moment ver < 2 and  >= 2
                relTime = moment.relativeTime || moment.langData()._relativeTime; 
                var header = typeof relTime[key] === 'function' ? relTime[key](1, true, key, false) : relTime[key];
                //take last entry (see momentjs lang files structure) 
                header = header.split(' ').reverse()[0];                
                values.push(['', header]);
            } else if(this.options.firstItem === 'empty') {
                values.push(['', '']);
            }
            return values;
        },  


        /*
        fill day
        */
        fillDay: function() {
            var items = this.fillCommon('d'), name, i,
                twoDigit = this.options.template.indexOf('DD') !== -1,
                daysCount = 31;

            // detect days count (depends on month and year)
            // originally https://github.com/vitalets/combodate/pull/7
            if (this.options.smartDays && this.$month && this.$year) {
                var month = parseInt(this.$month.val(), 10);
                var year = parseInt(this.$year.val(), 10);

                if (!isNaN(month) && !isNaN(year)) {
                    daysCount = moment([year, month]).daysInMonth();
                }
            }

            for (i = 1; i <= daysCount; i++) {
                name = twoDigit ? this.leadZero(i) : i;
                items.push([i, name]);
            }
            return items;        
        },
        
        /*
        fill month
        */
        fillMonth: function() {
            var items = this.fillCommon('M'), name, i, 
                longNames = this.options.template.indexOf('MMMM') !== -1,
                shortNames = this.options.template.indexOf('MMM') !== -1,
                twoDigit = this.options.template.indexOf('MM') !== -1;
                
            for(i=0; i<=11; i++) {
                if(longNames) {
                    //see https://github.com/timrwood/momentjs.com/pull/36
                    name = moment().date(1).month(i).format('MMMM');
                } else if(shortNames) {
                    name = moment().date(1).month(i).format('MMM');
                } else if(twoDigit) {
                    name = this.leadZero(i+1);
                } else {
                    name = i+1;
                }
                items.push([i, name]);
            } 
            return items;
        },  
        
        /*
        fill year
        */
        fillYear: function() {
            var items = [], name, i, 
                longNames = this.options.template.indexOf('YYYY') !== -1;
           
            for(i=this.options.maxYear; i>=this.options.minYear; i--) {
                name = longNames ? i : (i+'').substring(2);
                items[this.options.yearDescending ? 'push' : 'unshift']([i, name]);
            }
            
            items = this.fillCommon('y').concat(items);
            
            return items;              
        },    
        
        /*
        fill hour
        */
        fillHour: function() {
            var items = this.fillCommon('h'), name, i,
                h12 = this.options.template.indexOf('h') !== -1,
                h24 = this.options.template.indexOf('H') !== -1,
                twoDigit = this.options.template.toLowerCase().indexOf('hh') !== -1,
                min = h12 ? 1 : 0, 
                max = h12 ? 12 : 23;
                
            for(i=min; i<=max; i++) {
                name = twoDigit ? this.leadZero(i) : i;
                items.push([i, name]);
            } 
            return items;                 
        },    
        
        /*
        fill minute
        */
        fillMinute: function() {
            var items = this.fillCommon('m'), name, i,
                twoDigit = this.options.template.indexOf('mm') !== -1;

            for(i=0; i<=59; i+= this.options.minuteStep) {
                name = twoDigit ? this.leadZero(i) : i;
                items.push([i, name]);
            }    
            return items;              
        },  
        
        /*
        fill second
        */
        fillSecond: function() {
            var items = this.fillCommon('s'), name, i,
                twoDigit = this.options.template.indexOf('ss') !== -1;

            for(i=0; i<=59; i+= this.options.secondStep) {
                name = twoDigit ? this.leadZero(i) : i;
                items.push([i, name]);
            }    
            return items;              
        },  
        
        /*
        fill ampm
        */
        fillAmpm: function() {
            var ampmL = this.options.template.indexOf('a') !== -1,
                ampmU = this.options.template.indexOf('A') !== -1,            
                items = [
                    ['am', ampmL ? 'am' : 'AM'],
                    ['pm', ampmL ? 'pm' : 'PM']
                ];
            return items;                              
        },                                       

        /*
         Returns current date value from combos. 
         If format not specified - `options.format` used.
         If format = `null` - Moment object returned.
        */
        getValue: function(format) {
            var dt, values = {}, 
                that = this,
                notSelected = false;
                
            //getting selected values    
            $.each(this.map, function(k, v) {
                if(k === 'ampm') {
                    return;
                }
                var def = k === 'day' ? 1 : 0;
                  
                values[k] = that['$'+k] ? parseInt(that['$'+k].val(), 10) : def; 
                
                if(isNaN(values[k])) {
                   notSelected = true;
                   return false; 
                }
            });
            
            //if at least one visible combo not selected - return empty string
            if(notSelected) {
               return '';
            }
            
            //convert hours 12h --> 24h 
            if(this.$ampm) {
                //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)
                if(values.hour === 12) {
                    values.hour = this.$ampm.val() === 'am' ? 0 : 12;                    
                } else {
                    values.hour = this.$ampm.val() === 'am' ? values.hour : values.hour+12;
                }
            }    
            
            dt = moment([values.year, values.month, values.day, values.hour, values.minute, values.second]);
            
            //highlight invalid date
            this.highlight(dt);
                              
            format = format === undefined ? this.options.format : format;
            if(format === null) {
               return dt.isValid() ? dt : null; 
            } else {
               return dt.isValid() ? dt.format(format) : ''; 
            }           
        },
        
        setValue: function(value) {
            if(!value) {
                return;
            }
            
            var dt = typeof value === 'string' ? moment(value, this.options.format) : moment(value),
                that = this,
                values = {};
            
            //function to find nearest value in select options
            function getNearest($select, value) {
                var delta = {};
                $select.children('option').each(function(i, opt){
                    var optValue = $(opt).attr('value'),
                    distance;

                    if(optValue === '') return;
                    distance = Math.abs(optValue - value); 
                    if(typeof delta.distance === 'undefined' || distance < delta.distance) {
                        delta = {value: optValue, distance: distance};
                    } 
                }); 
                return delta.value;
            }             
            
            if(dt.isValid()) {
                //read values from date object
                $.each(this.map, function(k, v) {
                    if(k === 'ampm') {
                       return; 
                    }
                    values[k] = dt[v[1]]();
                });
               
                if(this.$ampm) {
                    //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)
                    if(values.hour >= 12) {
                        values.ampm = 'pm';
                        if(values.hour > 12) {
                            values.hour -= 12;
                        }
                    } else {
                        values.ampm = 'am';
                        if(values.hour === 0) {
                            values.hour = 12;
                        }
                    } 
                }
               
                $.each(values, function(k, v) {
                    //call val() for each existing combo, e.g. this.$hour.val()
                    if(that['$'+k]) {
                       
                        if(k === 'minute' && that.options.minuteStep > 1 && that.options.roundTime) {
                           v = getNearest(that['$'+k], v);
                        }
                       
                        if(k === 'second' && that.options.secondStep > 1 && that.options.roundTime) {
                           v = getNearest(that['$'+k], v);
                        }                       
                       
                        that['$'+k].val(v);
                    }
                });

                // update days count
                if (this.options.smartDays) {
                    this.fillCombo('day');
                }
               
               this.$element.val(dt.format(this.options.format)).change();
            }
        },
        
        /*
         highlight combos if date is invalid
        */
        highlight: function(dt) {
            if(!dt.isValid()) {
                if(this.options.errorClass) {
                    this.$widget.addClass(this.options.errorClass);
                } else {
                    //store original border color
                    if(!this.borderColor) {
                        this.borderColor = this.$widget.find('select').css('border-color'); 
                    }
                    this.$widget.find('select').css('border-color', 'red');
                } 
            } else {
                if(this.options.errorClass) {
                    this.$widget.removeClass(this.options.errorClass);
                } else {
                    this.$widget.find('select').css('border-color', this.borderColor);
                }  
            }
        },
        
        leadZero: function(v) {
            return v <= 9 ? '0' + v : v; 
        },
        
        destroy: function() {
            this.$widget.remove();
            this.$element.removeData('combodate').show();
        }
        
        //todo: clear method        
    };

    $.fn.combodate = function ( option ) {
        var d, args = Array.apply(null, arguments);
        args.shift();

        //getValue returns date as string / object (not jQuery object)
        if(option === 'getValue' && this.length && (d = this.eq(0).data('combodate'))) {
          return d.getValue.apply(d, args);
        }        
        
        return this.each(function () {
            var $this = $(this),
            data = $this.data('combodate'),
            options = typeof option == 'object' && option;
            if (!data) {
                $this.data('combodate', (data = new Combodate(this, options)));
            }
            if (typeof option == 'string' && typeof data[option] == 'function') {
                data[option].apply(data, args);
            }
        });
    };  
    
    $.fn.combodate.defaults = {
         //in this format value stored in original input
        format: 'DD-MM-YYYY HH:mm',      
        //in this format items in dropdowns are displayed
        template: 'D / MMM / YYYY   H : mm',
        //initial value, can be `new Date()`    
        value: null,                       
        minYear: 1970,
        maxYear: new Date().getFullYear(),
        yearDescending: true,
        minuteStep: 5,
        secondStep: 1,
        firstItem: 'empty', //'name', 'empty', 'none'
        errorClass: null,
        roundTime: true, // whether to round minutes and seconds if step > 1
        smartDays: false // whether days in combo depend on selected month: 31, 30, 28
    };

}(window.jQuery));
/**
Combodate input - dropdown date and time picker.    
Based on [combodate](http://vitalets.github.com/combodate) plugin (included). To use it you should manually include [momentjs](http://momentjs.com).

    <script src="js/moment.min.js"></script>
   
Allows to input:

* only date
* only time 
* both date and time  

Please note, that format is taken from momentjs and **not compatible** with bootstrap-datepicker / jquery UI datepicker.  
Internally value stored as `momentjs` object. 

@class combodate
@extends abstractinput
@final
@since 1.4.0
@example
<a href="#" id="dob" data-type="combodate" data-pk="1" data-url="/post" data-value="1984-05-15" data-title="Select date"></a>
<script>
$(function(){
    $('#dob').editable({
        format: 'YYYY-MM-DD',    
        viewformat: 'DD.MM.YYYY',    
        template: 'D / MMMM / YYYY',    
        combodate: {
                minYear: 2000,
                maxYear: 2015,
                minuteStep: 1
           }
        }
    });
});
</script>
**/

/*global moment*/

(function ($) {
    "use strict";
    
    var Constructor = function (options) {
        this.init('combodate', options, Constructor.defaults);
        
        //by default viewformat equals to format
        if(!this.options.viewformat) {
            this.options.viewformat = this.options.format;
        }        
        
        //try parse combodate config defined as json string in data-combodate
        options.combodate = $.fn.editableutils.tryParseJson(options.combodate, true);

        //overriding combodate config (as by default jQuery extend() is not recursive)
        this.options.combodate = $.extend({}, Constructor.defaults.combodate, options.combodate, {
            format: this.options.format,
            template: this.options.template
        });
    };

    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);    
    
    $.extend(Constructor.prototype, {
        render: function () {
            this.$input.combodate(this.options.combodate);
                    
            if($.fn.editableform.engine === 'bs3') {
                this.$input.siblings().find('select').addClass('form-control');
            }
            
            if(this.options.inputclass) {
                this.$input.siblings().find('select').addClass(this.options.inputclass);
            }            
            //"clear" link
            /*
            if(this.options.clear) {
                this.$clear = $('<a href="#"></a>').html(this.options.clear).click($.proxy(function(e){
                    e.preventDefault();
                    e.stopPropagation();
                    this.clear();
                }, this));
                
                this.$tpl.parent().append($('<div class="editable-clear">').append(this.$clear));  
            } 
            */               
        },
        
        value2html: function(value, element) {
            var text = value ? value.format(this.options.viewformat) : '';
            //$(element).text(text);
            Constructor.superclass.value2html.call(this, text, element);  
        },

        html2value: function(html) {
            return html ? moment(html, this.options.viewformat) : null;
        },   
        
        value2str: function(value) {
            return value ? value.format(this.options.format) : '';
       }, 
       
       str2value: function(str) {
           return str ? moment(str, this.options.format) : null;
       }, 
       
       value2submit: function(value) {
           return this.value2str(value);
       },                    

       value2input: function(value) {
           this.$input.combodate('setValue', value);
       },
        
       input2value: function() { 
           return this.$input.combodate('getValue', null);
       },       
       
       activate: function() {
           this.$input.siblings('.combodate').find('select').eq(0).focus();
       },
       
       /*
       clear:  function() {
          this.$input.data('datepicker').date = null;
          this.$input.find('.active').removeClass('active');
       },
       */
       
       autosubmit: function() {
           
       }

    });
    
    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        /**
        @property tpl 
        @default <input type="text">
        **/         
        tpl:'<input type="text">',
        /**
        @property inputclass 
        @default null
        **/         
        inputclass: null,
        /**
        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>
        See list of tokens in [momentjs docs](http://momentjs.com/docs/#/parsing/string-format)  
        
        @property format 
        @type string
        @default YYYY-MM-DD
        **/         
        format:'YYYY-MM-DD',
        /**
        Format used for displaying date. Also applied when converting date from element's text on init.   
        If not specified equals to `format`.
        
        @property viewformat 
        @type string
        @default null
        **/          
        viewformat: null,        
        /**
        Template used for displaying dropdowns.
        
        @property template 
        @type string
        @default D / MMM / YYYY
        **/          
        template: 'D / MMM / YYYY',  
        /**
        Configuration of combodate.
        Full list of options: http://vitalets.github.com/combodate/#docs
        
        @property combodate 
        @type object
        @default null
        **/
        combodate: null
        
        /*
        (not implemented yet)
        Text shown as clear date button. 
        If <code>false</code> clear button will not be rendered.
        
        @property clear 
        @type boolean|string
        @default 'x clear'         
        */
        //clear: '&times; clear'
    });   

    $.fn.editabletypes.combodate = Constructor;

}(window.jQuery));

/*
Editableform based on Twitter Bootstrap 3
*/
(function ($) {
    "use strict";
    
    //store parent methods
    var pInitInput = $.fn.editableform.Constructor.prototype.initInput;
    
    $.extend($.fn.editableform.Constructor.prototype, {
        initTemplate: function() {
            this.$form = $($.fn.editableform.template); 
            this.$form.find('.control-group').addClass('form-group');
            this.$form.find('.editable-error-block').addClass('help-block');
        },
        initInput: function() {  
            pInitInput.apply(this);

            //for bs3 set default class `input-sm` to standard inputs
            var emptyInputClass = this.input.options.inputclass === null || this.input.options.inputclass === false;
            var defaultClass = 'input-sm';
            
            //bs3 add `form-control` class to standard inputs
            var stdtypes = 'text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs'.split(','); 
            if(~$.inArray(this.input.type, stdtypes)) {
                this.input.$input.addClass('form-control');
                if(emptyInputClass) {
                    this.input.options.inputclass = defaultClass;
                    this.input.$input.addClass(defaultClass);
                }
            }             
        
            //apply bs3 size class also to buttons (to fit size of control)
            var $btn = this.$form.find('.editable-buttons');
            var classes = emptyInputClass ? [defaultClass] : this.input.options.inputclass.split(' ');
            for(var i=0; i<classes.length; i++) {
                // `btn-sm` is default now
                /*
                if(classes[i].toLowerCase() === 'input-sm') { 
                    $btn.find('button').addClass('btn-sm');  
                }
                */
                if(classes[i].toLowerCase() === 'input-lg') {
                    $btn.find('button').removeClass('btn-sm').addClass('btn-lg'); 
                }
            }
        }
    });    
    
    //buttons
    $.fn.editableform.buttons = 
      '<button type="submit" class="btn btn-primary btn-sm editable-submit">'+
        '<i class="glyphicon glyphicon-ok"></i>'+
      '</button>'+
      '<button type="button" class="btn btn-default btn-sm editable-cancel">'+
        '<i class="glyphicon glyphicon-remove"></i>'+
      '</button>';         
    
    //error classes
    $.fn.editableform.errorGroupClass = 'has-error';
    $.fn.editableform.errorBlockClass = null;  
    //engine
    $.fn.editableform.engine = 'bs3';  
}(window.jQuery));
/**
* Editable Popover3 (for Bootstrap 3) 
* ---------------------
* requires bootstrap-popover.js
*/
(function ($) {
    "use strict";

    //extend methods
    $.extend($.fn.editableContainer.Popup.prototype, {
        containerName: 'popover',
        containerDataName: 'bs.popover',
        innerCss: '.popover-content',
        defaults: $.fn.popover.Constructor.DEFAULTS,

        initContainer: function(){
            $.extend(this.containerOptions, {
                trigger: 'manual',
                selector: false,
                content: ' ',
                template: this.defaults.template
            });
            
            //as template property is used in inputs, hide it from popover
            var t;
            if(this.$element.data('template')) {
               t = this.$element.data('template');
               this.$element.removeData('template');  
            } 
            
            this.call(this.containerOptions);
            
            if(t) {
               //restore data('template')
               this.$element.data('template', t); 
            }
        }, 
        
        /* show */
        innerShow: function () {
            this.call('show');                
        },  
        
        /* hide */
        innerHide: function () {
            this.call('hide');       
        }, 
        
        /* destroy */
        innerDestroy: function() {
            this.call('destroy');
        },                               
        
        setContainerOption: function(key, value) {
            this.container().options[key] = value; 
        },               

        /**
        * move popover to new position. This function mainly copied from bootstrap-popover.
        */
        /*jshint laxcomma: true, eqeqeq: false*/
        setPosition: function () { 

            (function() {
            /*    
                var $tip = this.tip()
                , inside
                , pos
                , actualWidth
                , actualHeight
                , placement
                , tp
                , tpt
                , tpb
                , tpl
                , tpr;

                placement = typeof this.options.placement === 'function' ?
                this.options.placement.call(this, $tip[0], this.$element[0]) :
                this.options.placement;

                inside = /in/.test(placement);
               
                $tip
              //  .detach()
              //vitalets: remove any placement class because otherwise they dont influence on re-positioning of visible popover
                .removeClass('top right bottom left')
                .css({ top: 0, left: 0, display: 'block' });
              //  .insertAfter(this.$element);
               
                pos = this.getPosition(inside);

                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;

                placement = inside ? placement.split(' ')[1] : placement;

                tpb = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};
                tpt = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};
                tpl = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};
                tpr = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};

                switch (placement) {
                    case 'bottom':
                        if ((tpb.top + actualHeight) > ($(window).scrollTop() + $(window).height())) {
                            if (tpt.top > $(window).scrollTop()) {
                                placement = 'top';
                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {
                                placement = 'right';
                            } else if (tpl.left > $(window).scrollLeft()) {
                                placement = 'left';
                            } else {
                                placement = 'right';
                            }
                        }
                        break;
                    case 'top':
                        if (tpt.top < $(window).scrollTop()) {
                            if ((tpb.top + actualHeight) < ($(window).scrollTop() + $(window).height())) {
                                placement = 'bottom';
                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {
                                placement = 'right';
                            } else if (tpl.left > $(window).scrollLeft()) {
                                placement = 'left';
                            } else {
                                placement = 'right';
                            }
                        }
                        break;
                    case 'left':
                        if (tpl.left < $(window).scrollLeft()) {
                            if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {
                                placement = 'right';
                            } else if (tpt.top > $(window).scrollTop()) {
                                placement = 'top';
                            } else if (tpt.top > $(window).scrollTop()) {
                                placement = 'bottom';
                            } else {
                                placement = 'right';
                            }
                        }
                        break;
                    case 'right':
                        if ((tpr.left + actualWidth) > ($(window).scrollLeft() + $(window).width())) {
                            if (tpl.left > $(window).scrollLeft()) {
                                placement = 'left';
                            } else if (tpt.top > $(window).scrollTop()) {
                                placement = 'top';
                            } else if (tpt.top > $(window).scrollTop()) {
                                placement = 'bottom';
                            }
                        }
                        break;
                }

                switch (placement) {
                    case 'bottom':
                        tp = tpb;
                        break;
                    case 'top':
                        tp = tpt;
                        break;
                    case 'left':
                        tp = tpl;
                        break;
                    case 'right':
                        tp = tpr;
                        break;
                }

                $tip
                .offset(tp)
                .addClass(placement)
                .addClass('in');
           */
                     
           
            var $tip = this.tip();
            
            var placement = typeof this.options.placement == 'function' ?
                this.options.placement.call(this, $tip[0], this.$element[0]) :
                this.options.placement;            

            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace) {
                placement = placement.replace(autoToken, '') || 'top';
            }
            
            
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;

            if (autoPlace) {
                var $parent = this.$element.parent();

                var orgPlacement = placement;
                var docScroll    = document.documentElement.scrollTop || document.body.scrollTop;
                var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth();
                var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight();
                var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left;

                placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
                            placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
                            placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
                            placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
                            placement;

                $tip
                  .removeClass(orgPlacement)
                  .addClass(placement);
            }


            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

            this.applyPlacement(calculatedOffset, placement);            
                     
                
            }).call(this.container());
          /*jshint laxcomma: false, eqeqeq: true*/  
        }            
    });

}(window.jQuery));

/* =========================================================
 * bootstrap-datepicker.js
 * http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function( $ ) {

	function UTCDate(){
		return new Date(Date.UTC.apply(Date, arguments));
	}
	function UTCToday(){
		var today = new Date();
		return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
	}

	// Picker object

	var Datepicker = function(element, options) {
		var that = this;

		this._process_options(options);

		this.element = $(element);
		this.isInline = false;
		this.isInput = this.element.is('input');
		this.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;
		this.hasInput = this.component && this.element.find('input').length;
		if(this.component && this.component.length === 0)
			this.component = false;

		this.picker = $(DPGlobal.template);
		this._buildEvents();
		this._attachEvents();

		if(this.isInline) {
			this.picker.addClass('datepicker-inline').appendTo(this.element);
		} else {
			this.picker.addClass('datepicker-dropdown dropdown-menu');
		}

		if (this.o.rtl){
			this.picker.addClass('datepicker-rtl');
			this.picker.find('.prev i, .next i')
						.toggleClass('icon-arrow-left icon-arrow-right');
		}


		this.viewMode = this.o.startView;

		if (this.o.calendarWeeks)
			this.picker.find('tfoot th.today')
						.attr('colspan', function(i, val){
							return parseInt(val) + 1;
						});

		this._allow_update = false;

		this.setStartDate(this.o.startDate);
		this.setEndDate(this.o.endDate);
		this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);

		this.fillDow();
		this.fillMonths();

		this._allow_update = true;

		this.update();
		this.showMode();

		if(this.isInline) {
			this.show();
		}
	};

	Datepicker.prototype = {
		constructor: Datepicker,

		_process_options: function(opts){
			// Store raw options for reference
			this._o = $.extend({}, this._o, opts);
			// Processed options
			var o = this.o = $.extend({}, this._o);

			// Check if "de-DE" style date is available, if not language should
			// fallback to 2 letter code eg "de"
			var lang = o.language;
			if (!dates[lang]) {
				lang = lang.split('-')[0];
				if (!dates[lang])
					lang = defaults.language;
			}
			o.language = lang;

			switch(o.startView){
				case 2:
				case 'decade':
					o.startView = 2;
					break;
				case 1:
				case 'year':
					o.startView = 1;
					break;
				default:
					o.startView = 0;
			}

			switch (o.minViewMode) {
				case 1:
				case 'months':
					o.minViewMode = 1;
					break;
				case 2:
				case 'years':
					o.minViewMode = 2;
					break;
				default:
					o.minViewMode = 0;
			}

			o.startView = Math.max(o.startView, o.minViewMode);

			o.weekStart %= 7;
			o.weekEnd = ((o.weekStart + 6) % 7);

			var format = DPGlobal.parseFormat(o.format)
			if (o.startDate !== -Infinity) {
				o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);
			}
			if (o.endDate !== Infinity) {
				o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);
			}

			o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];
			if (!$.isArray(o.daysOfWeekDisabled))
				o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
			o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {
				return parseInt(d, 10);
			});
		},
		_events: [],
		_secondaryEvents: [],
		_applyEvents: function(evs){
			for (var i=0, el, ev; i<evs.length; i++){
				el = evs[i][0];
				ev = evs[i][1];
				el.on(ev);
			}
		},
		_unapplyEvents: function(evs){
			for (var i=0, el, ev; i<evs.length; i++){
				el = evs[i][0];
				ev = evs[i][1];
				el.off(ev);
			}
		},
		_buildEvents: function(){
			if (this.isInput) { // single input
				this._events = [
					[this.element, {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			}
			else if (this.component && this.hasInput){ // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			else if (this.element.is('div')) {  // inline datepicker
				this.isInline = true;
			}
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}

			this._secondaryEvents = [
				[this.picker, {
					click: $.proxy(this.click, this)
				}],
				[$(window), {
					resize: $.proxy(this.place, this)
				}],
				[$(document), {
					mousedown: $.proxy(function (e) {
						// Clicked outside the datepicker, hide it
						if (!(
							this.element.is(e.target) ||
							this.element.find(e.target).size() ||
							this.picker.is(e.target) ||
							this.picker.find(e.target).size()
						)) {
							this.hide();
						}
					}, this)
				}]
			];
		},
		_attachEvents: function(){
			this._detachEvents();
			this._applyEvents(this._events);
		},
		_detachEvents: function(){
			this._unapplyEvents(this._events);
		},
		_attachSecondaryEvents: function(){
			this._detachSecondaryEvents();
			this._applyEvents(this._secondaryEvents);
		},
		_detachSecondaryEvents: function(){
			this._unapplyEvents(this._secondaryEvents);
		},
		_trigger: function(event, altdate){
			var date = altdate || this.date,
				local_date = new Date(date.getTime() + (date.getTimezoneOffset()*60000));

			this.element.trigger({
				type: event,
				date: local_date,
				format: $.proxy(function(altformat){
					var format = altformat || this.o.format;
					return DPGlobal.formatDate(date, format, this.o.language);
				}, this)
			});
		},

		show: function(e) {
			if (!this.isInline)
				this.picker.appendTo('body');
			this.picker.show();
			this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
			this.place();
			this._attachSecondaryEvents();
			if (e) {
				e.preventDefault();
			}
			this._trigger('show');
		},

		hide: function(e){
			if(this.isInline) return;
			if (!this.picker.is(':visible')) return;
			this.picker.hide().detach();
			this._detachSecondaryEvents();
			this.viewMode = this.o.startView;
			this.showMode();

			if (
				this.o.forceParse &&
				(
					this.isInput && this.element.val() ||
					this.hasInput && this.element.find('input').val()
				)
			)
				this.setValue();
			this._trigger('hide');
		},

		remove: function() {
			this.hide();
			this._detachEvents();
			this._detachSecondaryEvents();
			this.picker.remove();
			delete this.element.data().datepicker;
			if (!this.isInput) {
				delete this.element.data().date;
			}
		},

		getDate: function() {
			var d = this.getUTCDate();
			return new Date(d.getTime() + (d.getTimezoneOffset()*60000));
		},

		getUTCDate: function() {
			return this.date;
		},

		setDate: function(d) {
			this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset()*60000)));
		},

		setUTCDate: function(d) {
			this.date = d;
			this.setValue();
		},

		setValue: function() {
			var formatted = this.getFormattedDate();
			if (!this.isInput) {
				if (this.component){
					this.element.find('input').val(formatted);
				}
			} else {
				this.element.val(formatted);
			}
		},

		getFormattedDate: function(format) {
			if (format === undefined)
				format = this.o.format;
			return DPGlobal.formatDate(this.date, format, this.o.language);
		},

		setStartDate: function(startDate){
			this._process_options({startDate: startDate});
			this.update();
			this.updateNavArrows();
		},

		setEndDate: function(endDate){
			this._process_options({endDate: endDate});
			this.update();
			this.updateNavArrows();
		},

		setDaysOfWeekDisabled: function(daysOfWeekDisabled){
			this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});
			this.update();
			this.updateNavArrows();
		},

		place: function(){
						if(this.isInline) return;
			var zIndex = parseInt(this.element.parents().filter(function() {
							return $(this).css('z-index') != 'auto';
						}).first().css('z-index'))+10;
			var offset = this.component ? this.component.parent().offset() : this.element.offset();
			var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true);
			this.picker.css({
				top: offset.top + height,
				left: offset.left,
				zIndex: zIndex
			});
		},

		_allow_update: true,
		update: function(){
			if (!this._allow_update) return;

			var date, fromArgs = false;
			if(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
				date = arguments[0];
				fromArgs = true;
			} else {
				date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
				delete this.element.data().date;
			}

			this.date = DPGlobal.parseDate(date, this.o.format, this.o.language);

			if(fromArgs) this.setValue();

			if (this.date < this.o.startDate) {
				this.viewDate = new Date(this.o.startDate);
			} else if (this.date > this.o.endDate) {
				this.viewDate = new Date(this.o.endDate);
			} else {
				this.viewDate = new Date(this.date);
			}
			this.fill();
		},

		fillDow: function(){
			var dowCnt = this.o.weekStart,
			html = '<tr>';
			if(this.o.calendarWeeks){
				var cell = '<th class="cw">&nbsp;</th>';
				html += cell;
				this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);
			}
			while (dowCnt < this.o.weekStart + 7) {
				html += '<th class="dow">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';
			}
			html += '</tr>';
			this.picker.find('.datepicker-days thead').append(html);
		},

		fillMonths: function(){
			var html = '',
			i = 0;
			while (i < 12) {
				html += '<span class="month">'+dates[this.o.language].monthsShort[i++]+'</span>';
			}
			this.picker.find('.datepicker-months td').html(html);
		},

		setRange: function(range){
			if (!range || !range.length)
				delete this.range;
			else
				this.range = $.map(range, function(d){ return d.valueOf(); });
			this.fill();
		},

		getClassNames: function(date){
			var cls = [],
				year = this.viewDate.getUTCFullYear(),
				month = this.viewDate.getUTCMonth(),
				currentDate = this.date.valueOf(),
				today = new Date();
			if (date.getUTCFullYear() < year || (date.getUTCFullYear() == year && date.getUTCMonth() < month)) {
				cls.push('old');
			} else if (date.getUTCFullYear() > year || (date.getUTCFullYear() == year && date.getUTCMonth() > month)) {
				cls.push('new');
			}
			// Compare internal UTC date with local today, not UTC today
			if (this.o.todayHighlight &&
				date.getUTCFullYear() == today.getFullYear() &&
				date.getUTCMonth() == today.getMonth() &&
				date.getUTCDate() == today.getDate()) {
				cls.push('today');
			}
			if (currentDate && date.valueOf() == currentDate) {
				cls.push('active');
			}
			if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||
				$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {
				cls.push('disabled');
			}
			if (this.range){
				if (date > this.range[0] && date < this.range[this.range.length-1]){
					cls.push('range');
				}
				if ($.inArray(date.valueOf(), this.range) != -1){
					cls.push('selected');
				}
			}
			return cls;
		},

		fill: function() {
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
				endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
				endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
				currentDate = this.date && this.date.valueOf(),
				tooltip;
			this.picker.find('.datepicker-days thead th.datepicker-switch')
						.text(dates[this.o.language].months[month]+' '+year);
			this.picker.find('tfoot th.today')
						.text(dates[this.o.language].today)
						.toggle(this.o.todayBtn !== false);
			this.picker.find('tfoot th.clear')
						.text(dates[this.o.language].clear)
						.toggle(this.o.clearBtn !== false);
			this.updateNavArrows();
			this.fillMonths();
			var prevMonth = UTCDate(year, month-1, 28,0,0,0,0),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
			var nextMonth = new Date(prevMonth);
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while(prevMonth.valueOf() < nextMonth) {
				if (prevMonth.getUTCDay() == this.o.weekStart) {
					html.push('<tr>');
					if(this.o.calendarWeeks){
						// ISO 8601: First week contains first thursday.
						// ISO also states week starts on Monday, but we can be more abstract here.
						var
							// Start of current week: based on weekstart/current date
							ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
							// Thursday of this week
							th = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
							// First Thursday of year, year from thursday
							yth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),
							// Calendar week: ms between thursdays, div ms per day, div 7 days
							calWeek =  (th - yth) / 864e5 / 7 + 1;
						html.push('<td class="cw">'+ calWeek +'</td>');

					}
				}
				clsName = this.getClassNames(prevMonth);
				clsName.push('day');

				var before = this.o.beforeShowDay(prevMonth);
				if (before === undefined)
					before = {};
				else if (typeof(before) === 'boolean')
					before = {enabled: before};
				else if (typeof(before) === 'string')
					before = {classes: before};
				if (before.enabled === false)
					clsName.push('disabled');
				if (before.classes)
					clsName = clsName.concat(before.classes.split(/\s+/));
				if (before.tooltip)
					tooltip = before.tooltip;

				clsName = $.unique(clsName);
				html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + '>'+prevMonth.getUTCDate() + '</td>');
				if (prevMonth.getUTCDay() == this.o.weekEnd) {
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate()+1);
			}
			this.picker.find('.datepicker-days tbody').empty().append(html.join(''));
			var currentYear = this.date && this.date.getUTCFullYear();

			var months = this.picker.find('.datepicker-months')
						.find('th:eq(1)')
							.text(year)
							.end()
						.find('span').removeClass('active');
			if (currentYear && currentYear == year) {
				months.eq(this.date.getUTCMonth()).addClass('active');
			}
			if (year < startYear || year > endYear) {
				months.addClass('disabled');
			}
			if (year == startYear) {
				months.slice(0, startMonth).addClass('disabled');
			}
			if (year == endYear) {
				months.slice(endMonth+1).addClass('disabled');
			}

			html = '';
			year = parseInt(year/10, 10) * 10;
			var yearCont = this.picker.find('.datepicker-years')
								.find('th:eq(1)')
									.text(year + '-' + (year + 9))
									.end()
								.find('td');
			year -= 1;
			for (var i = -1; i < 11; i++) {
				html += '<span class="year'+(i == -1 ? ' old' : i == 10 ? ' new' : '')+(currentYear == year ? ' active' : '')+(year < startYear || year > endYear ? ' disabled' : '')+'">'+year+'</span>';
				year += 1;
			}
			yearCont.html(html);
		},

		updateNavArrows: function() {
			if (!this._allow_update) return;

			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth();
			switch (this.viewMode) {
				case 0:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 1:
				case 2:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
			}
		},

		click: function(e) {
			e.preventDefault();
			var target = $(e.target).closest('span, td, th');
			if (target.length == 1) {
				switch(target[0].nodeName.toLowerCase()) {
					case 'th':
						switch(target[0].className) {
							case 'datepicker-switch':
								this.showMode(1);
								break;
							case 'prev':
							case 'next':
								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
								switch(this.viewMode){
									case 0:
										this.viewDate = this.moveMonth(this.viewDate, dir);
										break;
									case 1:
									case 2:
										this.viewDate = this.moveYear(this.viewDate, dir);
										break;
								}
								this.fill();
								break;
							case 'today':
								var date = new Date();
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

								this.showMode(-2);
								var which = this.o.todayBtn == 'linked' ? null : 'view';
								this._setDate(date, which);
								break;
							case 'clear':
								var element;
								if (this.isInput)
									element = this.element;
								else if (this.component)
									element = this.element.find('input');
								if (element)
									element.val("").change();
								this._trigger('changeDate');
								this.update();
								if (this.o.autoclose)
									this.hide();
								break;
						}
						break;
					case 'span':
						if (!target.is('.disabled')) {
							this.viewDate.setUTCDate(1);
							if (target.is('.month')) {
								var day = 1;
								var month = target.parent().find('span').index(target);
								var year = this.viewDate.getUTCFullYear();
								this.viewDate.setUTCMonth(month);
								this._trigger('changeMonth', this.viewDate);
								if (this.o.minViewMode === 1) {
									this._setDate(UTCDate(year, month, day,0,0,0,0));
								}
							} else {
								var year = parseInt(target.text(), 10)||0;
								var day = 1;
								var month = 0;
								this.viewDate.setUTCFullYear(year);
								this._trigger('changeYear', this.viewDate);
								if (this.o.minViewMode === 2) {
									this._setDate(UTCDate(year, month, day,0,0,0,0));
								}
							}
							this.showMode(-1);
							this.fill();
						}
						break;
					case 'td':
						if (target.is('.day') && !target.is('.disabled')){
							var day = parseInt(target.text(), 10)||1;
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth();
							if (target.is('.old')) {
								if (month === 0) {
									month = 11;
									year -= 1;
								} else {
									month -= 1;
								}
							} else if (target.is('.new')) {
								if (month == 11) {
									month = 0;
									year += 1;
								} else {
									month += 1;
								}
							}
							this._setDate(UTCDate(year, month, day,0,0,0,0));
						}
						break;
				}
			}
		},

		_setDate: function(date, which){
			if (!which || which == 'date')
				this.date = new Date(date);
			if (!which || which  == 'view')
				this.viewDate = new Date(date);
			this.fill();
			this.setValue();
			this._trigger('changeDate');
			var element;
			if (this.isInput) {
				element = this.element;
			} else if (this.component){
				element = this.element.find('input');
			}
			if (element) {
				element.change();
				if (this.o.autoclose && (!which || which == 'date')) {
					this.hide();
				}
			}
		},

		moveMonth: function(date, dir){
			if (!dir) return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if (mag == 1){
				test = dir == -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					? function(){ return new_date.getUTCMonth() == month; }
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					: function(){ return new_date.getUTCMonth() != new_month; };
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if (new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			} else {
				// For magnitudes >1, move one month at a time...
				for (var i=0; i<mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function(){ return new_month != new_date.getUTCMonth(); };
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while (test()){
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function(date, dir){
			return this.moveMonth(date, dir*12);
		},

		dateWithinRange: function(date){
			return date >= this.o.startDate && date <= this.o.endDate;
		},

		keydown: function(e){
			if (this.picker.is(':not(:visible)')){
				if (e.keyCode == 27) // allow escape to hide and re-show picker
					this.show();
				return;
			}
			var dateChanged = false,
				dir, day, month,
				newDate, newViewDate;
			switch(e.keyCode){
				case 27: // escape
					this.hide();
					e.preventDefault();
					break;
				case 37: // left
				case 39: // right
					if (!this.o.keyboardNavigation) break;
					dir = e.keyCode == 37 ? -1 : 1;
					if (e.ctrlKey){
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (e.shiftKey){
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else {
						newDate = new Date(this.date);
						newDate.setUTCDate(this.date.getUTCDate() + dir);
						newViewDate = new Date(this.viewDate);
						newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);
					}
					if (this.dateWithinRange(newDate)){
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 38: // up
				case 40: // down
					if (!this.o.keyboardNavigation) break;
					dir = e.keyCode == 38 ? -1 : 1;
					if (e.ctrlKey){
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (e.shiftKey){
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else {
						newDate = new Date(this.date);
						newDate.setUTCDate(this.date.getUTCDate() + dir * 7);
						newViewDate = new Date(this.viewDate);
						newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);
					}
					if (this.dateWithinRange(newDate)){
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 13: // enter
					this.hide();
					e.preventDefault();
					break;
				case 9: // tab
					this.hide();
					break;
			}
			if (dateChanged){
				this._trigger('changeDate');
				var element;
				if (this.isInput) {
					element = this.element;
				} else if (this.component){
					element = this.element.find('input');
				}
				if (element) {
					element.change();
				}
			}
		},

		showMode: function(dir) {
			if (dir) {
				this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));
			}
			/*
				vitalets: fixing bug of very special conditions:
				jquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.
				Method show() does not set display css correctly and datepicker is not shown.
				Changed to .css('display', 'block') solve the problem.
				See https://github.com/vitalets/x-editable/issues/37

				In jquery 1.7.2+ everything works fine.
			*/
			//this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
			this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
			this.updateNavArrows();
		}
	};

	var DateRangePicker = function(element, options){
		this.element = $(element);
		this.inputs = $.map(options.inputs, function(i){ return i.jquery ? i[0] : i; });
		delete options.inputs;

		$(this.inputs)
			.datepicker(options)
			.bind('changeDate', $.proxy(this.dateUpdated, this));

		this.pickers = $.map(this.inputs, function(i){ return $(i).data('datepicker'); });
		this.updateDates();
	};
	DateRangePicker.prototype = {
		updateDates: function(){
			this.dates = $.map(this.pickers, function(i){ return i.date; });
			this.updateRanges();
		},
		updateRanges: function(){
			var range = $.map(this.dates, function(d){ return d.valueOf(); });
			$.each(this.pickers, function(i, p){
				p.setRange(range);
			});
		},
		dateUpdated: function(e){
			var dp = $(e.target).data('datepicker'),
				new_date = dp.getUTCDate(),
				i = $.inArray(e.target, this.inputs),
				l = this.inputs.length;
			if (i == -1) return;

			if (new_date < this.dates[i]){
				// Date being moved earlier/left
				while (i>=0 && new_date < this.dates[i]){
					this.pickers[i--].setUTCDate(new_date);
				}
			}
			else if (new_date > this.dates[i]){
				// Date being moved later/right
				while (i<l && new_date > this.dates[i]){
					this.pickers[i++].setUTCDate(new_date);
				}
			}
			this.updateDates();
		},
		remove: function(){
			$.map(this.pickers, function(p){ p.remove(); });
			delete this.element.data().datepicker;
		}
	};

	function opts_from_el(el, prefix){
		// Derive options from element data-attrs
		var data = $(el).data(),
			out = {}, inkey,
			replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),
			prefix = new RegExp('^' + prefix.toLowerCase());
		for (var key in data)
			if (prefix.test(key)){
				inkey = key.replace(replace, function(_,a){ return a.toLowerCase(); });
				out[inkey] = data[key];
			}
		return out;
	}

	function opts_from_locale(lang){
		// Derive options from locale plugins
		var out = {};
		// Check if "de-DE" style date is available, if not language should
		// fallback to 2 letter code eg "de"
		if (!dates[lang]) {
			lang = lang.split('-')[0]
			if (!dates[lang])
				return;
		}
		var d = dates[lang];
		$.each(locale_opts, function(i,k){
			if (k in d)
				out[k] = d[k];
		});
		return out;
	}

	var old = $.fn.datepicker;
	var datepicker = $.fn.datepicker = function ( option ) {
		var args = Array.apply(null, arguments);
		args.shift();
		var internal_return,
			this_return;
		this.each(function () {
			var $this = $(this),
				data = $this.data('datepicker'),
				options = typeof option == 'object' && option;
			if (!data) {
				var elopts = opts_from_el(this, 'date'),
					// Preliminary otions
					xopts = $.extend({}, defaults, elopts, options),
					locopts = opts_from_locale(xopts.language),
					// Options priority: js args, data-attrs, locales, defaults
					opts = $.extend({}, defaults, locopts, elopts, options);
				if ($this.is('.input-daterange') || opts.inputs){
					var ropts = {
						inputs: opts.inputs || $this.find('input').toArray()
					};
					$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));
				}
				else{
					$this.data('datepicker', (data = new Datepicker(this, opts)));
				}
			}
			if (typeof option == 'string' && typeof data[option] == 'function') {
				internal_return = data[option].apply(data, args);
				if (internal_return !== undefined)
					return false;
			}
		});
		if (internal_return !== undefined)
			return internal_return;
		else
			return this;
	};

	var defaults = $.fn.datepicker.defaults = {
		autoclose: false,
		beforeShowDay: $.noop,
		calendarWeeks: false,
		clearBtn: false,
		daysOfWeekDisabled: [],
		endDate: Infinity,
		forceParse: true,
		format: 'mm/dd/yyyy',
		keyboardNavigation: true,
		language: 'en',
		minViewMode: 0,
		rtl: false,
		startDate: -Infinity,
		startView: 0,
		todayBtn: false,
		todayHighlight: false,
		weekStart: 0
	};
	var locale_opts = $.fn.datepicker.locale_opts = [
		'format',
		'rtl',
		'weekStart'
	];
	$.fn.datepicker.Constructor = Datepicker;
	var dates = $.fn.datepicker.dates = {
		en: {
			days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
			daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
			daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
			months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			today: "Today",
			clear: "Clear"
		}
	};

	var DPGlobal = {
		modes: [
			{
				clsName: 'days',
				navFnc: 'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc: 'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc: 'FullYear',
				navStep: 10
		}],
		isLeapYear: function (year) {
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
		},
		getDaysInMonth: function (year, month) {
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
		},
		validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
		nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
		parseFormat: function(format){
			// IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts, '\0').split('\0'),
				parts = format.match(this.validParts);
			if (!separators || !separators.length || !parts || parts.length === 0){
				throw new Error("Invalid date format.");
			}
			return {separators: separators, parts: parts};
		},
		parseDate: function(date, format, language) {
			if (date instanceof Date) return date;
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)) {
				var part_re = /([\-+]\d+)([dmwy])/,
					parts = date.match(/([\-+]\d+)([dmwy])/g),
					part, dir;
				date = new Date();
				for (var i=0; i<parts.length; i++) {
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					switch(part[2]){
						case 'd':
							date.setUTCDate(date.getUTCDate() + dir);
							break;
						case 'm':
							date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);
							break;
						case 'w':
							date.setUTCDate(date.getUTCDate() + dir * 7);
							break;
						case 'y':
							date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);
							break;
					}
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);
			}
			var parts = date && date.match(this.nonpunctuation) || [],
				date = new Date(),
				parsed = {},
				setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
				setters_map = {
					yyyy: function(d,v){ return d.setUTCFullYear(v); },
					yy: function(d,v){ return d.setUTCFullYear(2000+v); },
					m: function(d,v){
						v -= 1;
						while (v<0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while (d.getUTCMonth() != v)
							d.setUTCDate(d.getUTCDate()-1);
						return d;
					},
					d: function(d,v){ return d.setUTCDate(v); }
				},
				val, filtered, part;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
			var fparts = format.parts.slice();
			// Remove noop parts
			if (parts.length != fparts.length) {
				fparts = $(fparts).filter(function(i,p){
					return $.inArray(p, setters_order) !== -1;
				}).toArray();
			}
			// Process remainder
			if (parts.length == fparts.length) {
				for (var i=0, cnt = fparts.length; i < cnt; i++) {
					val = parseInt(parts[i], 10);
					part = fparts[i];
					if (isNaN(val)) {
						switch(part) {
							case 'MM':
								filtered = $(dates[language].months).filter(function(){
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(function(){
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
						}
					}
					parsed[part] = val;
				}
				for (var i=0, s; i<setters_order.length; i++){
					s = setters_order[i];
					if (s in parsed && !isNaN(parsed[s]))
						setters_map[s](date, parsed[s]);
				}
			}
			return date;
		},
		formatDate: function(date, format, language){
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			var val = {
				d: date.getUTCDate(),
				D: dates[language].daysShort[date.getUTCDay()],
				DD: dates[language].days[date.getUTCDay()],
				m: date.getUTCMonth() + 1,
				M: dates[language].monthsShort[date.getUTCMonth()],
				MM: dates[language].months[date.getUTCMonth()],
				yy: date.getUTCFullYear().toString().substring(2),
				yyyy: date.getUTCFullYear()
			};
			val.dd = (val.d < 10 ? '0' : '') + val.d;
			val.mm = (val.m < 10 ? '0' : '') + val.m;
			var date = [],
				seps = $.extend([], format.separators);
			for (var i=0, cnt = format.parts.length; i <= cnt; i++) {
				if (seps.length)
					date.push(seps.shift());
				date.push(val[format.parts[i]]);
			}
			return date.join('');
		},
		headTemplate: '<thead>'+
							'<tr>'+
								'<th class="prev"><i class="icon-arrow-left"/></th>'+
								'<th colspan="5" class="datepicker-switch"></th>'+
								'<th class="next"><i class="icon-arrow-right"/></th>'+
							'</tr>'+
						'</thead>',
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
	};
	DPGlobal.template = '<div class="datepicker">'+
							'<div class="datepicker-days">'+
								'<table class=" table-condensed">'+
									DPGlobal.headTemplate+
									'<tbody></tbody>'+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-months">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-years">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
						'</div>';

	$.fn.datepicker.DPGlobal = DPGlobal;


	/* DATEPICKER NO CONFLICT
	* =================== */

	$.fn.datepicker.noConflict = function(){
		$.fn.datepicker = old;
		return this;
	};


	/* DATEPICKER DATA-API
	* ================== */

	$(document).on(
		'focus.datepicker.data-api click.datepicker.data-api',
		'[data-provide="datepicker"]',
		function(e){
			var $this = $(this);
			if ($this.data('datepicker')) return;
			e.preventDefault();
			// component click requires us to explicitly show it
			datepicker.call($this, 'show');
		}
	);
	$(function(){
		//$('[data-provide="datepicker-inline"]').datepicker();
        //vit: changed to support noConflict()
        datepicker.call($('[data-provide="datepicker-inline"]'));
	});

}( window.jQuery ));

/**
Bootstrap-datepicker.  
Description and examples: https://github.com/eternicode/bootstrap-datepicker.  
For **i18n** you should include js file from here: https://github.com/eternicode/bootstrap-datepicker/tree/master/js/locales
and set `language` option.  
Since 1.4.0 date has different appearance in **popup** and **inline** modes. 

@class date
@extends abstractinput
@final
@example
<a href="#" id="dob" data-type="date" data-pk="1" data-url="/post" data-title="Select date">15/05/1984</a>
<script>
$(function(){
    $('#dob').editable({
        format: 'yyyy-mm-dd',    
        viewformat: 'dd/mm/yyyy',    
        datepicker: {
                weekStart: 1
           }
        }
    });
});
</script>
**/
(function ($) {
    "use strict";
    
    //store bootstrap-datepicker as bdateicker to exclude conflict with jQuery UI one
    $.fn.bdatepicker = $.fn.datepicker.noConflict();
    if(!$.fn.datepicker) { //if there were no other datepickers, keep also original name
        $.fn.datepicker = $.fn.bdatepicker;    
    }    
    
    var Date = function (options) {
        this.init('date', options, Date.defaults);
        this.initPicker(options, Date.defaults);
    };

    $.fn.editableutils.inherit(Date, $.fn.editabletypes.abstractinput);    
    
    $.extend(Date.prototype, {
        initPicker: function(options, defaults) {
            //'format' is set directly from settings or data-* attributes

            //by default viewformat equals to format
            if(!this.options.viewformat) {
                this.options.viewformat = this.options.format;
            }
            
            //try parse datepicker config defined as json string in data-datepicker
            options.datepicker = $.fn.editableutils.tryParseJson(options.datepicker, true);
            
            //overriding datepicker config (as by default jQuery extend() is not recursive)
            //since 1.4 datepicker internally uses viewformat instead of format. Format is for submit only
            this.options.datepicker = $.extend({}, defaults.datepicker, options.datepicker, {
                format: this.options.viewformat
            });
            
            //language
            this.options.datepicker.language = this.options.datepicker.language || 'en'; 

            //store DPglobal
            this.dpg = $.fn.bdatepicker.DPGlobal; 

            //store parsed formats
            this.parsedFormat = this.dpg.parseFormat(this.options.format);
            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat);            
        },
        
        render: function () {
            this.$input.bdatepicker(this.options.datepicker);
            
            //"clear" link
            if(this.options.clear) {
                this.$clear = $('<a href="#"></a>').html(this.options.clear).click($.proxy(function(e){
                    e.preventDefault();
                    e.stopPropagation();
                    this.clear();
                }, this));
                
                this.$tpl.parent().append($('<div class="editable-clear">').append(this.$clear));  
            }                
        },
        
        value2html: function(value, element) {
           var text = value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '';
           Date.superclass.value2html.call(this, text, element); 
        },

        html2value: function(html) {
            return this.parseDate(html, this.parsedViewFormat);
        },   

        value2str: function(value) {
            return value ? this.dpg.formatDate(value, this.parsedFormat, this.options.datepicker.language) : '';
        }, 

        str2value: function(str) {
            return this.parseDate(str, this.parsedFormat);
        }, 

        value2submit: function(value) {
            return this.value2str(value);
        },                    

        value2input: function(value) {
            this.$input.bdatepicker('update', value);
        },

        input2value: function() { 
            return this.$input.data('datepicker').date;
        },       

        activate: function() {
        },

        clear:  function() {
            this.$input.data('datepicker').date = null;
            this.$input.find('.active').removeClass('active');
            if(!this.options.showbuttons) {
                this.$input.closest('form').submit(); 
            }
        },

        autosubmit: function() {
            this.$input.on('mouseup', '.day', function(e){
                if($(e.currentTarget).is('.old') || $(e.currentTarget).is('.new')) {
                    return;
                }
                var $form = $(this).closest('form');
                setTimeout(function() {
                    $form.submit();
                }, 200);
            });
           //changedate is not suitable as it triggered when showing datepicker. see #149
           /*
           this.$input.on('changeDate', function(e){
               var $form = $(this).closest('form');
               setTimeout(function() {
                   $form.submit();
               }, 200);
           });
           */
       },
       
       /*
        For incorrect date bootstrap-datepicker returns current date that is not suitable
        for datefield.
        This function returns null for incorrect date.  
       */
       parseDate: function(str, format) {
           var date = null, formattedBack;
           if(str) {
               date = this.dpg.parseDate(str, format, this.options.datepicker.language);
               if(typeof str === 'string') {
                   formattedBack = this.dpg.formatDate(date, format, this.options.datepicker.language);
                   if(str !== formattedBack) {
                       date = null;
                   }
               }
           }
           return date;
       }

    });

    Date.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        /**
        @property tpl 
        @default <div></div>
        **/         
        tpl:'<div class="editable-date well"></div>',
        /**
        @property inputclass 
        @default null
        **/
        inputclass: null,
        /**
        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>
        Possible tokens are: <code>d, dd, m, mm, yy, yyyy</code>  

        @property format 
        @type string
        @default yyyy-mm-dd
        **/
        format:'yyyy-mm-dd',
        /**
        Format used for displaying date. Also applied when converting date from element's text on init.   
        If not specified equals to <code>format</code>

        @property viewformat 
        @type string
        @default null
        **/
        viewformat: null,
        /**
        Configuration of datepicker.
        Full list of options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html

        @property datepicker 
        @type object
        @default {
            weekStart: 0,
            startView: 0,
            minViewMode: 0,
            autoclose: false
        }
        **/
        datepicker:{
            weekStart: 0,
            startView: 0,
            minViewMode: 0,
            autoclose: false
        },
        /**
        Text shown as clear date button. 
        If <code>false</code> clear button will not be rendered.

        @property clear 
        @type boolean|string
        @default 'x clear'
        **/
        clear: '&times; clear'
    });

    $.fn.editabletypes.date = Date;

}(window.jQuery));

/**
Bootstrap datefield input - modification for inline mode.
Shows normal <input type="text"> and binds popup datepicker.  
Automatically shown in inline mode.

@class datefield
@extends date

@since 1.4.0
**/
(function ($) {
    "use strict";
    
    var DateField = function (options) {
        this.init('datefield', options, DateField.defaults);
        this.initPicker(options, DateField.defaults);
    };

    $.fn.editableutils.inherit(DateField, $.fn.editabletypes.date);    
    
    $.extend(DateField.prototype, {
        render: function () {
            this.$input = this.$tpl.find('input');
            this.setClass();
            this.setAttr('placeholder');
    
            //bootstrap-datepicker is set `bdateicker` to exclude conflict with jQuery UI one. (in date.js)        
            this.$tpl.bdatepicker(this.options.datepicker);
            
            //need to disable original event handlers
            this.$input.off('focus keydown');
            
            //update value of datepicker
            this.$input.keyup($.proxy(function(){
               this.$tpl.removeData('date');
               this.$tpl.bdatepicker('update');
            }, this));
            
        },   
        
       value2input: function(value) {
           this.$input.val(value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '');
           this.$tpl.bdatepicker('update');
       },
        
       input2value: function() { 
           return this.html2value(this.$input.val());
       },              
        
       activate: function() {
           $.fn.editabletypes.text.prototype.activate.call(this);
       },
       
       autosubmit: function() {
         //reset autosubmit to empty  
       }
    });
    
    DateField.defaults = $.extend({}, $.fn.editabletypes.date.defaults, {
        /**
        @property tpl 
        **/         
        tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',
        /**
        @property inputclass 
        @default 'input-small'
        **/         
        inputclass: 'input-small',
        
        /* datepicker config */
        datepicker: {
            weekStart: 0,
            startView: 0,
            minViewMode: 0,
            autoclose: true
        }
    });
    
    $.fn.editabletypes.datefield = DateField;

}(window.jQuery));
/**
Bootstrap-datetimepicker.  
Based on [smalot bootstrap-datetimepicker plugin](https://github.com/smalot/bootstrap-datetimepicker). 
Before usage you should manually include dependent js and css:

    <link href="css/datetimepicker.css" rel="stylesheet" type="text/css"></link> 
    <script src="js/bootstrap-datetimepicker.js"></script>

For **i18n** you should include js file from here: https://github.com/smalot/bootstrap-datetimepicker/tree/master/js/locales
and set `language` option.  

@class datetime
@extends abstractinput
@final
@since 1.4.4
@example
<a href="#" id="last_seen" data-type="datetime" data-pk="1" data-url="/post" title="Select date & time">15/03/2013 12:45</a>
<script>
$(function(){
    $('#last_seen').editable({
        format: 'yyyy-mm-dd hh:ii',    
        viewformat: 'dd/mm/yyyy hh:ii',    
        datetimepicker: {
                weekStart: 1
           }
        }
    });
});
</script>
**/
(function ($) {
    "use strict";

    var DateTime = function (options) {
        this.init('datetime', options, DateTime.defaults);
        this.initPicker(options, DateTime.defaults);
    };

    $.fn.editableutils.inherit(DateTime, $.fn.editabletypes.abstractinput);

    $.extend(DateTime.prototype, {
        initPicker: function(options, defaults) {
            //'format' is set directly from settings or data-* attributes

            //by default viewformat equals to format
            if(!this.options.viewformat) {
                this.options.viewformat = this.options.format;
            }
            
            //try parse datetimepicker config defined as json string in data-datetimepicker
            options.datetimepicker = $.fn.editableutils.tryParseJson(options.datetimepicker, true);

            //overriding datetimepicker config (as by default jQuery extend() is not recursive)
            //since 1.4 datetimepicker internally uses viewformat instead of format. Format is for submit only
            this.options.datetimepicker = $.extend({}, defaults.datetimepicker, options.datetimepicker, {
                format: this.options.viewformat
            });

            //language
            this.options.datetimepicker.language = this.options.datetimepicker.language || 'en'; 

            //store DPglobal
            this.dpg = $.fn.datetimepicker.DPGlobal; 

            //store parsed formats
            this.parsedFormat = this.dpg.parseFormat(this.options.format, this.options.formatType);
            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat, this.options.formatType);
        },

        render: function () {
            this.$input.datetimepicker(this.options.datetimepicker);

            //adjust container position when viewMode changes
            //see https://github.com/smalot/bootstrap-datetimepicker/pull/80
            this.$input.on('changeMode', function(e) {
                var f = $(this).closest('form').parent();
                //timeout here, otherwise container changes position before form has new size
                setTimeout(function(){
                    f.triggerHandler('resize');
                }, 0);
            });

            //"clear" link
            if(this.options.clear) {
                this.$clear = $('<a href="#"></a>').html(this.options.clear).click($.proxy(function(e){
                    e.preventDefault();
                    e.stopPropagation();
                    this.clear();
                }, this));

                this.$tpl.parent().append($('<div class="editable-clear">').append(this.$clear));  
            }
        },

        value2html: function(value, element) {
            //formatDate works with UTCDate!
            var text = value ? this.dpg.formatDate(this.toUTC(value), this.parsedViewFormat, this.options.datetimepicker.language, this.options.formatType) : '';
            if(element) {
                DateTime.superclass.value2html.call(this, text, element);
            } else {
                return text;
            }
        },

        html2value: function(html) {
            //parseDate return utc date!
            var value = this.parseDate(html, this.parsedViewFormat); 
            return value ? this.fromUTC(value) : null;
        },

        value2str: function(value) {
            //formatDate works with UTCDate!
            return value ? this.dpg.formatDate(this.toUTC(value), this.parsedFormat, this.options.datetimepicker.language, this.options.formatType) : '';
       },

       str2value: function(str) {
           //parseDate return utc date!
           var value = this.parseDate(str, this.parsedFormat);
           return value ? this.fromUTC(value) : null;
       },

       value2submit: function(value) {
           return this.value2str(value);
       },

       value2input: function(value) {
           if(value) {
             this.$input.data('datetimepicker').setDate(value);
           }
       },

       input2value: function() { 
           //date may be cleared, in that case getDate() triggers error
           var dt = this.$input.data('datetimepicker');
           return dt.date ? dt.getDate() : null;
       },

       activate: function() {
       },

       clear: function() {
          this.$input.data('datetimepicker').date = null;
          this.$input.find('.active').removeClass('active');
          if(!this.options.showbuttons) {
             this.$input.closest('form').submit(); 
          }          
       },

       autosubmit: function() {
           this.$input.on('mouseup', '.minute', function(e){
               var $form = $(this).closest('form');
               setTimeout(function() {
                   $form.submit();
               }, 200);
           });
       },

       //convert date from local to utc
       toUTC: function(value) {
         return value ? new Date(value.valueOf() - value.getTimezoneOffset() * 60000) : value;  
       },

       //convert date from utc to local
       fromUTC: function(value) {
         return value ? new Date(value.valueOf() + value.getTimezoneOffset() * 60000) : value;  
       },

       /*
        For incorrect date bootstrap-datetimepicker returns current date that is not suitable
        for datetimefield.
        This function returns null for incorrect date.  
       */
       parseDate: function(str, format) {
           var date = null, formattedBack;
           if(str) {
               date = this.dpg.parseDate(str, format, this.options.datetimepicker.language, this.options.formatType);
               if(typeof str === 'string') {
                   formattedBack = this.dpg.formatDate(date, format, this.options.datetimepicker.language, this.options.formatType);
                   if(str !== formattedBack) {
                       date = null;
                   } 
               }
           }
           return date;
       }

    });

    DateTime.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
        /**
        @property tpl 
        @default <div></div>
        **/         
        tpl:'<div class="editable-date well"></div>',
        /**
        @property inputclass 
        @default null
        **/
        inputclass: null,
        /**
        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>
        Possible tokens are: <code>d, dd, m, mm, yy, yyyy, h, i</code>  
        
        @property format 
        @type string
        @default yyyy-mm-dd hh:ii
        **/         
        format:'yyyy-mm-dd hh:ii',
        formatType:'standard',
        /**
        Format used for displaying date. Also applied when converting date from element's text on init.   
        If not specified equals to <code>format</code>
        
        @property viewformat 
        @type string
        @default null
        **/
        viewformat: null,
        /**
        Configuration of datetimepicker.
        Full list of options: https://github.com/smalot/bootstrap-datetimepicker

        @property datetimepicker 
        @type object
        @default { }
        **/
        datetimepicker:{
            todayHighlight: false,
            autoclose: false
        },
        /**
        Text shown as clear date button. 
        If <code>false</code> clear button will not be rendered.

        @property clear 
        @type boolean|string
        @default 'x clear'
        **/
        clear: '&times; clear'
    });

    $.fn.editabletypes.datetime = DateTime;

}(window.jQuery));
/**
Bootstrap datetimefield input - datetime input for inline mode.
Shows normal <input type="text"> and binds popup datetimepicker.  
Automatically shown in inline mode.

@class datetimefield
@extends datetime

**/
(function ($) {
    "use strict";
    
    var DateTimeField = function (options) {
        this.init('datetimefield', options, DateTimeField.defaults);
        this.initPicker(options, DateTimeField.defaults);
    };

    $.fn.editableutils.inherit(DateTimeField, $.fn.editabletypes.datetime);
    
    $.extend(DateTimeField.prototype, {
        render: function () {
            this.$input = this.$tpl.find('input');
            this.setClass();
            this.setAttr('placeholder');
            
            this.$tpl.datetimepicker(this.options.datetimepicker);
            
            //need to disable original event handlers
            this.$input.off('focus keydown');
            
            //update value of datepicker
            this.$input.keyup($.proxy(function(){
               this.$tpl.removeData('date');
               this.$tpl.datetimepicker('update');
            }, this));
            
        },   
      
       value2input: function(value) {
           this.$input.val(this.value2html(value));
           this.$tpl.datetimepicker('update');
       },
        
       input2value: function() { 
           return this.html2value(this.$input.val());
       },              
        
       activate: function() {
           $.fn.editabletypes.text.prototype.activate.call(this);
       },
       
       autosubmit: function() {
         //reset autosubmit to empty  
       }
    });
    
    DateTimeField.defaults = $.extend({}, $.fn.editabletypes.datetime.defaults, {
        /**
        @property tpl 
        **/         
        tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',
        /**
        @property inputclass 
        @default 'input-medium'
        **/         
        inputclass: 'input-medium',
        
        /* datetimepicker config */
        datetimepicker:{
            todayHighlight: false,
            autoclose: true
        }
    });
    
    $.fn.editabletypes.datetimefield = DateTimeField;

}(window.jQuery));
/*bootstrap-select.js*/
(function ($) {
	  'use strict';

	  //<editor-fold desc="Shims">
	  if (!String.prototype.includes) {
	    (function () {
	      'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
	      var toString = {}.toString;
	      var defineProperty = (function () {
	        // IE 8 only supports `Object.defineProperty` on DOM elements
	        try {
	          var object = {};
	          var $defineProperty = Object.defineProperty;
	          var result = $defineProperty(object, object, object) && $defineProperty;
	        } catch (error) {
	        }
	        return result;
	      }());
	      var indexOf = ''.indexOf;
	      var includes = function (search) {
	        if (this == null) {
	          throw new TypeError();
	        }
	        var string = String(this);
	        if (search && toString.call(search) == '[object RegExp]') {
	          throw new TypeError();
	        }
	        var stringLength = string.length;
	        var searchString = String(search);
	        var searchLength = searchString.length;
	        var position = arguments.length > 1 ? arguments[1] : undefined;
	        // `ToInteger`
	        var pos = position ? Number(position) : 0;
	        if (pos != pos) { // better `isNaN`
	          pos = 0;
	        }
	        var start = Math.min(Math.max(pos, 0), stringLength);
	        // Avoid the `indexOf` call if no match is possible
	        if (searchLength + start > stringLength) {
	          return false;
	        }
	        return indexOf.call(string, searchString, pos) != -1;
	      };
	      if (defineProperty) {
	        defineProperty(String.prototype, 'includes', {
	          'value': includes,
	          'configurable': true,
	          'writable': true
	        });
	      } else {
	        String.prototype.includes = includes;
	      }
	    }());
	  }

	  if (!String.prototype.startsWith) {
	    (function () {
	      'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
	      var defineProperty = (function () {
	        // IE 8 only supports `Object.defineProperty` on DOM elements
	        try {
	          var object = {};
	          var $defineProperty = Object.defineProperty;
	          var result = $defineProperty(object, object, object) && $defineProperty;
	        } catch (error) {
	        }
	        return result;
	      }());
	      var toString = {}.toString;
	      var startsWith = function (search) {
	        if (this == null) {
	          throw new TypeError();
	        }
	        var string = String(this);
	        if (search && toString.call(search) == '[object RegExp]') {
	          throw new TypeError();
	        }
	        var stringLength = string.length;
	        var searchString = String(search);
	        var searchLength = searchString.length;
	        var position = arguments.length > 1 ? arguments[1] : undefined;
	        // `ToInteger`
	        var pos = position ? Number(position) : 0;
	        if (pos != pos) { // better `isNaN`
	          pos = 0;
	        }
	        var start = Math.min(Math.max(pos, 0), stringLength);
	        // Avoid the `indexOf` call if no match is possible
	        if (searchLength + start > stringLength) {
	          return false;
	        }
	        var index = -1;
	        while (++index < searchLength) {
	          if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
	            return false;
	          }
	        }
	        return true;
	      };
	      if (defineProperty) {
	        defineProperty(String.prototype, 'startsWith', {
	          'value': startsWith,
	          'configurable': true,
	          'writable': true
	        });
	      } else {
	        String.prototype.startsWith = startsWith;
	      }
	    }());
	  }

	  if (!Object.keys) {
	    Object.keys = function (
	      o, // object
	      k, // key
	      r  // result array
	      ){
	      // initialize object and result
	      r=[];
	      // iterate over object keys
	      for (k in o)
	          // fill result array with non-prototypical keys
	        r.hasOwnProperty.call(o, k) && r.push(k);
	      // return result
	      return r;
	    };
	  }

	  // set data-selected on select element if the value has been programmatically selected
	  // prior to initialization of bootstrap-select
	  // * consider removing or replacing an alternative method *
	  var valHooks = {
	    useDefault: false,
	    _set: $.valHooks.select.set
	  };

	  $.valHooks.select.set = function(elem, value) {
	    if (value && !valHooks.useDefault) $(elem).data('selected', true);

	    return valHooks._set.apply(this, arguments);
	  };

	  var changed_arguments = null;
	  $.fn.triggerNative = function (eventName) {
	    var el = this[0],
	        event;

	    if (el.dispatchEvent) { // for modern browsers & IE9+
	      if (typeof Event === 'function') {
	        // For modern browsers
	        event = new Event(eventName, {
	          bubbles: true
	        });
	      } else {
	        // For IE since it doesn't support Event constructor
	        event = document.createEvent('Event');
	        event.initEvent(eventName, true, false);
	      }

	      el.dispatchEvent(event);
	    } else if (el.fireEvent) { // for IE8
	      event = document.createEventObject();
	      event.eventType = eventName;
	      el.fireEvent('on' + eventName, event);
	    } else {
	      // fall back to jQuery.trigger
	      this.trigger(eventName);
	    }
	  };
	  //</editor-fold>

	  // Case insensitive contains search
	  $.expr.pseudos.icontains = function (obj, index, meta) {
	    var $obj = $(obj);
	    var haystack = ($obj.data('tokens') || $obj.text()).toString().toUpperCase();
	    return haystack.includes(meta[3].toUpperCase());
	  };

	  // Case insensitive begins search
	  $.expr.pseudos.ibegins = function (obj, index, meta) {
	    var $obj = $(obj);
	    var haystack = ($obj.data('tokens') || $obj.text()).toString().toUpperCase();
	    return haystack.startsWith(meta[3].toUpperCase());
	  };

	  // Case and accent insensitive contains search
	  $.expr.pseudos.aicontains = function (obj, index, meta) {
	    var $obj = $(obj);
	    var haystack = ($obj.data('tokens') || $obj.data('normalizedText') || $obj.text()).toString().toUpperCase();
	    return haystack.includes(meta[3].toUpperCase());
	  };

	  // Case and accent insensitive begins search
	  $.expr.pseudos.aibegins = function (obj, index, meta) {
	    var $obj = $(obj);
	    var haystack = ($obj.data('tokens') || $obj.data('normalizedText') || $obj.text()).toString().toUpperCase();
	    return haystack.startsWith(meta[3].toUpperCase());
	  };

	  /**
	   * Remove all diatrics from the given text.
	   * @access private
	   * @param {String} text
	   * @returns {String}
	   */
	  function normalizeToBase(text) {
	    var rExps = [
	      {re: /[\xC0-\xC6]/g, ch: "A"},
	      {re: /[\xE0-\xE6]/g, ch: "a"},
	      {re: /[\xC8-\xCB]/g, ch: "E"},
	      {re: /[\xE8-\xEB]/g, ch: "e"},
	      {re: /[\xCC-\xCF]/g, ch: "I"},
	      {re: /[\xEC-\xEF]/g, ch: "i"},
	      {re: /[\xD2-\xD6]/g, ch: "O"},
	      {re: /[\xF2-\xF6]/g, ch: "o"},
	      {re: /[\xD9-\xDC]/g, ch: "U"},
	      {re: /[\xF9-\xFC]/g, ch: "u"},
	      {re: /[\xC7-\xE7]/g, ch: "c"},
	      {re: /[\xD1]/g, ch: "N"},
	      {re: /[\xF1]/g, ch: "n"}
	    ];
	    $.each(rExps, function () {
	      text = text ? text.replace(this.re, this.ch) : '';
	    });
	    return text;
	  }


	  // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  
	  var unescapeMap = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#x27;': "'",
	    '&#x60;': '`'
	  };

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped.
	    var source = '(?:' + Object.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };

	  var htmlEscape = createEscaper(escapeMap);
	  var htmlUnescape = createEscaper(unescapeMap);

	  var Selectpicker = function (element, options) {
	    // bootstrap-select has been initialized - revert valHooks.select.set back to its original function
	    if (!valHooks.useDefault) {
	      $.valHooks.select.set = valHooks._set;
	      valHooks.useDefault = true;
	    }

	    this.$element = $(element);
	    this.$newElement = null;
	    this.$button = null;
	    this.$menu = null;
	    this.$lis = null;
	    this.options = options;

	    // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a
	    // data-attribute)
	    if (this.options.title === null) {
	      this.options.title = this.$element.attr('title');
	    }

	    // Format window padding
	    var winPad = this.options.windowPadding;
	    if (typeof winPad === 'number') {
	      this.options.windowPadding = [winPad, winPad, winPad, winPad];
	    }

	    //Expose public methods
	    this.val = Selectpicker.prototype.val;
	    this.render = Selectpicker.prototype.render;
	    this.refresh = Selectpicker.prototype.refresh;
	    this.setStyle = Selectpicker.prototype.setStyle;
	    this.selectAll = Selectpicker.prototype.selectAll;
	    this.deselectAll = Selectpicker.prototype.deselectAll;
	    this.destroy = Selectpicker.prototype.destroy;
	    this.remove = Selectpicker.prototype.remove;
	    this.show = Selectpicker.prototype.show;
	    this.hide = Selectpicker.prototype.hide;

	    this.init();
	  };

	  Selectpicker.VERSION = '1.12.2';

	  // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.
	  Selectpicker.DEFAULTS = {
	    noneSelectedText: 'Nothing selected',
	    noneResultsText: 'No results matched {0}',
	    countSelectedText: function (numSelected, numTotal) {
	      return (numSelected == 1) ? "{0} item selected" : "{0} items selected";
	    },
	    maxOptionsText: function (numAll, numGroup) {
	      return [
	        (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
	        (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
	      ];
	    },
	    //selectAllText: 'Select All',
	    //deselectAllText: 'Deselect All',
	    selectAllText: '全选',
	    deselectAllText: '取消全选',
	    doneButton: false,
	    doneButtonText: 'Close',
	    multipleSeparator: ', ',
	    styleBase: 'btn',
	    style: 'btn-default',
	    size: 'auto',
	    title: null,
	    selectedTextFormat: 'values',
	    width: false,
	    container: false,
	    hideDisabled: false,
	    showSubtext: false,
	    showIcon: true,
	    showContent: true,
	    dropupAuto: true,
	    header: false,
	    liveSearch: false,
	    liveSearchPlaceholder: null,
	    liveSearchNormalize: false,
	    liveSearchStyle: 'contains',
	    actionsBox: true,
	    iconBase: 'glyphicon',
	    tickIcon: 'glyphicon-ok',
	    showTick: false,
	    template: {
	      caret: '<span class="caret"></span>'
	    },
	    maxOptions: false,
	    mobile: false,
	    selectOnTab: false,
	    dropdownAlignRight: false,
	    windowPadding: 0
	  };

	  Selectpicker.prototype = {

	    constructor: Selectpicker,

	    init: function () {
	      var that = this,
	          id = this.$element.attr('id');

	      this.$element.addClass('bs-select-hidden');

	      // store originalIndex (key) and newIndex (value) in this.liObj for fast accessibility
	      // allows us to do this.$lis.eq(that.liObj[index]) instead of this.$lis.filter('[data-original-index="' + index + '"]')
	      this.liObj = {};
	      this.multiple = this.$element.prop('multiple');
	      this.autofocus = this.$element.prop('autofocus');
	      this.$newElement = this.createView();
	      this.$element
	        .after(this.$newElement)
	        .appendTo(this.$newElement);
	      this.$button = this.$newElement.children('button');
	      this.$menu = this.$newElement.children('.dropdown-menu');
	      this.$menuInner = this.$menu.children('.inner');
	      this.$searchbox = this.$menu.find('input');

	      this.$element.removeClass('bs-select-hidden');

	      if (this.options.dropdownAlignRight === true) this.$menu.addClass('dropdown-menu-right');

	      if (typeof id !== 'undefined') {
	        this.$button.attr('data-id', id);
	        $('label[for="' + id + '"]').click(function (e) {
	          e.preventDefault();
	          that.$button.focus();
	        });
	      }

	      this.checkDisabled();
	      this.clickListener();
	      if (this.options.liveSearch) this.liveSearchListener();
	      this.render();
	      this.setStyle();
	      this.setWidth();
	      if (this.options.container) this.selectPosition();
	      this.$menu.data('this', this);
	      this.$newElement.data('this', this);
	      if (this.options.mobile) this.mobile();

	      this.$newElement.on({
	        'hide.bs.dropdown': function (e) {
	          that.$menuInner.attr('aria-expanded', false);
	          that.$element.trigger('hide.bs.select', e);
	        },
	        'hidden.bs.dropdown': function (e) {
	          that.$element.trigger('hidden.bs.select', e);
	        },
	        'show.bs.dropdown': function (e) {
	          that.$menuInner.attr('aria-expanded', true);
	          that.$element.trigger('show.bs.select', e);
	        },
	        'shown.bs.dropdown': function (e) {
	          that.$element.trigger('shown.bs.select', e);
	        }
	      });

	      if (that.$element[0].hasAttribute('required')) {
	        this.$element.on('invalid', function () {
	          that.$button
	            .addClass('bs-invalid')
	            .focus();

	          that.$element.on({
	            'focus.bs.select': function () {
	              that.$button.focus();
	              that.$element.off('focus.bs.select');
	            },
	            'shown.bs.select': function () {
	              that.$element
	                .val(that.$element.val()) // set the value to hide the validation message in Chrome when menu is opened
	                .off('shown.bs.select');
	            },
	            'rendered.bs.select': function () {
	              // if select is no longer invalid, remove the bs-invalid class
	              if (this.validity.valid) that.$button.removeClass('bs-invalid');
	              that.$element.off('rendered.bs.select');
	            }
	          });
	        });
	      }

	      setTimeout(function () {
	        that.$element.trigger('loaded.bs.select');
	      });
	    },

	    createDropdown: function () {
	      // Options
	      // If we are multiple or showTick option is set, then add the show-tick class
	      var showTick = (this.multiple || this.options.showTick) ? ' show-tick' : '',
	          inputGroup = this.$element.parent().hasClass('input-group') ? ' input-group-btn' : '',
	          autofocus = this.autofocus ? ' autofocus' : '';
	      // Elements
	      var header = this.options.header ? '<div class="popover-title"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + '</div>' : '';
	      var searchbox = this.options.liveSearch ?
	      '<div class="bs-searchbox">' +
	      '<input type="text" class="form-control" autocomplete="off"' +
	      (null === this.options.liveSearchPlaceholder ? '' : ' placeholder="' + htmlEscape(this.options.liveSearchPlaceholder) + '"') + ' role="textbox" aria-label="Search">' +
	      '</div>'
	          : '';
	      var actionsbox = this.multiple && this.options.actionsBox ?
	      '<div class="bs-actionsbox">' +
	      '<div class="btn-group btn-group-sm btn-block">' +
	      '<button type="button" class="actions-btn bs-select-all btn btn-default">' +
	      this.options.selectAllText +
	      '</button>' +
	      '<button type="button" class="actions-btn bs-deselect-all btn btn-default">' +
	      this.options.deselectAllText +
	      '</button>' +
	      '</div>' +
	      '</div>'
	          : '';
	      var donebutton = this.multiple && this.options.doneButton ?
	      '<div class="bs-donebutton">' +
	      '<div class="btn-group btn-block">' +
	      '<button type="button" class="btn btn-sm btn-default">' +
	      this.options.doneButtonText +
	      '</button>' +
	      '</div>' +
	      '</div>'
	          : '';
	      var drop =
	          '<div class="btn-group bootstrap-select' + showTick + inputGroup + '">' +
	          '<button type="button" class="' + this.options.styleBase + ' dropdown-toggle" data-toggle="dropdown"' + autofocus + ' role="button">' +
	          '<span class="filter-option pull-left"></span>&nbsp;' +
	          '<span class="bs-caret">' +
	          this.options.template.caret +
	          '</span>' +
	          '</button>' +
	          '<div class="dropdown-menu open" role="combobox">' +
	          header +
	          searchbox +
	          actionsbox +
	          '<ul class="dropdown-menu inner" role="listbox" aria-expanded="false">' +
	          '</ul>' +
	          donebutton +
	          '</div>' +
	          '</div>';

	      return $(drop);
	    },

	    createView: function () {
	      var $drop = this.createDropdown(),
	          li = this.createLi();

	      $drop.find('ul')[0].innerHTML = li;
	      return $drop;
	    },

	    reloadLi: function () {
	      // rebuild
	      var li = this.createLi();
	      this.$menuInner[0].innerHTML = li;
	    },

	    createLi: function () {
	      var that = this,
	          _li = [],
	          optID = 0,
	          titleOption = document.createElement('option'),
	          liIndex = -1; // increment liIndex whenever a new <li> element is created to ensure liObj is correct

	      // Helper functions
	      /**
	       * @param content
	       * @param [index]
	       * @param [classes]
	       * @param [optgroup]
	       * @returns {string}
	       */
	      var generateLI = function (content, index, classes, optgroup) {
	        return '<li' +
	            ((typeof classes !== 'undefined' & '' !== classes) ? ' class="' + classes + '"' : '') +
	            ((typeof index !== 'undefined' & null !== index) ? ' data-original-index="' + index + '"' : '') +
	            ((typeof optgroup !== 'undefined' & null !== optgroup) ? 'data-optgroup="' + optgroup + '"' : '') +
	            '>' + content + '</li>';
	      };

	      /**
	       * @param text
	       * @param [classes]
	       * @param [inline]
	       * @param [tokens]
	       * @returns {string}
	       */
	      var generateA = function (text, classes, inline, tokens) {
	        return '<a tabindex="0"' +
	            (typeof classes !== 'undefined' ? ' class="' + classes + '"' : '') +
	            (inline ? ' style="' + inline + '"' : '') +
	            (that.options.liveSearchNormalize ? ' data-normalized-text="' + normalizeToBase(htmlEscape($(text).html())) + '"' : '') +
	            (typeof tokens !== 'undefined' || tokens !== null ? ' data-tokens="' + tokens + '"' : '') +
	            ' role="option">' + text +
	            '<span class="' + that.options.iconBase + ' ' + that.options.tickIcon + ' check-mark"></span>' +
	            '</a>';
	      };

	      if (this.options.title && !this.multiple) {
	        // this option doesn't create a new <li> element, but does add a new option, so liIndex is decreased
	        // since liObj is recalculated on every refresh, liIndex needs to be decreased even if the titleOption is already appended
	        liIndex--;

	        if (!this.$element.find('.bs-title-option').length) {
	          // Use native JS to prepend option (faster)
	          var element = this.$element[0];
	          titleOption.className = 'bs-title-option';
	          titleOption.innerHTML = this.options.title;
	          titleOption.value = '';
	          element.insertBefore(titleOption, element.firstChild);
	          // Check if selected or data-selected attribute is already set on an option. If not, select the titleOption option.
	          // the selected item may have been changed by user or programmatically before the bootstrap select plugin runs,
	          // if so, the select will have the data-selected attribute
	          var $opt = $(element.options[element.selectedIndex]);
	          if ($opt.attr('selected') === undefined && this.$element.data('selected') === undefined) {
	            titleOption.selected = true;
	          }
	        }
	      }

	      this.$element.find('option').each(function (index) {
	        var $this = $(this);

	        liIndex++;

	        if ($this.hasClass('bs-title-option')) return;

	        // Get the class and text for the option
	        var optionClass = this.className || '',
	            inline = this.style.cssText,
	            text = $this.data('content') ? $this.data('content') : $this.html(),
	            tokens = $this.data('tokens') ? $this.data('tokens') : null,
	            subtext = typeof $this.data('subtext') !== 'undefined' ? '<small class="text-muted">' + $this.data('subtext') + '</small>' : '',
	            icon = typeof $this.data('icon') !== 'undefined' ? '<span class="' + that.options.iconBase + ' ' + $this.data('icon') + '"></span> ' : '',
	            $parent = $this.parent(),
	            isOptgroup = $parent[0].tagName === 'OPTGROUP',
	            isOptgroupDisabled = isOptgroup && $parent[0].disabled,
	            isDisabled = this.disabled || isOptgroupDisabled;

	        if (icon !== '' && isDisabled) {
	          icon = '<span>' + icon + '</span>';
	        }

	        if (that.options.hideDisabled && (isDisabled && !isOptgroup || isOptgroupDisabled)) {
	          liIndex--;
	          return;
	        }

	        if (!$this.data('content')) {
	          // Prepend any icon and append any subtext to the main text.
	          text = icon + '<span class="text">' + text + subtext + '</span>';
	        }

	        if (isOptgroup && $this.data('divider') !== true) {
	          if (that.options.hideDisabled && isDisabled) {
	            if ($parent.data('allOptionsDisabled') === undefined) {
	              var $options = $parent.children();
	              $parent.data('allOptionsDisabled', $options.filter(':disabled').length === $options.length);
	            }

	            if ($parent.data('allOptionsDisabled')) {
	              liIndex--;
	              return;
	            }
	          }

	          var optGroupClass = ' ' + $parent[0].className || '';

	          if ($this.index() === 0) { // Is it the first option of the optgroup?
	            optID += 1;

	            // Get the opt group label
	            var label = $parent[0].label,
	                labelSubtext = typeof $parent.data('subtext') !== 'undefined' ? '<small class="text-muted">' + $parent.data('subtext') + '</small>' : '',
	                labelIcon = $parent.data('icon') ? '<span class="' + that.options.iconBase + ' ' + $parent.data('icon') + '"></span> ' : '';

	            label = labelIcon + '<span class="text">' + htmlEscape(label) + labelSubtext + '</span>';

	            if (index !== 0 && _li.length > 0) { // Is it NOT the first option of the select && are there elements in the dropdown?
	              liIndex++;
	              _li.push(generateLI('', null, 'divider', optID + 'div'));
	            }
	            liIndex++;
	            _li.push(generateLI(label, null, 'dropdown-header' + optGroupClass, optID));
	          }

	          if (that.options.hideDisabled && isDisabled) {
	            liIndex--;
	            return;
	          }

	          _li.push(generateLI(generateA(text, 'opt ' + optionClass + optGroupClass, inline, tokens), index, '', optID));
	        } else if ($this.data('divider') === true) {
	          _li.push(generateLI('', index, 'divider'));
	        } else if ($this.data('hidden') === true) {
	          _li.push(generateLI(generateA(text, optionClass, inline, tokens), index, 'hidden is-hidden'));
	        } else {
	          var showDivider = this.previousElementSibling && this.previousElementSibling.tagName === 'OPTGROUP';

	          // if previous element is not an optgroup and hideDisabled is true
	          if (!showDivider && that.options.hideDisabled) {
	            // get previous elements
	            var $prev = $(this).prevAll();

	            for (var i = 0; i < $prev.length; i++) {
	              // find the first element in the previous elements that is an optgroup
	              if ($prev[i].tagName === 'OPTGROUP') {
	                var optGroupDistance = 0;

	                // loop through the options in between the current option and the optgroup
	                // and check if they are hidden or disabled
	                for (var d = 0; d < i; d++) {
	                  var prevOption = $prev[d];
	                  if (prevOption.disabled || $(prevOption).data('hidden') === true) optGroupDistance++;
	                }

	                // if all of the options between the current option and the optgroup are hidden or disabled, show the divider
	                if (optGroupDistance === i) showDivider = true;

	                break;
	              }
	            }
	          }

	          if (showDivider) {
	            liIndex++;
	            _li.push(generateLI('', null, 'divider', optID + 'div'));
	          }
	          _li.push(generateLI(generateA(text, optionClass, inline, tokens), index));
	        }

	        that.liObj[index] = liIndex;
	      });

	      //If we are not multiple, we don't have a selected item, and we don't have a title, select the first element so something is set in the button
	      if (!this.multiple && this.$element.find('option:selected').length === 0 && !this.options.title) {
	        this.$element.find('option').eq(0).prop('selected', true).attr('selected', 'selected');
	      }

	      return _li.join('');
	    },

	    findLis: function () {
	      if (this.$lis == null) this.$lis = this.$menu.find('li');
	      return this.$lis;
	    },

	    /**
	     * @param [updateLi] defaults to true
	     */
	    render: function (updateLi) {
	      var that = this,
	          notDisabled;

	      //Update the LI to match the SELECT
	      if (updateLi !== false) {
	        this.$element.find('option').each(function (index) {
	          var $lis = that.findLis().eq(that.liObj[index]);

	          that.setDisabled(index, this.disabled || this.parentNode.tagName === 'OPTGROUP' && this.parentNode.disabled, $lis);
	          that.setSelected(index, this.selected, $lis);
	        });
	      }

	      this.togglePlaceholder();

	      this.tabIndex();

	      var selectedItems = this.$element.find('option').map(function () {
	        if (this.selected) {
	          if (that.options.hideDisabled && (this.disabled || this.parentNode.tagName === 'OPTGROUP' && this.parentNode.disabled)) return;

	          var $this = $(this),
	              icon = $this.data('icon') && that.options.showIcon ? '<i class="' + that.options.iconBase + ' ' + $this.data('icon') + '"></i> ' : '',
	              subtext;

	          if (that.options.showSubtext && $this.data('subtext') && !that.multiple) {
	            subtext = ' <small class="text-muted">' + $this.data('subtext') + '</small>';
	          } else {
	            subtext = '';
	          }
	          if (typeof $this.attr('title') !== 'undefined') {
	            return $this.attr('title');
	          } else if ($this.data('content') && that.options.showContent) {
	            return $this.data('content').toString();
	          } else {
	            return icon + $this.html() + subtext;
	          }
	        }
	      }).toArray();

	      //Fixes issue in IE10 occurring when no default option is selected and at least one option is disabled
	      //Convert all the values into a comma delimited string
	      var title = !this.multiple ? selectedItems[0] : selectedItems.join(this.options.multipleSeparator);

	      //If this is multi select, and the selectText type is count, the show 1 of 2 selected etc..
	      if (this.multiple && this.options.selectedTextFormat.indexOf('count') > -1) {
	        var max = this.options.selectedTextFormat.split('>');
	        if ((max.length > 1 && selectedItems.length > max[1]) || (max.length == 1 && selectedItems.length >= 2)) {
	          notDisabled = this.options.hideDisabled ? ', [disabled]' : '';
	          var totalCount = this.$element.find('option').not('[data-divider="true"], [data-hidden="true"]' + notDisabled).length,
	              tr8nText = (typeof this.options.countSelectedText === 'function') ? this.options.countSelectedText(selectedItems.length, totalCount) : this.options.countSelectedText;
	          title = tr8nText.replace('{0}', selectedItems.length.toString()).replace('{1}', totalCount.toString());
	        }
	      }

	      if (this.options.title == undefined) {
	        this.options.title = this.$element.attr('title');
	      }

	      if (this.options.selectedTextFormat == 'static') {
	        title = this.options.title;
	      }

	      //If we dont have a title, then use the default, or if nothing is set at all, use the not selected text
	      if (!title) {
	        title = typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText;
	      }

	      //strip all HTML tags and trim the result, then unescape any escaped tags
	      this.$button.attr('title', htmlUnescape($.trim(title.replace(/<[^>]*>?/g, ''))));
	      this.$button.children('.filter-option').html(title);

	      this.$element.trigger('rendered.bs.select');
	    },

	    /**
	     * @param [style]
	     * @param [status]
	     */
	    setStyle: function (style, status) {
	      if (this.$element.attr('class')) {
	        this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ''));
	      }

	      var buttonClass = style ? style : this.options.style;

	      if (status == 'add') {
	        this.$button.addClass(buttonClass);
	      } else if (status == 'remove') {
	        this.$button.removeClass(buttonClass);
	      } else {
	        this.$button.removeClass(this.options.style);
	        this.$button.addClass(buttonClass);
	      }
	    },

	    liHeight: function (refresh) {
	      if (!refresh && (this.options.size === false || this.sizeInfo)) return;

	      var newElement = document.createElement('div'),
	          menu = document.createElement('div'),
	          menuInner = document.createElement('ul'),
	          divider = document.createElement('li'),
	          li = document.createElement('li'),
	          a = document.createElement('a'),
	          text = document.createElement('span'),
	          header = this.options.header && this.$menu.find('.popover-title').length > 0 ? this.$menu.find('.popover-title')[0].cloneNode(true) : null,
	          search = this.options.liveSearch ? document.createElement('div') : null,
	          actions = this.options.actionsBox && this.multiple && this.$menu.find('.bs-actionsbox').length > 0 ? this.$menu.find('.bs-actionsbox')[0].cloneNode(true) : null,
	          doneButton = this.options.doneButton && this.multiple && this.$menu.find('.bs-donebutton').length > 0 ? this.$menu.find('.bs-donebutton')[0].cloneNode(true) : null;

	      text.className = 'text';
	      newElement.className = this.$menu[0].parentNode.className + ' open';
	      menu.className = 'dropdown-menu open';
	      menuInner.className = 'dropdown-menu inner';
	      divider.className = 'divider';

	      text.appendChild(document.createTextNode('Inner text'));
	      a.appendChild(text);
	      li.appendChild(a);
	      menuInner.appendChild(li);
	      menuInner.appendChild(divider);
	      if (header) menu.appendChild(header);
	      if (search) {
	        var input = document.createElement('input');
	        search.className = 'bs-searchbox';
	        input.className = 'form-control';
	        search.appendChild(input);
	        menu.appendChild(search);
	      }
	      if (actions) menu.appendChild(actions);
	      menu.appendChild(menuInner);
	      if (doneButton) menu.appendChild(doneButton);
	      newElement.appendChild(menu);

	      document.body.appendChild(newElement);

	      var liHeight = a.offsetHeight,
	          headerHeight = header ? header.offsetHeight : 0,
	          searchHeight = search ? search.offsetHeight : 0,
	          actionsHeight = actions ? actions.offsetHeight : 0,
	          doneButtonHeight = doneButton ? doneButton.offsetHeight : 0,
	          dividerHeight = $(divider).outerHeight(true),
	          // fall back to jQuery if getComputedStyle is not supported
	          menuStyle = typeof getComputedStyle === 'function' ? getComputedStyle(menu) : false,
	          $menu = menuStyle ? null : $(menu),
	          menuPadding = {
	            vert: parseInt(menuStyle ? menuStyle.paddingTop : $menu.css('paddingTop')) +
	                  parseInt(menuStyle ? menuStyle.paddingBottom : $menu.css('paddingBottom')) +
	                  parseInt(menuStyle ? menuStyle.borderTopWidth : $menu.css('borderTopWidth')) +
	                  parseInt(menuStyle ? menuStyle.borderBottomWidth : $menu.css('borderBottomWidth')),
	            horiz: parseInt(menuStyle ? menuStyle.paddingLeft : $menu.css('paddingLeft')) +
	                  parseInt(menuStyle ? menuStyle.paddingRight : $menu.css('paddingRight')) +
	                  parseInt(menuStyle ? menuStyle.borderLeftWidth : $menu.css('borderLeftWidth')) +
	                  parseInt(menuStyle ? menuStyle.borderRightWidth : $menu.css('borderRightWidth'))
	          },
	          menuExtras =  {
	            vert: menuPadding.vert +
	                  parseInt(menuStyle ? menuStyle.marginTop : $menu.css('marginTop')) +
	                  parseInt(menuStyle ? menuStyle.marginBottom : $menu.css('marginBottom')) + 2,
	            horiz: menuPadding.horiz +
	                  parseInt(menuStyle ? menuStyle.marginLeft : $menu.css('marginLeft')) +
	                  parseInt(menuStyle ? menuStyle.marginRight : $menu.css('marginRight')) + 2
	          }

	      document.body.removeChild(newElement);

	      this.sizeInfo = {
	        liHeight: liHeight,
	        headerHeight: headerHeight,
	        searchHeight: searchHeight,
	        actionsHeight: actionsHeight,
	        doneButtonHeight: doneButtonHeight,
	        dividerHeight: dividerHeight,
	        menuPadding: menuPadding,
	        menuExtras: menuExtras
	      };
	    },

	    setSize: function () {
	      this.findLis();
	      this.liHeight();

	      if (this.options.header) this.$menu.css('padding-top', 0);
	      if (this.options.size === false) return;

	      var that = this,
	          $menu = this.$menu,
	          $menuInner = this.$menuInner,
	          $window = $(window),
	          selectHeight = this.$newElement[0].offsetHeight,
	          selectWidth = this.$newElement[0].offsetWidth,
	          liHeight = this.sizeInfo['liHeight'],
	          headerHeight = this.sizeInfo['headerHeight'],
	          searchHeight = this.sizeInfo['searchHeight'],
	          actionsHeight = this.sizeInfo['actionsHeight'],
	          doneButtonHeight = this.sizeInfo['doneButtonHeight'],
	          divHeight = this.sizeInfo['dividerHeight'],
	          menuPadding = this.sizeInfo['menuPadding'],
	          menuExtras = this.sizeInfo['menuExtras'],
	          notDisabled = this.options.hideDisabled ? '.disabled' : '',
	          menuHeight,
	          menuWidth,
	          getHeight,
	          getWidth,
	          selectOffsetTop,
	          selectOffsetBot,
	          selectOffsetLeft,
	          selectOffsetRight,
	          getPos = function() {
	            var pos = that.$newElement.offset(),
	                $container = $(that.options.container),
	                containerPos;

	            if (that.options.container && !$container.is('body')) {
	              containerPos = $container.offset();
	              containerPos.top += parseInt($container.css('borderTopWidth'));
	              containerPos.left += parseInt($container.css('borderLeftWidth'));
	            } else {
	              containerPos = { top: 0, left: 0 };
	            }

	            var winPad = that.options.windowPadding;
	            selectOffsetTop = pos.top - containerPos.top - $window.scrollTop();
	            selectOffsetBot = $window.height() - selectOffsetTop - selectHeight - containerPos.top - winPad[2];
	            selectOffsetLeft = pos.left - containerPos.left - $window.scrollLeft();
	            selectOffsetRight = $window.width() - selectOffsetLeft - selectWidth - containerPos.left - winPad[1];
	            selectOffsetTop -= winPad[0];
	            selectOffsetLeft -= winPad[3];
	          };

	      getPos();

	      if (this.options.size === 'auto') {
	        var getSize = function () {
	          var minHeight,
	              hasClass = function (className, include) {
	                return function (element) {
	                    if (include) {
	                        return (element.classList ? element.classList.contains(className) : $(element).hasClass(className));
	                    } else {
	                        return !(element.classList ? element.classList.contains(className) : $(element).hasClass(className));
	                    }
	                };
	              },
	              lis = that.$menuInner[0].getElementsByTagName('li'),
	              lisVisible = Array.prototype.filter ? Array.prototype.filter.call(lis, hasClass('hidden', false)) : that.$lis.not('.hidden'),
	              optGroup = Array.prototype.filter ? Array.prototype.filter.call(lisVisible, hasClass('dropdown-header', true)) : lisVisible.filter('.dropdown-header');

	          getPos();
	          menuHeight = selectOffsetBot - menuExtras.vert;
	          menuWidth = selectOffsetRight - menuExtras.horiz;

	          if (that.options.container) {
	            if (!$menu.data('height')) $menu.data('height', $menu.height());
	            getHeight = $menu.data('height');

	            if (!$menu.data('width')) $menu.data('width', $menu.width());
	            getWidth = $menu.data('width');
	          } else {
	            getHeight = $menu.height();
	            getWidth = $menu.width();
	          }

	          if (that.options.dropupAuto) {
	            that.$newElement.toggleClass('dropup', selectOffsetTop > selectOffsetBot && (menuHeight - menuExtras.vert) < getHeight);
	          }

	          if (that.$newElement.hasClass('dropup')) {
	            menuHeight = selectOffsetTop - menuExtras.vert;
	          }

	          if (that.options.dropdownAlignRight === 'auto') {
	            $menu.toggleClass('dropdown-menu-right', selectOffsetLeft > selectOffsetRight && (menuWidth - menuExtras.horiz) < (getWidth - selectWidth));
	          }

	          if ((lisVisible.length + optGroup.length) > 3) {
	            minHeight = liHeight * 3 + menuExtras.vert - 2;
	          } else {
	            minHeight = 0;
	          }

	          $menu.css({
	            'max-height': menuHeight + 'px',
	            'overflow': 'hidden',
	            'min-height': minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight + 'px'
	          });
	          $menuInner.css({
	            'max-height': menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding.vert + 'px',
	            'overflow-y': 'auto',
	            'min-height': Math.max(minHeight - menuPadding.vert, 0) + 'px'
	          });
	        };
	        getSize();
	        this.$searchbox.off('input.getSize propertychange.getSize').on('input.getSize propertychange.getSize', getSize);
	        $window.off('resize.getSize scroll.getSize').on('resize.getSize scroll.getSize', getSize);
	      } else if (this.options.size && this.options.size != 'auto' && this.$lis.not(notDisabled).length > this.options.size) {
	        var optIndex = this.$lis.not('.divider').not(notDisabled).children().slice(0, this.options.size).last().parent().index(),
	            divLength = this.$lis.slice(0, optIndex + 1).filter('.divider').length;
	        menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding.vert;

	        if (that.options.container) {
	          if (!$menu.data('height')) $menu.data('height', $menu.height());
	          getHeight = $menu.data('height');
	        } else {
	          getHeight = $menu.height();
	        }

	        if (that.options.dropupAuto) {
	          //noinspection JSUnusedAssignment
	          this.$newElement.toggleClass('dropup', selectOffsetTop > selectOffsetBot && (menuHeight - menuExtras.vert) < getHeight);
	        }
	        $menu.css({
	          'max-height': menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight + 'px',
	          'overflow': 'hidden',
	          'min-height': ''
	        });
	        $menuInner.css({
	          'max-height': menuHeight - menuPadding.vert + 'px',
	          'overflow-y': 'auto',
	          'min-height': ''
	        });
	      }
	    },

	    setWidth: function () {
	      if (this.options.width === 'auto') {
	        this.$menu.css('min-width', '0');

	        // Get correct width if element is hidden
	        var $selectClone = this.$menu.parent().clone().appendTo('body'),
	            $selectClone2 = this.options.container ? this.$newElement.clone().appendTo('body') : $selectClone,
	            ulWidth = $selectClone.children('.dropdown-menu').outerWidth(),
	            btnWidth = $selectClone2.css('width', 'auto').children('button').outerWidth();

	        $selectClone.remove();
	        $selectClone2.remove();

	        // Set width to whatever's larger, button title or longest option
	        this.$newElement.css('width', Math.max(ulWidth, btnWidth) + 'px');
	      } else if (this.options.width === 'fit') {
	        // Remove inline min-width so width can be changed from 'auto'
	        this.$menu.css('min-width', '');
	        this.$newElement.css('width', '').addClass('fit-width');
	      } else if (this.options.width) {
	        // Remove inline min-width so width can be changed from 'auto'
	        this.$menu.css('min-width', '');
	        this.$newElement.css('width', this.options.width);
	      } else {
	        // Remove inline min-width/width so width can be changed
	        this.$menu.css('min-width', '');
	        this.$newElement.css('width', '');
	      }
	      // Remove fit-width class if width is changed programmatically
	      if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {
	        this.$newElement.removeClass('fit-width');
	      }
	    },

	    selectPosition: function () {
	      this.$bsContainer = $('<div class="bs-container" />');

	      var that = this,
	          $container = $(this.options.container),
	          pos,
	          containerPos,
	          actualHeight,
	          getPlacement = function ($element) {
	            that.$bsContainer.addClass($element.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass('dropup', $element.hasClass('dropup'));
	            pos = $element.offset();

	            if (!$container.is('body')) {
	              containerPos = $container.offset();
	              containerPos.top += parseInt($container.css('borderTopWidth')) - $container.scrollTop();
	              containerPos.left += parseInt($container.css('borderLeftWidth')) - $container.scrollLeft();
	            } else {
	              containerPos = { top: 0, left: 0 };
	            }

	            actualHeight = $element.hasClass('dropup') ? 0 : $element[0].offsetHeight;

	            that.$bsContainer.css({
	              'top': pos.top - containerPos.top + actualHeight,
	              'left': pos.left - containerPos.left,
	              'width': $element[0].offsetWidth
	            });
	          };

	      this.$button.on('click', function () {
	        var $this = $(this);

	        if (that.isDisabled()) {
	          return;
	        }

	        getPlacement(that.$newElement);

	        that.$bsContainer
	          .appendTo(that.options.container)
	          .toggleClass('open', !$this.hasClass('open'))
	          .append(that.$menu);
	      });

	      $(window).on('resize scroll', function () {
	        getPlacement(that.$newElement);
	      });

	      this.$element.on('hide.bs.select', function () {
	        that.$menu.data('height', that.$menu.height());
	        that.$bsContainer.detach();
	      });
	    },

	    /**
	     * @param {number} index - the index of the option that is being changed
	     * @param {boolean} selected - true if the option is being selected, false if being deselected
	     * @param {JQuery} $lis - the 'li' element that is being modified
	     */
	    setSelected: function (index, selected, $lis) {
	      if (!$lis) {
	        this.togglePlaceholder(); // check if setSelected is being called by changing the value of the select
	        $lis = this.findLis().eq(this.liObj[index]);
	      }

	      $lis.toggleClass('selected', selected).find('a').attr('aria-selected', selected);
	    },

	    /**
	     * @param {number} index - the index of the option that is being disabled
	     * @param {boolean} disabled - true if the option is being disabled, false if being enabled
	     * @param {JQuery} $lis - the 'li' element that is being modified
	     */
	    setDisabled: function (index, disabled, $lis) {
	      if (!$lis) {
	        $lis = this.findLis().eq(this.liObj[index]);
	      }

	      if (disabled) {
	        $lis.addClass('disabled').children('a').attr('href', '#').attr('tabindex', -1).attr('aria-disabled', true);
	      } else {
	        $lis.removeClass('disabled').children('a').removeAttr('href').attr('tabindex', 0).attr('aria-disabled', false);
	      }
	    },

	    isDisabled: function () {
	      return this.$element[0].disabled;
	    },

	    checkDisabled: function () {
	      var that = this;

	      if (this.isDisabled()) {
	        this.$newElement.addClass('disabled');
	        this.$button.addClass('disabled').attr('tabindex', -1).attr('aria-disabled', true);
	      } else {
	        if (this.$button.hasClass('disabled')) {
	          this.$newElement.removeClass('disabled');
	          this.$button.removeClass('disabled').attr('aria-disabled', false);
	        }

	        if (this.$button.attr('tabindex') == -1 && !this.$element.data('tabindex')) {
	          this.$button.removeAttr('tabindex');
	        }
	      }

	      this.$button.click(function () {
	        return !that.isDisabled();
	      });
	    },

	    togglePlaceholder: function () {
	      var value = this.$element.val();
	      this.$button.toggleClass('bs-placeholder', value === null || value === '' || (value.constructor === Array && value.length === 0));
	    },

	    tabIndex: function () {
	      if (this.$element.data('tabindex') !== this.$element.attr('tabindex') && 
	        (this.$element.attr('tabindex') !== -98 && this.$element.attr('tabindex') !== '-98')) {
	        this.$element.data('tabindex', this.$element.attr('tabindex'));
	        this.$button.attr('tabindex', this.$element.data('tabindex'));
	      }

	      this.$element.attr('tabindex', -98);
	    },

	    clickListener: function () {
	      var that = this,
	          $document = $(document);

	      $document.data('spaceSelect', false);

	      this.$button.on('keyup', function (e) {
	        if (/(32)/.test(e.keyCode.toString(10)) && $document.data('spaceSelect')) {
	            e.preventDefault();
	            $document.data('spaceSelect', false);
	        }
	      });

	      this.$button.on('click', function () {
	        that.setSize();
	      });

	      this.$element.on('shown.bs.select', function () {
	        if (!that.options.liveSearch && !that.multiple) {
	          that.$menuInner.find('.selected a').focus();
	        } else if (!that.multiple) {
	          var selectedIndex = that.liObj[that.$element[0].selectedIndex];

	          if (typeof selectedIndex !== 'number' || that.options.size === false) return;

	          // scroll to selected option
	          var offset = that.$lis.eq(selectedIndex)[0].offsetTop - that.$menuInner[0].offsetTop;
	          offset = offset - that.$menuInner[0].offsetHeight/2 + that.sizeInfo.liHeight/2;
	          that.$menuInner[0].scrollTop = offset;
	        }
	      });

	      this.$menuInner.on('click', 'li a', function (e) {
	        var $this = $(this),
	            clickedIndex = $this.parent().data('originalIndex'),
	            prevValue = that.$element.val(),
	            prevIndex = that.$element.prop('selectedIndex'),
	            triggerChange = true;

	        // Don't close on multi choice menu
	        if (that.multiple && that.options.maxOptions !== 1) {
	          e.stopPropagation();
	        }

	        e.preventDefault();

	        //Don't run if we have been disabled
	        if (!that.isDisabled() && !$this.parent().hasClass('disabled')) {
	          var $options = that.$element.find('option'),
	              $option = $options.eq(clickedIndex),
	              state = $option.prop('selected'),
	              $optgroup = $option.parent('optgroup'),
	              maxOptions = that.options.maxOptions,
	              maxOptionsGrp = $optgroup.data('maxOptions') || false;

	          if (!that.multiple) { // Deselect all others if not multi select box
	            $options.prop('selected', false);
	            $option.prop('selected', true);
	            that.$menuInner.find('.selected').removeClass('selected').find('a').attr('aria-selected', false);
	            that.setSelected(clickedIndex, true);
	          } else { // Toggle the one we have chosen if we are multi select.
	            $option.prop('selected', !state);
	            that.setSelected(clickedIndex, !state);
	            $this.blur();

	            if (maxOptions !== false || maxOptionsGrp !== false) {
	              var maxReached = maxOptions < $options.filter(':selected').length,
	                  maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length;

	              if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {
	                if (maxOptions && maxOptions == 1) {
	                  $options.prop('selected', false);
	                  $option.prop('selected', true);
	                  that.$menuInner.find('.selected').removeClass('selected');
	                  that.setSelected(clickedIndex, true);
	                } else if (maxOptionsGrp && maxOptionsGrp == 1) {
	                  $optgroup.find('option:selected').prop('selected', false);
	                  $option.prop('selected', true);
	                  var optgroupID = $this.parent().data('optgroup');
	                  that.$menuInner.find('[data-optgroup="' + optgroupID + '"]').removeClass('selected');
	                  that.setSelected(clickedIndex, true);
	                } else {
	                  var maxOptionsText = typeof that.options.maxOptionsText === 'string' ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText,
	                      maxOptionsArr = typeof maxOptionsText === 'function' ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText,
	                      maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),
	                      maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),
	                      $notify = $('<div class="notify"></div>');
	                  // If {var} is set in array, replace it
	                  /** @deprecated */
	                  if (maxOptionsArr[2]) {
	                    maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);
	                    maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);
	                  }

	                  $option.prop('selected', false);

	                  that.$menu.append($notify);

	                  if (maxOptions && maxReached) {
	                    $notify.append($('<div>' + maxTxt + '</div>'));
	                    triggerChange = false;
	                    that.$element.trigger('maxReached.bs.select');
	                  }

	                  if (maxOptionsGrp && maxReachedGrp) {
	                    $notify.append($('<div>' + maxTxtGrp + '</div>'));
	                    triggerChange = false;
	                    that.$element.trigger('maxReachedGrp.bs.select');
	                  }

	                  setTimeout(function () {
	                    that.setSelected(clickedIndex, false);
	                  }, 10);

	                  $notify.delay(750).fadeOut(300, function () {
	                    $(this).remove();
	                  });
	                }
	              }
	            }
	          }

	          if (!that.multiple || (that.multiple && that.options.maxOptions === 1)) {
	            that.$button.focus();
	          } else if (that.options.liveSearch) {
	            that.$searchbox.focus();
	          }

	          // Trigger select 'change'
	          if (triggerChange) {
	            if ((prevValue != that.$element.val() && that.multiple) || (prevIndex != that.$element.prop('selectedIndex') && !that.multiple)) {
	              // $option.prop('selected') is current option state (selected/unselected). state is previous option state.
	              changed_arguments = [clickedIndex, $option.prop('selected'), state];
	              that.$element
	                .triggerNative('change');
	            }
	          }
	        }
	      });

	      this.$menu.on('click', 'li.disabled a, .popover-title, .popover-title :not(.close)', function (e) {
	        if (e.currentTarget == this) {
	          e.preventDefault();
	          e.stopPropagation();
	          if (that.options.liveSearch && !$(e.target).hasClass('close')) {
	            that.$searchbox.focus();
	          } else {
	            that.$button.focus();
	          }
	        }
	      });

	      this.$menuInner.on('click', '.divider, .dropdown-header', function (e) {
	        e.preventDefault();
	        e.stopPropagation();
	        if (that.options.liveSearch) {
	          that.$searchbox.focus();
	        } else {
	          that.$button.focus();
	        }
	      });

	      this.$menu.on('click', '.popover-title .close', function () {
	        that.$button.click();
	      });

	      this.$searchbox.on('click', function (e) {
	        e.stopPropagation();
	      });

	      this.$menu.on('click', '.actions-btn', function (e) {
	        if (that.options.liveSearch) {
	          that.$searchbox.focus();
	        } else {
	          that.$button.focus();
	        }

	        e.preventDefault();
	        e.stopPropagation();

	        if ($(this).hasClass('bs-select-all')) {
	          that.selectAll();
	        } else {
	          that.deselectAll();
	        }
	      });

	      this.$element.change(function () {
	        that.render(false);
	        that.$element.trigger('changed.bs.select', changed_arguments);
	        changed_arguments = null;
	      });
	    },

	    liveSearchListener: function () {
	      var that = this,
	          $no_results = $('<li class="no-results"></li>');

	      this.$button.on('click.dropdown.data-api', function () {
	        that.$menuInner.find('.active').removeClass('active');
	        if (!!that.$searchbox.val()) {
	          that.$searchbox.val('');
	          that.$lis.not('.is-hidden').removeClass('hidden');
	          if (!!$no_results.parent().length) $no_results.remove();
	        }
	        if (!that.multiple) that.$menuInner.find('.selected').addClass('active');
	        setTimeout(function () {
	          that.$searchbox.focus();
	        }, 10);
	      });

	      this.$searchbox.on('click.dropdown.data-api focus.dropdown.data-api touchend.dropdown.data-api', function (e) {
	        e.stopPropagation();
	      });

	      this.$searchbox.on('input propertychange', function () {
	        that.$lis.not('.is-hidden').removeClass('hidden');
	        that.$lis.filter('.active').removeClass('active');
	        $no_results.remove();

	        if (that.$searchbox.val()) {
	          var $searchBase = that.$lis.not('.is-hidden, .divider, .dropdown-header'),
	              $hideItems;
	          if (that.options.liveSearchNormalize) {
	            $hideItems = $searchBase.find('a').not(':a' + that._searchStyle() + '("' + normalizeToBase(that.$searchbox.val()) + '")');
	          } else {
	            $hideItems = $searchBase.find('a').not(':' + that._searchStyle() + '("' + that.$searchbox.val() + '")');
	          }

	          if ($hideItems.length === $searchBase.length) {
	            $no_results.html(that.options.noneResultsText.replace('{0}', '"' + htmlEscape(that.$searchbox.val()) + '"'));
	            that.$menuInner.append($no_results);
	            that.$lis.addClass('hidden');
	          } else {
	            $hideItems.parent().addClass('hidden');

	            var $lisVisible = that.$lis.not('.hidden'),
	                $foundDiv;

	            // hide divider if first or last visible, or if followed by another divider
	            $lisVisible.each(function (index) {
	              var $this = $(this);

	              if ($this.hasClass('divider')) {
	                if ($foundDiv === undefined) {
	                  $this.addClass('hidden');
	                } else {
	                  if ($foundDiv) $foundDiv.addClass('hidden');
	                  $foundDiv = $this;
	                }
	              } else if ($this.hasClass('dropdown-header') && $lisVisible.eq(index + 1).data('optgroup') !== $this.data('optgroup')) {
	                $this.addClass('hidden');
	              } else {
	                $foundDiv = null;
	              }
	            });
	            if ($foundDiv) $foundDiv.addClass('hidden');

	            $searchBase.not('.hidden').first().addClass('active');
	          }
	        }
	      });
	    },

	    _searchStyle: function () {
	      var styles = {
	        begins: 'ibegins',
	        startsWith: 'ibegins'
	      };

	      return styles[this.options.liveSearchStyle] || 'icontains';
	    },

	    val: function (value) {
	      if (typeof value !== 'undefined') {
	        this.$element.val(value);
	        this.render();

	        return this.$element;
	      } else {
	        return this.$element.val();
	      }
	    },

	    changeAll: function (status) {
	      if (!this.multiple) return;
	      if (typeof status === 'undefined') status = true;

	      this.findLis();

	      var $options = this.$element.find('option'),
	          $lisVisible = this.$lis.not('.divider, .dropdown-header, .disabled, .hidden'),
	          lisVisLen = $lisVisible.length,
	          selectedOptions = [];
	          
	      if (status) {
	        if ($lisVisible.filter('.selected').length === $lisVisible.length) return;
	      } else {
	        if ($lisVisible.filter('.selected').length === 0) return;
	      }
	          
	      $lisVisible.toggleClass('selected', status);

	      for (var i = 0; i < lisVisLen; i++) {
	        var origIndex = $lisVisible[i].getAttribute('data-original-index');
	        selectedOptions[selectedOptions.length] = $options.eq(origIndex)[0];
	      }

	      $(selectedOptions).prop('selected', status);

	      this.render(false);

	      this.togglePlaceholder();

	      this.$element
	        .triggerNative('change');
	    },

	    selectAll: function () {
	      return this.changeAll(true);
	    },

	    deselectAll: function () {
	      return this.changeAll(false);
	    },

	    toggle: function (e) {
	      e = e || window.event;

	      if (e) e.stopPropagation();

	      this.$button.trigger('click');
	    },

	    keydown: function (e) {
	      var $this = $(this),
	          $parent = $this.is('input') ? $this.parent().parent() : $this.parent(),
	          $items,
	          that = $parent.data('this'),
	          index,
	          next,
	          first,
	          last,
	          prev,
	          nextPrev,
	          prevIndex,
	          isActive,
	          selector = ':not(.disabled, .hidden, .dropdown-header, .divider)',
	          keyCodeMap = {
	            32: ' ',
	            48: '0',
	            49: '1',
	            50: '2',
	            51: '3',
	            52: '4',
	            53: '5',
	            54: '6',
	            55: '7',
	            56: '8',
	            57: '9',
	            59: ';',
	            65: 'a',
	            66: 'b',
	            67: 'c',
	            68: 'd',
	            69: 'e',
	            70: 'f',
	            71: 'g',
	            72: 'h',
	            73: 'i',
	            74: 'j',
	            75: 'k',
	            76: 'l',
	            77: 'm',
	            78: 'n',
	            79: 'o',
	            80: 'p',
	            81: 'q',
	            82: 'r',
	            83: 's',
	            84: 't',
	            85: 'u',
	            86: 'v',
	            87: 'w',
	            88: 'x',
	            89: 'y',
	            90: 'z',
	            96: '0',
	            97: '1',
	            98: '2',
	            99: '3',
	            100: '4',
	            101: '5',
	            102: '6',
	            103: '7',
	            104: '8',
	            105: '9'
	          };

	      if (that.options.liveSearch) $parent = $this.parent().parent();

	      if (that.options.container) $parent = that.$menu;

	      $items = $('[role="listbox"] li', $parent);

	      isActive = that.$newElement.hasClass('open');

	      if (!isActive && (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode >= 65 && e.keyCode <= 90)) {
	        if (!that.options.container) {
	          that.setSize();
	          that.$menu.parent().addClass('open');
	          isActive = true;
	        } else {
	          that.$button.trigger('click');
	        }
	        that.$searchbox.focus();
	        return;
	      }

	      if (that.options.liveSearch) {
	        if (/(^9$|27)/.test(e.keyCode.toString(10)) && isActive) {
	          e.preventDefault();
	          e.stopPropagation();
	          that.$menuInner.click();
	          that.$button.focus();
	        }
	        // $items contains li elements when liveSearch is enabled
	        $items = $('[role="listbox"] li' + selector, $parent);
	        if (!$this.val() && !/(38|40)/.test(e.keyCode.toString(10))) {
	          if ($items.filter('.active').length === 0) {
	            $items = that.$menuInner.find('li');
	            if (that.options.liveSearchNormalize) {
	              $items = $items.filter(':a' + that._searchStyle() + '(' + normalizeToBase(keyCodeMap[e.keyCode]) + ')');
	            } else {
	              $items = $items.filter(':' + that._searchStyle() + '(' + keyCodeMap[e.keyCode] + ')');
	            }
	          }
	        }
	      }

	      if (!$items.length) return;

	      if (/(38|40)/.test(e.keyCode.toString(10))) {
	        index = $items.index($items.find('a').filter(':focus').parent());
	        first = $items.filter(selector).first().index();
	        last = $items.filter(selector).last().index();
	        next = $items.eq(index).nextAll(selector).eq(0).index();
	        prev = $items.eq(index).prevAll(selector).eq(0).index();
	        nextPrev = $items.eq(next).prevAll(selector).eq(0).index();

	        if (that.options.liveSearch) {
	          $items.each(function (i) {
	            if (!$(this).hasClass('disabled')) {
	              $(this).data('index', i);
	            }
	          });
	          index = $items.index($items.filter('.active'));
	          first = $items.first().data('index');
	          last = $items.last().data('index');
	          next = $items.eq(index).nextAll().eq(0).data('index');
	          prev = $items.eq(index).prevAll().eq(0).data('index');
	          nextPrev = $items.eq(next).prevAll().eq(0).data('index');
	        }

	        prevIndex = $this.data('prevIndex');

	        if (e.keyCode == 38) {
	          if (that.options.liveSearch) index--;
	          if (index != nextPrev && index > prev) index = prev;
	          if (index < first) index = first;
	          if (index == prevIndex) index = last;
	        } else if (e.keyCode == 40) {
	          if (that.options.liveSearch) index++;
	          if (index == -1) index = 0;
	          if (index != nextPrev && index < next) index = next;
	          if (index > last) index = last;
	          if (index == prevIndex) index = first;
	        }

	        $this.data('prevIndex', index);

	        if (!that.options.liveSearch) {
	          $items.eq(index).children('a').focus();
	        } else {
	          e.preventDefault();
	          if (!$this.hasClass('dropdown-toggle')) {
	            $items.removeClass('active').eq(index).addClass('active').children('a').focus();
	            $this.focus();
	          }
	        }

	      } else if (!$this.is('input')) {
	        var keyIndex = [],
	            count,
	            prevKey;

	        $items.each(function () {
	          if (!$(this).hasClass('disabled')) {
	            if ($.trim($(this).children('a').text().toLowerCase()).substring(0, 1) == keyCodeMap[e.keyCode]) {
	              keyIndex.push($(this).index());
	            }
	          }
	        });

	        count = $(document).data('keycount');
	        count++;
	        $(document).data('keycount', count);

	        prevKey = $.trim($(':focus').text().toLowerCase()).substring(0, 1);

	        if (prevKey != keyCodeMap[e.keyCode]) {
	          count = 1;
	          $(document).data('keycount', count);
	        } else if (count >= keyIndex.length) {
	          $(document).data('keycount', 0);
	          if (count > keyIndex.length) count = 1;
	        }

	        $items.eq(keyIndex[count - 1]).children('a').focus();
	      }

	      // Select focused option if "Enter", "Spacebar" or "Tab" (when selectOnTab is true) are pressed inside the menu.
	      if ((/(13|32)/.test(e.keyCode.toString(10)) || (/(^9$)/.test(e.keyCode.toString(10)) && that.options.selectOnTab)) && isActive) {
	        if (!/(32)/.test(e.keyCode.toString(10))) e.preventDefault();
	        if (!that.options.liveSearch) {
	          var elem = $(':focus');
	          elem.click();
	          // Bring back focus for multiselects
	          elem.focus();
	          // Prevent screen from scrolling if the user hit the spacebar
	          e.preventDefault();
	          // Fixes spacebar selection of dropdown items in FF & IE
	          $(document).data('spaceSelect', true);
	        } else if (!/(32)/.test(e.keyCode.toString(10))) {
	          that.$menuInner.find('.active a').click();
	          $this.focus();
	        }
	        $(document).data('keycount', 0);
	      }

	      if ((/(^9$|27)/.test(e.keyCode.toString(10)) && isActive && (that.multiple || that.options.liveSearch)) || (/(27)/.test(e.keyCode.toString(10)) && !isActive)) {
	        that.$menu.parent().removeClass('open');
	        if (that.options.container) that.$newElement.removeClass('open');
	        that.$button.focus();
	      }
	    },

	    mobile: function () {
	      this.$element.addClass('mobile-device');
	    },

	    refresh: function () {
	      this.$lis = null;
	      this.liObj = {};
	      this.reloadLi();
	      this.render();
	      this.checkDisabled();
	      this.liHeight(true);
	      this.setStyle();
	      this.setWidth();
	      if (this.$lis) this.$searchbox.trigger('propertychange');

	      this.$element.trigger('refreshed.bs.select');
	    },

	    hide: function () {
	      this.$newElement.hide();
	    },

	    show: function () {
	      this.$newElement.show();
	    },

	    remove: function () {
	      this.$newElement.remove();
	      this.$element.remove();
	    },

	    destroy: function () {
	      this.$newElement.before(this.$element).remove();

	      if (this.$bsContainer) {
	        this.$bsContainer.remove();
	      } else {
	        this.$menu.remove();
	      }

	      this.$element
	        .off('.bs.select')
	        .removeData('selectpicker')
	        .removeClass('bs-select-hidden selectpicker');
	    }
	  };

	  // SELECTPICKER PLUGIN DEFINITION
	  // ==============================
	  function Plugin(option) {
	    // get the args of the outer function..
	    var args = arguments;
	    // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them
	    // to get lost/corrupted in android 2.3 and IE9 #715 #775
	    var _option = option;

	    [].shift.apply(args);

	    var value;
	    var chain = this.each(function () {
	      var $this = $(this);
	      if ($this.is('select')) {
	        var data = $this.data('selectpicker'),
	            options = typeof _option == 'object' && _option;

	        if (!data) {
	          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);
	          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), $this.data().template, options.template);
	          $this.data('selectpicker', (data = new Selectpicker(this, config)));
	        } else if (options) {
	          for (var i in options) {
	            if (options.hasOwnProperty(i)) {
	              data.options[i] = options[i];
	            }
	          }
	        }

	        if (typeof _option == 'string') {
	          if (data[_option] instanceof Function) {
	            value = data[_option].apply(data, args);
	          } else {
	            value = data.options[_option];
	          }
	        }
	      }
	    });

	    if (typeof value !== 'undefined') {
	      //noinspection JSUnusedAssignment
	      return value;
	    } else {
	      return chain;
	    }
	  }

	  var old = $.fn.selectpicker;
	  $.fn.selectpicker = Plugin;
	  $.fn.selectpicker.Constructor = Selectpicker;

	  // SELECTPICKER NO CONFLICT
	  // ========================
	  $.fn.selectpicker.noConflict = function () {
	    $.fn.selectpicker = old;
	    return this;
	  };

	  $(document)
	      .data('keycount', 0)
	      .on('keydown.bs.select', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="listbox"], .bs-searchbox input', Selectpicker.prototype.keydown)
	      .on('focusin.modal', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="listbox"], .bs-searchbox input', function (e) {
	        e.stopPropagation();
	      });

	  // SELECTPICKER DATA-API
	  // =====================
	  $(window).on('load.bs.select.data-api', function () {
	    $('.selectpicker').each(function () {
	      var $selectpicker = $(this);
	      Plugin.call($selectpicker, $selectpicker.data());
	    })
	  });
	})(jQuery);
	
/*date-format.js*/
/*
//对Date的扩展，将 Date 转化为指定格式的String
//月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， 
//年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) 
//例子： 
//(new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423 
//(new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18 
Date.prototype.Format = function (fmt) { //author: meizz 
 var z= {
     "M+": this.getMonth()+1, //月份 
     "d+": this.getDate(), //日 
     "h+": this.getHours(), //小时 
     "m+": this.getMinutes(), //分 
     "s+": this.getSeconds(), //秒 
     "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
     "S": this.getMilliseconds() //毫秒 
 };
 if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
 for (var k in z)
 if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (z[k]) : (("00" + z[k]).substr(("" + z[k]).length)));
 return fmt;
}
 

* * 对Date的扩展，将 Date 转化为指定格式的String * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)
可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) * eg: * (new
Date()).pattern("yyyy-MM-dd hh:mm:ss.S")==> 2006-07-02 08:09:04.423      
* (new Date()).pattern("yyyy-MM-dd E HH:mm:ss") ==> 2009-03-10 二 20:09:04      
* (new Date()).pattern("yyyy-MM-dd EE hh:mm:ss") ==> 2009-03-10 周二 08:09:04      
* (new Date()).pattern("yyyy-MM-dd EEE hh:mm:ss") ==> 2009-03-10 星期二 08:09:04      
* (new Date()).pattern("yyyy-M-d h:m:s.S") ==> 2006-7-2 8:9:4.18      
*/ 
/*       
Date.prototype.pattern=function(fmt) {         
	var o = {         
		"M+": this.getMonth()+1, //月份         
		"d+" : this.getDate(), //日   
		"h+": this.getHours(), //小时 
		//"h+" : this.getHours()%12 == 0 ? 12 : this.getHours()%12, //小时         
				"H+" : this.getHours(), //小时         
				"m+" : this.getMinutes(), //分         
				"s+" : this.getSeconds(), //秒         
				"q+" : Math.floor((this.getMonth()+3)/3), //季度         
				"S" : this.getMilliseconds() //毫秒         
	};         
	var week = {         
		"0" : "/u65e5",         
		"1" : "/u4e00",         
		"2" : "/u4e8c",         
		"3" : "/u4e09",         
		"4" : "/u56db",         
		"5" : "/u4e94",         
		"6" : "/u516d"        
	};         
	if(/(y+)/.test(fmt)){         
		fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));         
	}         
	if(/(E+)/.test(fmt)){         
		fmt=fmt.replace(RegExp.$1, ((RegExp.$1.length>1) ? (RegExp.$1.length>2 ? "/u661f/u671f" : "/u5468") : "")+week[this.getDay()+""]);         
	}         
	for(var k in o){         
		if(new RegExp("("+ k +")").test(fmt)){         
			fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));         
		}         
	}         
	return fmt;         
}  
*/
/**/
/* =========================================================
 * bootstrap-datetimepicker.js
 * =========================================================
 * Copyright 2012 Stefan Petre
 *
 * Improvements by Andrew Rowls
 * Improvements by Sébastien Malot
 * Improvements by Yun Lai
 * Improvements by Kenneth Henderick
 * Improvements by CuGBabyBeaR
 * Improvements by Christian Vaas <auspex@auspex.eu>
 *
 * Project URL : http://www.malot.fr/bootstrap-datetimepicker
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function(factory){
    if (typeof define === 'function' && define.amd)
      define(['jquery'], factory);
    else if (typeof exports === 'object')
      factory(require('jquery'));
    else
      factory(jQuery);

}(function($, undefined){

  // Add ECMA262-5 Array methods if not supported natively (IE8)
  if (!('indexOf' in Array.prototype)) {
    Array.prototype.indexOf = function (find, i) {
      if (i === undefined) i = 0;
      if (i < 0) i += this.length;
      if (i < 0) i = 0;
      for (var n = this.length; i < n; i++) {
        if (i in this && this[i] === find) {
          return i;
        }
      }
      return -1;
    }
  }

  // Add timezone abbreviation support for ie6+, Chrome, Firefox
  function timeZoneAbbreviation() {
    var abbreviation, date, formattedStr, i, len, matchedStrings, ref, str;
    date = (new Date()).toString();
    formattedStr = ((ref = date.split('(')[1]) != null ? ref.slice(0, -1) : 0) || date.split(' ');
    if (formattedStr instanceof Array) {
      matchedStrings = [];
      for (var i = 0, len = formattedStr.length; i < len; i++) {
        str = formattedStr[i];
        if ((abbreviation = (ref = str.match(/\b[A-Z]+\b/)) !== null) ? ref[0] : 0) {
          matchedStrings.push(abbreviation);
        }
      }
      formattedStr = matchedStrings.pop();
    }
    return formattedStr;
  }

  function UTCDate() {
    return new Date(Date.UTC.apply(Date, arguments));
  }

  // Picker object
  var Datetimepicker = function (element, options) {
    var that = this;

    this.element = $(element);

    // add container for single page application
    // when page switch the datetimepicker div will be removed also.
    this.container = options.container || 'body';

    this.language = options.language || this.element.data('date-language') || 'en';
    this.language = this.language in dates ? this.language : this.language.split('-')[0]; // fr-CA fallback to fr
    this.language = this.language in dates ? this.language : 'en';
    this.isRTL = dates[this.language].rtl || false;
    this.formatType = options.formatType || this.element.data('format-type') || 'standard';
    this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || DPGlobal.getDefaultFormat(this.formatType, 'input'), this.formatType);
    this.isInline = false;
    this.isVisible = false;
    this.isInput = this.element.is('input');
    this.fontAwesome = options.fontAwesome || this.element.data('font-awesome') || false;

    this.bootcssVer = options.bootcssVer || (this.isInput ? (this.element.is('.form-control') ? 3 : 2) : ( this.bootcssVer = this.element.is('.input-group') ? 3 : 2 ));

    this.component = this.element.is('.date') ? ( this.bootcssVer === 3 ? this.element.find('.input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-remove, .input-group-addon .glyphicon-calendar, .input-group-addon .fa-calendar, .input-group-addon .fa-clock-o').parent() : this.element.find('.add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar, .add-on .fa-calendar, .add-on .fa-clock-o').parent()) : false;
    this.componentReset = this.element.is('.date') ? ( this.bootcssVer === 3 ? this.element.find('.input-group-addon .glyphicon-remove, .input-group-addon .fa-times').parent():this.element.find('.add-on .icon-remove, .add-on .fa-times').parent()) : false;
    this.hasInput = this.component && this.element.find('input').length;
    if (this.component && this.component.length === 0) {
      this.component = false;
    }
    this.linkField = options.linkField || this.element.data('link-field') || false;
    this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || DPGlobal.getDefaultFormat(this.formatType, 'link'), this.formatType);
    this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
    this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
    this.showMeridian = options.showMeridian || this.element.data('show-meridian') || false;
    this.initialDate = options.initialDate || new Date();
    this.zIndex = options.zIndex || this.element.data('z-index') || undefined;
    this.title = typeof options.title === 'undefined' ? false : options.title;
    this.timezone = options.timezone || timeZoneAbbreviation();

    this.icons = {
      leftArrow: this.fontAwesome ? 'fa-arrow-left' : (this.bootcssVer === 3 ? 'glyphicon-arrow-left' : 'icon-arrow-left'),
      rightArrow: this.fontAwesome ? 'fa-arrow-right' : (this.bootcssVer === 3 ? 'glyphicon-arrow-right' : 'icon-arrow-right')
    }
    this.icontype = this.fontAwesome ? 'fa' : 'glyphicon';

    this._attachEvents();

    this.clickedOutside = function (e) {
        // Clicked outside the datetimepicker, hide it
        if ($(e.target).closest('.datetimepicker').length === 0) {
            that.hide();
        }
    }

    this.formatViewType = 'datetime';
    if ('formatViewType' in options) {
      this.formatViewType = options.formatViewType;
    } else if ('formatViewType' in this.element.data()) {
      this.formatViewType = this.element.data('formatViewType');
    }

    this.minView = 0;
    if ('minView' in options) {
      this.minView = options.minView;
    } else if ('minView' in this.element.data()) {
      this.minView = this.element.data('min-view');
    }
    this.minView = DPGlobal.convertViewMode(this.minView);

    this.maxView = DPGlobal.modes.length - 1;
    if ('maxView' in options) {
      this.maxView = options.maxView;
    } else if ('maxView' in this.element.data()) {
      this.maxView = this.element.data('max-view');
    }
    this.maxView = DPGlobal.convertViewMode(this.maxView);

    this.wheelViewModeNavigation = false;
    if ('wheelViewModeNavigation' in options) {
      this.wheelViewModeNavigation = options.wheelViewModeNavigation;
    } else if ('wheelViewModeNavigation' in this.element.data()) {
      this.wheelViewModeNavigation = this.element.data('view-mode-wheel-navigation');
    }

    this.wheelViewModeNavigationInverseDirection = false;

    if ('wheelViewModeNavigationInverseDirection' in options) {
      this.wheelViewModeNavigationInverseDirection = options.wheelViewModeNavigationInverseDirection;
    } else if ('wheelViewModeNavigationInverseDirection' in this.element.data()) {
      this.wheelViewModeNavigationInverseDirection = this.element.data('view-mode-wheel-navigation-inverse-dir');
    }

    this.wheelViewModeNavigationDelay = 100;
    if ('wheelViewModeNavigationDelay' in options) {
      this.wheelViewModeNavigationDelay = options.wheelViewModeNavigationDelay;
    } else if ('wheelViewModeNavigationDelay' in this.element.data()) {
      this.wheelViewModeNavigationDelay = this.element.data('view-mode-wheel-navigation-delay');
    }

    this.startViewMode = 2;
    if ('startView' in options) {
      this.startViewMode = options.startView;
    } else if ('startView' in this.element.data()) {
      this.startViewMode = this.element.data('start-view');
    }
    this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
    this.viewMode = this.startViewMode;

    this.viewSelect = this.minView;
    if ('viewSelect' in options) {
      this.viewSelect = options.viewSelect;
    } else if ('viewSelect' in this.element.data()) {
      this.viewSelect = this.element.data('view-select');
    }
    this.viewSelect = DPGlobal.convertViewMode(this.viewSelect);

    this.forceParse = true;
    if ('forceParse' in options) {
      this.forceParse = options.forceParse;
    } else if ('dateForceParse' in this.element.data()) {
      this.forceParse = this.element.data('date-force-parse');
    }
    var template = this.bootcssVer === 3 ? DPGlobal.templateV3 : DPGlobal.template;
    while (template.indexOf('{iconType}') !== -1) {
      template = template.replace('{iconType}', this.icontype);
    }
    while (template.indexOf('{leftArrow}') !== -1) {
      template = template.replace('{leftArrow}', this.icons.leftArrow);
    }
    while (template.indexOf('{rightArrow}') !== -1) {
      template = template.replace('{rightArrow}', this.icons.rightArrow);
    }
    this.picker = $(template)
      .appendTo(this.isInline ? this.element : this.container) // 'body')
      .on({
        click:     $.proxy(this.click, this),
        mousedown: $.proxy(this.mousedown, this)
      });

    if (this.wheelViewModeNavigation) {
      if ($.fn.mousewheel) {
        this.picker.on({mousewheel: $.proxy(this.mousewheel, this)});
      } else {
        console.log('Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option');
      }
    }

    if (this.isInline) {
      this.picker.addClass('datetimepicker-inline');
    } else {
      this.picker.addClass('datetimepicker-dropdown-' + this.pickerPosition + ' dropdown-menu');
    }
    if (this.isRTL) {
      this.picker.addClass('datetimepicker-rtl');
      var selector = this.bootcssVer === 3 ? '.prev span, .next span' : '.prev i, .next i';
      this.picker.find(selector).toggleClass(this.icons.leftArrow + ' ' + this.icons.rightArrow);
    }

    $(document).on('mousedown touchend', this.clickedOutside);

    this.autoclose = false;
    if ('autoclose' in options) {
      this.autoclose = options.autoclose;
    } else if ('dateAutoclose' in this.element.data()) {
      this.autoclose = this.element.data('date-autoclose');
    }

    this.keyboardNavigation = true;
    if ('keyboardNavigation' in options) {
      this.keyboardNavigation = options.keyboardNavigation;
    } else if ('dateKeyboardNavigation' in this.element.data()) {
      this.keyboardNavigation = this.element.data('date-keyboard-navigation');
    }

    this.todayBtn = (options.todayBtn || this.element.data('date-today-btn') || false);
    this.clearBtn = (options.clearBtn || this.element.data('date-clear-btn') || false);
    this.todayHighlight = (options.todayHighlight || this.element.data('date-today-highlight') || false);

    this.weekStart = 0;
    if (typeof options.weekStart !== 'undefined') {
      this.weekStart = options.weekStart;
    } else if (typeof this.element.data('date-weekstart') !== 'undefined') {
      this.weekStart = this.element.data('date-weekstart');
    } else if (typeof dates[this.language].weekStart !== 'undefined') {
      this.weekStart = dates[this.language].weekStart;
    }
    this.weekStart = this.weekStart % 7;
    this.weekEnd = ((this.weekStart + 6) % 7);
    this.onRenderDay = function (date) {
      var render = (options.onRenderDay || function () { return []; })(date);
      if (typeof render === 'string') {
        render = [render];
      }
      var res = ['day'];
      return res.concat((render ? render : []));
    };
    this.onRenderHour = function (date) {
      var render = (options.onRenderHour || function () { return []; })(date);
      var res = ['hour'];
      if (typeof render === 'string') {
        render = [render];
      }
      return res.concat((render ? render : []));
    };
    this.onRenderMinute = function (date) {
      var render = (options.onRenderMinute || function () { return []; })(date);
      var res = ['minute'];
      if (typeof render === 'string') {
        render = [render];
      }
      if (date < this.startDate || date > this.endDate) {
        res.push('disabled');
      } else if (Math.floor(this.date.getUTCMinutes() / this.minuteStep) === Math.floor(date.getUTCMinutes() / this.minuteStep)) {
        res.push('active');
      }
      return res.concat((render ? render : []));
    };
    this.onRenderYear = function (date) {
      var render = (options.onRenderYear || function () { return []; })(date);
      var res = ['year'];
      if (typeof render === 'string') {
        render = [render];
      }
      if (this.date.getUTCFullYear() === date.getUTCFullYear()) {
        res.push('active');
      }
      var currentYear = date.getUTCFullYear();
      var endYear = this.endDate.getUTCFullYear();
      if (date < this.startDate || currentYear > endYear) {
        res.push('disabled');
      }
      return res.concat((render ? render : []));
    }
    this.onRenderMonth = function (date) {
      var render = (options.onRenderMonth || function () { return []; })(date);
      var res = ['month'];
      if (typeof render === 'string') {
        render = [render];
      }
      return res.concat((render ? render : []));
    }
    this.startDate = new Date(-8639968443048000);
    this.endDate = new Date(8639968443048000);
    this.datesDisabled = [];
    this.daysOfWeekDisabled = [];
    this.setStartDate(options.startDate || this.element.data('date-startdate'));
    this.setEndDate(options.endDate || this.element.data('date-enddate'));
    this.setDatesDisabled(options.datesDisabled || this.element.data('date-dates-disabled'));
    this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));
    this.setMinutesDisabled(options.minutesDisabled || this.element.data('date-minute-disabled'));
    this.setHoursDisabled(options.hoursDisabled || this.element.data('date-hour-disabled'));
    this.fillDow();
    this.fillMonths();
    this.update();
    this.showMode();

    if (this.isInline) {
      this.show();
    }
  };

  Datetimepicker.prototype = {
    constructor: Datetimepicker,

    _events:       [],
    _attachEvents: function () {
      this._detachEvents();
      if (this.isInput) { // single input
        this._events = [
          [this.element, {
            focus:   $.proxy(this.show, this),
            keyup:   $.proxy(this.update, this),
            keydown: $.proxy(this.keydown, this)
          }]
        ];
      }
      else if (this.component && this.hasInput) { // component: input + button
        this._events = [
          // For components that are not readonly, allow keyboard nav
          [this.element.find('input'), {
            focus:   $.proxy(this.show, this),
            keyup:   $.proxy(this.update, this),
            keydown: $.proxy(this.keydown, this)
          }],
          [this.component, {
            click: $.proxy(this.show, this)
          }]
        ];
        if (this.componentReset) {
          this._events.push([
            this.componentReset,
            {click: $.proxy(this.reset, this)}
          ]);
        }
      }
      else if (this.element.is('div')) {  // inline datetimepicker
        this.isInline = true;
      }
      else {
        this._events = [
          [this.element, {
            click: $.proxy(this.show, this)
          }]
        ];
      }
      for (var i = 0, el, ev; i < this._events.length; i++) {
        el = this._events[i][0];
        ev = this._events[i][1];
        el.on(ev);
      }
    },

    _detachEvents: function () {
      for (var i = 0, el, ev; i < this._events.length; i++) {
        el = this._events[i][0];
        ev = this._events[i][1];
        el.off(ev);
      }
      this._events = [];
    },

    show: function (e) {
      this.picker.show();
      this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
      if (this.forceParse) {
        this.update();
      }
      this.place();
      $(window).on('resize', $.proxy(this.place, this));
      if (e) {
        e.stopPropagation();
        e.preventDefault();
      }
      this.isVisible = true;
      this.element.trigger({
        type: 'show',
        date: this.date
      });
    },

    hide: function () {
      if (!this.isVisible) return;
      if (this.isInline) return;
      this.picker.hide();
      $(window).off('resize', this.place);
      this.viewMode = this.startViewMode;
      this.showMode();
      if (!this.isInput) {
        $(document).off('mousedown', this.hide);
      }

      if (
        this.forceParse &&
          (
            this.isInput && this.element.val() ||
              this.hasInput && this.element.find('input').val()
            )
        )
        this.setValue();
      this.isVisible = false;
      this.element.trigger({
        type: 'hide',
        date: this.date
      });
    },

    remove: function () {
      this._detachEvents();
      $(document).off('mousedown', this.clickedOutside);
      this.picker.remove();
      delete this.picker;
      delete this.element.data().datetimepicker;
    },

    getDate: function () {
      var d = this.getUTCDate();
      if (d === null) {
        return null;
      }
      return new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
    },

    getUTCDate: function () {
      return this.date;
    },

    getInitialDate: function () {
      return this.initialDate
    },

    setInitialDate: function (initialDate) {
      this.initialDate = initialDate;
    },

    setDate: function (d) {
      this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset() * 60000)));
    },

    setUTCDate: function (d) {
      if (d >= this.startDate && d <= this.endDate) {
        this.date = d;
        this.setValue();
        this.viewDate = this.date;
        this.fill();
      } else {
        this.element.trigger({
          type:      'outOfRange',
          date:      d,
          startDate: this.startDate,
          endDate:   this.endDate
        });
      }
    },

    setFormat: function (format) {
      this.format = DPGlobal.parseFormat(format, this.formatType);
      var element;
      if (this.isInput) {
        element = this.element;
      } else if (this.component) {
        element = this.element.find('input');
      }
      if (element && element.val()) {
        this.setValue();
      }
    },

    setValue: function () {
      var formatted = this.getFormattedDate();
      if (!this.isInput) {
        if (this.component) {
          this.element.find('input').val(formatted);
        }
        this.element.data('date', formatted);
      } else {
        this.element.val(formatted);
      }
      if (this.linkField) {
        $('#' + this.linkField).val(this.getFormattedDate(this.linkFormat));
      }
    },

    getFormattedDate: function (format) {
      format = format || this.format;
      return DPGlobal.formatDate(this.date, format, this.language, this.formatType, this.timezone);
    },

    setStartDate: function (startDate) {
      this.startDate = startDate || this.startDate;
      if (this.startDate.valueOf() !== 8639968443048000) {
        this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language, this.formatType, this.timezone);
      }
      this.update();
      this.updateNavArrows();
    },

    setEndDate: function (endDate) {
      this.endDate = endDate || this.endDate;
      if (this.endDate.valueOf() !== 8639968443048000) {
        this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language, this.formatType, this.timezone);
      }
      this.update();
      this.updateNavArrows();
    },

    setDatesDisabled: function (datesDisabled) {
      this.datesDisabled = datesDisabled || [];
      if (!$.isArray(this.datesDisabled)) {
        this.datesDisabled = this.datesDisabled.split(/,\s*/);
      }
      var mThis = this;
      this.datesDisabled = $.map(this.datesDisabled, function (d) {
        return DPGlobal.parseDate(d, mThis.format, mThis.language, mThis.formatType, mThis.timezone).toDateString();
      });
      this.update();
      this.updateNavArrows();
    },

    setTitle: function (selector, value) {
      return this.picker.find(selector)
        .find('th:eq(1)')
        .text(this.title === false ? value : this.title);
    },

    setDaysOfWeekDisabled: function (daysOfWeekDisabled) {
      this.daysOfWeekDisabled = daysOfWeekDisabled || [];
      if (!$.isArray(this.daysOfWeekDisabled)) {
        this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
      }
      this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {
        return parseInt(d, 10);
      });
      this.update();
      this.updateNavArrows();
    },

    setMinutesDisabled: function (minutesDisabled) {
      this.minutesDisabled = minutesDisabled || [];
      if (!$.isArray(this.minutesDisabled)) {
        this.minutesDisabled = this.minutesDisabled.split(/,\s*/);
      }
      this.minutesDisabled = $.map(this.minutesDisabled, function (d) {
        return parseInt(d, 10);
      });
      this.update();
      this.updateNavArrows();
    },

    setHoursDisabled: function (hoursDisabled) {
      this.hoursDisabled = hoursDisabled || [];
      if (!$.isArray(this.hoursDisabled)) {
        this.hoursDisabled = this.hoursDisabled.split(/,\s*/);
      }
      this.hoursDisabled = $.map(this.hoursDisabled, function (d) {
        return parseInt(d, 10);
      });
      this.update();
      this.updateNavArrows();
    },

    place: function () {
      if (this.isInline) return;

      if (!this.zIndex) {
        var index_highest = 0;
        $('div').each(function () {
          var index_current = parseInt($(this).css('zIndex'), 10);
          if (index_current > index_highest) {
            index_highest = index_current;
          }
        });
        this.zIndex = index_highest + 10;
      }

      var offset, top, left, containerOffset;
      if (this.container instanceof $) {
        containerOffset = this.container.offset();
      } else {
        containerOffset = $(this.container).offset();
      }

      if (this.component) {
        offset = this.component.offset();
        left = offset.left;
        if (this.pickerPosition === 'bottom-left' || this.pickerPosition === 'top-left') {
          left += this.component.outerWidth() - this.picker.outerWidth();
        }
      } else {
        offset = this.element.offset();
        left = offset.left;
        if (this.pickerPosition === 'bottom-left' || this.pickerPosition === 'top-left') {
          left += this.element.outerWidth() - this.picker.outerWidth();
        }
      }

      var bodyWidth = document.body.clientWidth || window.innerWidth;
      if (left + 220 > bodyWidth) {
        left = bodyWidth - 220;
      }

      if (this.pickerPosition === 'top-left' || this.pickerPosition === 'top-right') {
        top = offset.top - this.picker.outerHeight();
      } else {
        top = offset.top + this.height;
      }

      top = top - containerOffset.top;
      left = left - containerOffset.left;

      this.picker.css({
        top:    top,
        left:   left,
        zIndex: this.zIndex
      });
    },

    hour_minute: "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]",

    update: function () {
      var date, fromArgs = false;
      if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
        date = arguments[0];
        fromArgs = true;
      } else {
        date = (this.isInput ? this.element.val() : this.element.find('input').val()) || this.element.data('date') || this.initialDate;
        if (typeof date === 'string') {
          date = date.replace(/^\s+|\s+$/g,'');
        }
      }

      if (!date) {
        date = new Date();
        fromArgs = false;
      }

      if (typeof date === "string") {
        if (new RegExp(this.hour_minute).test(date) || new RegExp(this.hour_minute + ":[0-5][0-9]").test(date)) {
          date = this.getDate()
        }
      }

      this.date = DPGlobal.parseDate(date, this.format, this.language, this.formatType, this.timezone);

      if (fromArgs) this.setValue();

      if (this.date < this.startDate) {
        this.viewDate = new Date(this.startDate);
      } else if (this.date > this.endDate) {
        this.viewDate = new Date(this.endDate);
      } else {
        this.viewDate = new Date(this.date);
      }
      this.fill();
    },

    fillDow: function () {
      var dowCnt = this.weekStart,
        html = '<tr>';
      while (dowCnt < this.weekStart + 7) {
        html += '<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>';
      }
      html += '</tr>';
      this.picker.find('.datetimepicker-days thead').append(html);
    },

    fillMonths: function () {
      var html = '';
      var d = new Date(this.viewDate);
      for (var i = 0; i < 12; i++) {
        d.setUTCMonth(i);
        var classes = this.onRenderMonth(d);
        html += '<span class="' + classes.join(' ') + '">' + dates[this.language].monthsShort[i] + '</span>';
      }
      this.picker.find('.datetimepicker-months td').html(html);
    },

    fill: function () {
      if (!this.date || !this.viewDate) {
        return;
      }
      var d = new Date(this.viewDate),
        year = d.getUTCFullYear(),
        month = d.getUTCMonth(),
        dayMonth = d.getUTCDate(),
        hours = d.getUTCHours(),
        startYear = this.startDate.getUTCFullYear(),
        startMonth = this.startDate.getUTCMonth(),
        endYear = this.endDate.getUTCFullYear(),
        endMonth = this.endDate.getUTCMonth() + 1,
        currentDate = (new UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate())).valueOf(),
        today = new Date();
      this.setTitle('.datetimepicker-days', dates[this.language].months[month] + ' ' + year)
      if (this.formatViewType === 'time') {
        var formatted = this.getFormattedDate();
        this.setTitle('.datetimepicker-hours', formatted);
        this.setTitle('.datetimepicker-minutes', formatted);
      } else {
        this.setTitle('.datetimepicker-hours', dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
        this.setTitle('.datetimepicker-minutes', dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
      }
      this.picker.find('tfoot th.today')
        .text(dates[this.language].today || dates['en'].today)
        .toggle(this.todayBtn !== false);
      this.picker.find('tfoot th.clear')
        .text(dates[this.language].clear || dates['en'].clear)
        .toggle(this.clearBtn !== false);
      this.updateNavArrows();
      this.fillMonths();
      var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
        day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
      prevMonth.setUTCDate(day);
      prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
      var nextMonth = new Date(prevMonth);
      nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
      nextMonth = nextMonth.valueOf();
      var html = [];
      var classes;
      while (prevMonth.valueOf() < nextMonth) {
        if (prevMonth.getUTCDay() === this.weekStart) {
          html.push('<tr>');
        }
        classes = this.onRenderDay(prevMonth);
        if (prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() === year && prevMonth.getUTCMonth() < month)) {
          classes.push('old');
        } else if (prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() === year && prevMonth.getUTCMonth() > month)) {
          classes.push('new');
        }
        // Compare internal UTC date with local today, not UTC today
        if (this.todayHighlight &&
          prevMonth.getUTCFullYear() === today.getFullYear() &&
          prevMonth.getUTCMonth() === today.getMonth() &&
          prevMonth.getUTCDate() === today.getDate()) {
          classes.push('today');
        }
        if (prevMonth.valueOf() === currentDate) {
          classes.push('active');
        }
        if ((prevMonth.valueOf() + 86400000) <= this.startDate || prevMonth.valueOf() > this.endDate ||
          $.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1 ||
          $.inArray(prevMonth.toDateString(), this.datesDisabled) !== -1) {
          classes.push('disabled');
        }
        html.push('<td class="' + classes.join(' ') + '">' + prevMonth.getUTCDate() + '</td>');
        if (prevMonth.getUTCDay() === this.weekEnd) {
          html.push('</tr>');
        }
        prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
      }
      this.picker.find('.datetimepicker-days tbody').empty().append(html.join(''));

      html = [];
      var txt = '', meridian = '', meridianOld = '';
      var hoursDisabled = this.hoursDisabled || [];
      d = new Date(this.viewDate)
      for (var i = 0; i < 24; i++) {
        d.setUTCHours(i);
        classes = this.onRenderHour(d);
        if (hoursDisabled.indexOf(i) !== -1) {
          classes.push('disabled');
        }
        var actual = UTCDate(year, month, dayMonth, i);
        // We want the previous hour for the startDate
        if ((actual.valueOf() + 3600000) <= this.startDate || actual.valueOf() > this.endDate) {
          classes.push('disabled');
        } else if (hours === i) {
          classes.push('active');
        }
        if (this.showMeridian && dates[this.language].meridiem.length === 2) {
          meridian = (i < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
          if (meridian !== meridianOld) {
            if (meridianOld !== '') {
              html.push('</fieldset>');
            }
            html.push('<fieldset class="hour"><legend>' + meridian.toUpperCase() + '</legend>');
          }
          meridianOld = meridian;
          txt = (i % 12 ? i % 12 : 12);
          if (i < 12) {
            classes.push('hour_am');
          } else {
            classes.push('hour_pm');
          }
          html.push('<span class="' + classes.join(' ') + '">' + txt + '</span>');
          if (i === 23) {
            html.push('</fieldset>');
          }
        } else {
          txt = i + ':00';
          html.push('<span class="' + classes.join(' ') + '">' + txt + '</span>');
        }
      }
      this.picker.find('.datetimepicker-hours td').html(html.join(''));

      html = [];
      txt = '';
      meridian = '';
      meridianOld = '';
      var minutesDisabled = this.minutesDisabled || [];
      d = new Date(this.viewDate);
      for (var i = 0; i < 60; i += this.minuteStep) {
        if (minutesDisabled.indexOf(i) !== -1) continue;
        d.setUTCMinutes(i);
        d.setUTCSeconds(0);
        classes = this.onRenderMinute(d);
        if (this.showMeridian && dates[this.language].meridiem.length === 2) {
          meridian = (hours < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
          if (meridian !== meridianOld) {
            if (meridianOld !== '') {
              html.push('</fieldset>');
            }
            html.push('<fieldset class="minute"><legend>' + meridian.toUpperCase() + '</legend>');
          }
          meridianOld = meridian;
          txt = (hours % 12 ? hours % 12 : 12);
          html.push('<span class="' + classes.join(' ') + '">' + txt + ':' + (i < 10 ? '0' + i : i) + '</span>');
          if (i === 59) {
            html.push('</fieldset>');
          }
        } else {
          txt = i + ':00';
          html.push('<span class="' + classes.join(' ') + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
        }
      }
      this.picker.find('.datetimepicker-minutes td').html(html.join(''));

      var currentYear = this.date.getUTCFullYear();
      var months = this.setTitle('.datetimepicker-months', year)
        .end()
        .find('.month').removeClass('active');
      if (currentYear === year) {
        // getUTCMonths() returns 0 based, and we need to select the next one
        // To cater bootstrap 2 we don't need to select the next one
        months.eq(this.date.getUTCMonth()).addClass('active');
      }
      if (year < startYear || year > endYear) {
        months.addClass('disabled');
      }
      if (year === startYear) {
        months.slice(0, startMonth).addClass('disabled');
      }
      if (year === endYear) {
        months.slice(endMonth).addClass('disabled');
      }

      html = '';
      year = parseInt(year / 10, 10) * 10;
      var yearCont = this.setTitle('.datetimepicker-years', year + '-' + (year + 9))
        .end()
        .find('td');
      year -= 1;
      d = new Date(this.viewDate);
      for (var i = -1; i < 11; i++) {
        d.setUTCFullYear(year);
        classes = this.onRenderYear(d);
        if (i === -1 || i === 10) {
          classes.push(old);
        }
        html += '<span class="' + classes.join(' ') + '">' + year + '</span>';
        year += 1;
      }
      yearCont.html(html);
      this.place();
    },

    updateNavArrows: function () {
      var d = new Date(this.viewDate),
        year = d.getUTCFullYear(),
        month = d.getUTCMonth(),
        day = d.getUTCDate(),
        hour = d.getUTCHours();
      switch (this.viewMode) {
        case 0:
          if (year <= this.startDate.getUTCFullYear()
            && month <= this.startDate.getUTCMonth()
            && day <= this.startDate.getUTCDate()
            && hour <= this.startDate.getUTCHours()) {
            this.picker.find('.prev').css({visibility: 'hidden'});
          } else {
            this.picker.find('.prev').css({visibility: 'visible'});
          }
          if (year >= this.endDate.getUTCFullYear()
            && month >= this.endDate.getUTCMonth()
            && day >= this.endDate.getUTCDate()
            && hour >= this.endDate.getUTCHours()) {
            this.picker.find('.next').css({visibility: 'hidden'});
          } else {
            this.picker.find('.next').css({visibility: 'visible'});
          }
          break;
        case 1:
          if (year <= this.startDate.getUTCFullYear()
            && month <= this.startDate.getUTCMonth()
            && day <= this.startDate.getUTCDate()) {
            this.picker.find('.prev').css({visibility: 'hidden'});
          } else {
            this.picker.find('.prev').css({visibility: 'visible'});
          }
          if (year >= this.endDate.getUTCFullYear()
            && month >= this.endDate.getUTCMonth()
            && day >= this.endDate.getUTCDate()) {
            this.picker.find('.next').css({visibility: 'hidden'});
          } else {
            this.picker.find('.next').css({visibility: 'visible'});
          }
          break;
        case 2:
          if (year <= this.startDate.getUTCFullYear()
            && month <= this.startDate.getUTCMonth()) {
            this.picker.find('.prev').css({visibility: 'hidden'});
          } else {
            this.picker.find('.prev').css({visibility: 'visible'});
          }
          if (year >= this.endDate.getUTCFullYear()
            && month >= this.endDate.getUTCMonth()) {
            this.picker.find('.next').css({visibility: 'hidden'});
          } else {
            this.picker.find('.next').css({visibility: 'visible'});
          }
          break;
        case 3:
        case 4:
          if (year <= this.startDate.getUTCFullYear()) {
            this.picker.find('.prev').css({visibility: 'hidden'});
          } else {
            this.picker.find('.prev').css({visibility: 'visible'});
          }
          if (year >= this.endDate.getUTCFullYear()) {
            this.picker.find('.next').css({visibility: 'hidden'});
          } else {
            this.picker.find('.next').css({visibility: 'visible'});
          }
          break;
      }
    },

    mousewheel: function (e) {

      e.preventDefault();
      e.stopPropagation();

      if (this.wheelPause) {
        return;
      }

      this.wheelPause = true;

      var originalEvent = e.originalEvent;

      var delta = originalEvent.wheelDelta;

      var mode = delta > 0 ? 1 : (delta === 0) ? 0 : -1;

      if (this.wheelViewModeNavigationInverseDirection) {
        mode = -mode;
      }

      this.showMode(mode);

      setTimeout($.proxy(function () {

        this.wheelPause = false

      }, this), this.wheelViewModeNavigationDelay);

    },

    click: function (e) {
      e.stopPropagation();
      e.preventDefault();
      var target = $(e.target).closest('span, td, th, legend');
      if (target.is('.' + this.icontype)) {
        target = $(target).parent().closest('span, td, th, legend');
      }
      if (target.length === 1) {
        if (target.is('.disabled')) {
          this.element.trigger({
            type:      'outOfRange',
            date:      this.viewDate,
            startDate: this.startDate,
            endDate:   this.endDate
          });
          return;
        }
        switch (target[0].nodeName.toLowerCase()) {
          case 'th':
            switch (target[0].className) {
              case 'switch':
                this.showMode(1);
                break;
              case 'prev':
              case 'next':
                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1);
                switch (this.viewMode) {
                  case 0:
                    this.viewDate = this.moveHour(this.viewDate, dir);
                    break;
                  case 1:
                    this.viewDate = this.moveDate(this.viewDate, dir);
                    break;
                  case 2:
                    this.viewDate = this.moveMonth(this.viewDate, dir);
                    break;
                  case 3:
                  case 4:
                    this.viewDate = this.moveYear(this.viewDate, dir);
                    break;
                }
                this.fill();
                this.element.trigger({
                  type:      target[0].className + ':' + this.convertViewModeText(this.viewMode),
                  date:      this.viewDate,
                  startDate: this.startDate,
                  endDate:   this.endDate
                });
                break;
              case 'clear':
                this.reset();
                if (this.autoclose) {
                  this.hide();
                }
                break;
              case 'today':
                var date = new Date();
                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);

                // Respect startDate and endDate.
                if (date < this.startDate) date = this.startDate;
                else if (date > this.endDate) date = this.endDate;

                this.viewMode = this.startViewMode;
                this.showMode(0);
                this._setDate(date);
                this.fill();
                if (this.autoclose) {
                  this.hide();
                }
                break;
            }
            break;
          case 'span':
            if (!target.is('.disabled')) {
              var year = this.viewDate.getUTCFullYear(),
                month = this.viewDate.getUTCMonth(),
                day = this.viewDate.getUTCDate(),
                hours = this.viewDate.getUTCHours(),
                minutes = this.viewDate.getUTCMinutes(),
                seconds = this.viewDate.getUTCSeconds();

              if (target.is('.month')) {
                this.viewDate.setUTCDate(1);
                month = target.parent().find('span').index(target);
                day = this.viewDate.getUTCDate();
                this.viewDate.setUTCMonth(month);
                this.element.trigger({
                  type: 'changeMonth',
                  date: this.viewDate
                });
                if (this.viewSelect >= 3) {
                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                }
              } else if (target.is('.year')) {
                this.viewDate.setUTCDate(1);
                year = parseInt(target.text(), 10) || 0;
                this.viewDate.setUTCFullYear(year);
                this.element.trigger({
                  type: 'changeYear',
                  date: this.viewDate
                });
                if (this.viewSelect >= 4) {
                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                }
              } else if (target.is('.hour')) {
                hours = parseInt(target.text(), 10) || 0;
                if (target.hasClass('hour_am') || target.hasClass('hour_pm')) {
                  if (hours === 12 && target.hasClass('hour_am')) {
                    hours = 0;
                  } else if (hours !== 12 && target.hasClass('hour_pm')) {
                    hours += 12;
                  }
                }
                this.viewDate.setUTCHours(hours);
                this.element.trigger({
                  type: 'changeHour',
                  date: this.viewDate
                });
                if (this.viewSelect >= 1) {
                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                }
              } else if (target.is('.minute')) {
                minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
                this.viewDate.setUTCMinutes(minutes);
                this.element.trigger({
                  type: 'changeMinute',
                  date: this.viewDate
                });
                if (this.viewSelect >= 0) {
                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                }
              }
              if (this.viewMode !== 0) {
                var oldViewMode = this.viewMode;
                this.showMode(-1);
                this.fill();
                if (oldViewMode === this.viewMode && this.autoclose) {
                  this.hide();
                }
              } else {
                this.fill();
                if (this.autoclose) {
                  this.hide();
                }
              }
            }
            break;
          case 'td':
            if (target.is('.day') && !target.is('.disabled')) {
              var day = parseInt(target.text(), 10) || 1;
              var year = this.viewDate.getUTCFullYear(),
                month = this.viewDate.getUTCMonth(),
                hours = this.viewDate.getUTCHours(),
                minutes = this.viewDate.getUTCMinutes(),
                seconds = this.viewDate.getUTCSeconds();
              if (target.is('.old')) {
                if (month === 0) {
                  month = 11;
                  year -= 1;
                } else {
                  month -= 1;
                }
              } else if (target.is('.new')) {
                if (month === 11) {
                  month = 0;
                  year += 1;
                } else {
                  month += 1;
                }
              }
              this.viewDate.setUTCFullYear(year);
              this.viewDate.setUTCMonth(month, day);
              this.element.trigger({
                type: 'changeDay',
                date: this.viewDate
              });
              if (this.viewSelect >= 2) {
                this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
              }
            }
            var oldViewMode = this.viewMode;
            this.showMode(-1);
            this.fill();
            if (oldViewMode === this.viewMode && this.autoclose) {
              this.hide();
            }
            break;
        }
      }
    },

    _setDate: function (date, which) {
      if (!which || which === 'date')
        this.date = date;
      if (!which || which === 'view')
        this.viewDate = date;
      this.fill();
      this.setValue();
      var element;
      if (this.isInput) {
        element = this.element;
      } else if (this.component) {
        element = this.element.find('input');
      }
      if (element) {
        element.change();
      }
      this.element.trigger({
        type: 'changeDate',
        date: this.getDate()
      });
      if(date === null)
        this.date = this.viewDate;
    },

    moveMinute: function (date, dir) {
      if (!dir) return date;
      var new_date = new Date(date.valueOf());
      //dir = dir > 0 ? 1 : -1;
      new_date.setUTCMinutes(new_date.getUTCMinutes() + (dir * this.minuteStep));
      return new_date;
    },

    moveHour: function (date, dir) {
      if (!dir) return date;
      var new_date = new Date(date.valueOf());
      //dir = dir > 0 ? 1 : -1;
      new_date.setUTCHours(new_date.getUTCHours() + dir);
      return new_date;
    },

    moveDate: function (date, dir) {
      if (!dir) return date;
      var new_date = new Date(date.valueOf());
      //dir = dir > 0 ? 1 : -1;
      new_date.setUTCDate(new_date.getUTCDate() + dir);
      return new_date;
    },

    moveMonth: function (date, dir) {
      if (!dir) return date;
      var new_date = new Date(date.valueOf()),
        day = new_date.getUTCDate(),
        month = new_date.getUTCMonth(),
        mag = Math.abs(dir),
        new_month, test;
      dir = dir > 0 ? 1 : -1;
      if (mag === 1) {
        test = dir === -1
          // If going back one month, make sure month is not current month
          // (eg, Mar 31 -> Feb 31 === Feb 28, not Mar 02)
          ? function () {
          return new_date.getUTCMonth() === month;
        }
          // If going forward one month, make sure month is as expected
          // (eg, Jan 31 -> Feb 31 === Feb 28, not Mar 02)
          : function () {
          return new_date.getUTCMonth() !== new_month;
        };
        new_month = month + dir;
        new_date.setUTCMonth(new_month);
        // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
        if (new_month < 0 || new_month > 11)
          new_month = (new_month + 12) % 12;
      } else {
        // For magnitudes >1, move one month at a time...
        for (var i = 0; i < mag; i++)
          // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
          new_date = this.moveMonth(new_date, dir);
        // ...then reset the day, keeping it in the new month
        new_month = new_date.getUTCMonth();
        new_date.setUTCDate(day);
        test = function () {
          return new_month !== new_date.getUTCMonth();
        };
      }
      // Common date-resetting loop -- if date is beyond end of month, make it
      // end of month
      while (test()) {
        new_date.setUTCDate(--day);
        new_date.setUTCMonth(new_month);
      }
      return new_date;
    },

    moveYear: function (date, dir) {
      return this.moveMonth(date, dir * 12);
    },

    dateWithinRange: function (date) {
      return date >= this.startDate && date <= this.endDate;
    },

    keydown: function (e) {
      if (this.picker.is(':not(:visible)')) {
        if (e.keyCode === 27) // allow escape to hide and re-show picker
          this.show();
        return;
      }
      var dateChanged = false,
        dir, newDate, newViewDate;
      switch (e.keyCode) {
        case 27: // escape
          this.hide();
          e.preventDefault();
          break;
        case 37: // left
        case 39: // right
          if (!this.keyboardNavigation) break;
          dir = e.keyCode === 37 ? -1 : 1;
          var viewMode = this.viewMode;
          if (e.ctrlKey) {
            viewMode += 2;
          } else if (e.shiftKey) {
            viewMode += 1;
          }
          if (viewMode === 4) {
            newDate = this.moveYear(this.date, dir);
            newViewDate = this.moveYear(this.viewDate, dir);
          } else if (viewMode === 3) {
            newDate = this.moveMonth(this.date, dir);
            newViewDate = this.moveMonth(this.viewDate, dir);
          } else if (viewMode === 2) {
            newDate = this.moveDate(this.date, dir);
            newViewDate = this.moveDate(this.viewDate, dir);
          } else if (viewMode === 1) {
            newDate = this.moveHour(this.date, dir);
            newViewDate = this.moveHour(this.viewDate, dir);
          } else if (viewMode === 0) {
            newDate = this.moveMinute(this.date, dir);
            newViewDate = this.moveMinute(this.viewDate, dir);
          }
          if (this.dateWithinRange(newDate)) {
            this.date = newDate;
            this.viewDate = newViewDate;
            this.setValue();
            this.update();
            e.preventDefault();
            dateChanged = true;
          }
          break;
        case 38: // up
        case 40: // down
          if (!this.keyboardNavigation) break;
          dir = e.keyCode === 38 ? -1 : 1;
          viewMode = this.viewMode;
          if (e.ctrlKey) {
            viewMode += 2;
          } else if (e.shiftKey) {
            viewMode += 1;
          }
          if (viewMode === 4) {
            newDate = this.moveYear(this.date, dir);
            newViewDate = this.moveYear(this.viewDate, dir);
          } else if (viewMode === 3) {
            newDate = this.moveMonth(this.date, dir);
            newViewDate = this.moveMonth(this.viewDate, dir);
          } else if (viewMode === 2) {
            newDate = this.moveDate(this.date, dir * 7);
            newViewDate = this.moveDate(this.viewDate, dir * 7);
          } else if (viewMode === 1) {
            if (this.showMeridian) {
              newDate = this.moveHour(this.date, dir * 6);
              newViewDate = this.moveHour(this.viewDate, dir * 6);
            } else {
              newDate = this.moveHour(this.date, dir * 4);
              newViewDate = this.moveHour(this.viewDate, dir * 4);
            }
          } else if (viewMode === 0) {
            newDate = this.moveMinute(this.date, dir * 4);
            newViewDate = this.moveMinute(this.viewDate, dir * 4);
          }
          if (this.dateWithinRange(newDate)) {
            this.date = newDate;
            this.viewDate = newViewDate;
            this.setValue();
            this.update();
            e.preventDefault();
            dateChanged = true;
          }
          break;
        case 13: // enter
          if (this.viewMode !== 0) {
            var oldViewMode = this.viewMode;
            this.showMode(-1);
            this.fill();
            if (oldViewMode === this.viewMode && this.autoclose) {
              this.hide();
            }
          } else {
            this.fill();
            if (this.autoclose) {
              this.hide();
            }
          }
          e.preventDefault();
          break;
        case 9: // tab
          this.hide();
          break;
      }
      if (dateChanged) {
        var element;
        if (this.isInput) {
          element = this.element;
        } else if (this.component) {
          element = this.element.find('input');
        }
        if (element) {
          element.change();
        }
        this.element.trigger({
          type: 'changeDate',
          date: this.getDate()
        });
      }
    },

    showMode: function (dir) {
      if (dir) {
        var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
        if (newViewMode >= this.minView && newViewMode <= this.maxView) {
          this.element.trigger({
            type:        'changeMode',
            date:        this.viewDate,
            oldViewMode: this.viewMode,
            newViewMode: newViewMode
          });

          this.viewMode = newViewMode;
        }
      }
      /*
       vitalets: fixing bug of very special conditions:
       jquery 1.7.1 + webkit + show inline datetimepicker in bootstrap popover.
       Method show() does not set display css correctly and datetimepicker is not shown.
       Changed to .css('display', 'block') solve the problem.
       See https://github.com/vitalets/x-editable/issues/37

       In jquery 1.7.2+ everything works fine.
       */
      //this.picker.find('>div').hide().filter('.datetimepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
      this.picker.find('>div').hide().filter('.datetimepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
      this.updateNavArrows();
    },

    reset: function () {
      this._setDate(null, 'date');
    },

    convertViewModeText:  function (viewMode) {
      switch (viewMode) {
        case 4:
          return 'decade';
        case 3:
          return 'year';
        case 2:
          return 'month';
        case 1:
          return 'day';
        case 0:
          return 'hour';
      }
    }
  };

  var old = $.fn.datetimepicker;
  $.fn.datetimepicker = function (option) {
    var args = Array.apply(null, arguments);
    args.shift();
    var internal_return;
    this.each(function () {
      var $this = $(this),
        data = $this.data('datetimepicker'),
        options = typeof option === 'object' && option;
      if (!data) {
        $this.data('datetimepicker', (data = new Datetimepicker(this, $.extend({}, $.fn.datetimepicker.defaults, options))));
      }
      if (typeof option === 'string' && typeof data[option] === 'function') {
        internal_return = data[option].apply(data, args);
        if (internal_return !== undefined) {
          return false;
        }
      }
    });
    if (internal_return !== undefined)
      return internal_return;
    else
      return this;
  };

  $.fn.datetimepicker.defaults = {
  };
  $.fn.datetimepicker.Constructor = Datetimepicker;
  var dates = $.fn.datetimepicker.dates = {
    en: {
      days:        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
      daysShort:   ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
      daysMin:     ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
      months:      ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      meridiem:    ['am', 'pm'],
      suffix:      ['st', 'nd', 'rd', 'th'],
      today:       'Today',
      clear:       'Clear'
    }
  };

  var DPGlobal = {
    modes:            [
      {
        clsName: 'minutes',
        navFnc:  'Hours',
        navStep: 1
      },
      {
        clsName: 'hours',
        navFnc:  'Date',
        navStep: 1
      },
      {
        clsName: 'days',
        navFnc:  'Month',
        navStep: 1
      },
      {
        clsName: 'months',
        navFnc:  'FullYear',
        navStep: 1
      },
      {
        clsName: 'years',
        navFnc:  'FullYear',
        navStep: 10
      }
    ],
    isLeapYear:       function (year) {
      return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))
    },
    getDaysInMonth:   function (year, month) {
      return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    },
    getDefaultFormat: function (type, field) {
      if (type === 'standard') {
        if (field === 'input')
          return 'yyyy-mm-dd hh:ii';
        else
          return 'yyyy-mm-dd hh:ii:ss';
      } else if (type === 'php') {
        if (field === 'input')
          return 'Y-m-d H:i';
        else
          return 'Y-m-d H:i:s';
      } else {
        throw new Error('Invalid format type.');
      }
    },
    validParts: function (type) {
      if (type === 'standard') {
        return /t|hh?|HH?|p|P|z|Z|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g;
      } else if (type === 'php') {
        return /[dDjlNwzFmMnStyYaABgGhHis]/g;
      } else {
        throw new Error('Invalid format type.');
      }
    },
    nonpunctuation: /[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,
    parseFormat: function (format, type) {
      // IE treats \0 as a string end in inputs (truncating the value),
      // so it's a bad format delimiter, anyway
      var separators = format.replace(this.validParts(type), '\0').split('\0'),
        parts = format.match(this.validParts(type));
      if (!separators || !separators.length || !parts || parts.length === 0) {
        throw new Error('Invalid date format.');
      }
      return {separators: separators, parts: parts};
    },
    parseDate: function (date, format, language, type, timezone) {
      if (date instanceof Date) {
        var dateUTC = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
        dateUTC.setMilliseconds(0);
        return dateUTC;
      }
      if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
        format = this.parseFormat('yyyy-mm-dd', type);
      }
      if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
        format = this.parseFormat('yyyy-mm-dd hh:ii', type);
      }
      if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
        format = this.parseFormat('yyyy-mm-dd hh:ii:ss', type);
      }
      if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
        var part_re = /([-+]\d+)([dmwy])/,
          parts = date.match(/([-+]\d+)([dmwy])/g),
          part, dir;
        date = new Date();
        for (var i = 0; i < parts.length; i++) {
          part = part_re.exec(parts[i]);
          dir = parseInt(part[1]);
          switch (part[2]) {
            case 'd':
              date.setUTCDate(date.getUTCDate() + dir);
              break;
            case 'm':
              date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
              break;
            case 'w':
              date.setUTCDate(date.getUTCDate() + dir * 7);
              break;
            case 'y':
              date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
              break;
          }
        }
        return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), 0);
      }
      var parts = date && date.toString().match(this.nonpunctuation) || [],
        date = new Date(0, 0, 0, 0, 0, 0, 0),
        parsed = {},
        setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'D', 'DD', 'd', 'dd', 'H', 'HH', 'p', 'P', 'z', 'Z'],
        setters_map = {
          hh:   function (d, v) {
            return d.setUTCHours(v);
          },
          h:    function (d, v) {
            return d.setUTCHours(v);
          },
          HH:   function (d, v) {
            return d.setUTCHours(v === 12 ? 0 : v);
          },
          H:    function (d, v) {
            return d.setUTCHours(v === 12 ? 0 : v);
          },
          ii:   function (d, v) {
            return d.setUTCMinutes(v);
          },
          i:    function (d, v) {
            return d.setUTCMinutes(v);
          },
          ss:   function (d, v) {
            return d.setUTCSeconds(v);
          },
          s:    function (d, v) {
            return d.setUTCSeconds(v);
          },
          yyyy: function (d, v) {
            return d.setUTCFullYear(v);
          },
          yy:   function (d, v) {
            return d.setUTCFullYear(2000 + v);
          },
          m:    function (d, v) {
            v -= 1;
            while (v < 0) v += 12;
            v %= 12;
            d.setUTCMonth(v);
            while (d.getUTCMonth() !== v)
              if (isNaN(d.getUTCMonth()))
                return d;
              else
                d.setUTCDate(d.getUTCDate() - 1);
            return d;
          },
          d:    function (d, v) {
            return d.setUTCDate(v);
          },
          p:    function (d, v) {
            return d.setUTCHours(v === 1 ? d.getUTCHours() + 12 : d.getUTCHours());
          },
          z:    function () {
            return timezone
          }
        },
        val, filtered, part;
      setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
      setters_map['dd'] = setters_map['d'];
      setters_map['P'] = setters_map['p'];
      setters_map['Z'] = setters_map['z'];
      date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
      if (parts.length === format.parts.length) {
        for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
          val = parseInt(parts[i], 10);
          part = format.parts[i];
          if (isNaN(val)) {
            switch (part) {
              case 'MM':
                filtered = $(dates[language].months).filter(function () {
                  var m = this.slice(0, parts[i].length),
                    p = parts[i].slice(0, m.length);
                  return m === p;
                });
                val = $.inArray(filtered[0], dates[language].months) + 1;
                break;
              case 'M':
                filtered = $(dates[language].monthsShort).filter(function () {
                  var m = this.slice(0, parts[i].length),
                    p = parts[i].slice(0, m.length);
                  return m.toLowerCase() === p.toLowerCase();
                });
                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                break;
              case 'p':
              case 'P':
                val = $.inArray(parts[i].toLowerCase(), dates[language].meridiem);
                break;
              case 'z':
              case 'Z':
                timezone;
                break;

            }
          }
          parsed[part] = val;
        }
        for (var i = 0, s; i < setters_order.length; i++) {
          s = setters_order[i];
          if (s in parsed && !isNaN(parsed[s]))
            setters_map[s](date, parsed[s])
        }
      }
      return date;
    },
    formatDate:       function (date, format, language, type, timezone) {
      if (date === null) {
        return '';
      }
      var val;
      if (type === 'standard') {
        val = {
          t:    date.getTime(),
          // year
          yy:   date.getUTCFullYear().toString().substring(2),
          yyyy: date.getUTCFullYear(),
          // month
          m:    date.getUTCMonth() + 1,
          M:    dates[language].monthsShort[date.getUTCMonth()],
          MM:   dates[language].months[date.getUTCMonth()],
          // day
          d:    date.getUTCDate(),
          D:    dates[language].daysShort[date.getUTCDay()],
          DD:   dates[language].days[date.getUTCDay()],
          p:    (dates[language].meridiem.length === 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
          // hour
          h:    date.getUTCHours(),
          // minute
          i:    date.getUTCMinutes(),
          // second
          s:    date.getUTCSeconds(),
          // timezone
          z:    timezone
        };

        if (dates[language].meridiem.length === 2) {
          val.H = (val.h % 12 === 0 ? 12 : val.h % 12);
        }
        else {
          val.H = val.h;
        }
        val.HH = (val.H < 10 ? '0' : '') + val.H;
        val.P = val.p.toUpperCase();
        val.Z = val.z;
        val.hh = (val.h < 10 ? '0' : '') + val.h;
        val.ii = (val.i < 10 ? '0' : '') + val.i;
        val.ss = (val.s < 10 ? '0' : '') + val.s;
        val.dd = (val.d < 10 ? '0' : '') + val.d;
        val.mm = (val.m < 10 ? '0' : '') + val.m;
      } else if (type === 'php') {
        // php format
        val = {
          // year
          y: date.getUTCFullYear().toString().substring(2),
          Y: date.getUTCFullYear(),
          // month
          F: dates[language].months[date.getUTCMonth()],
          M: dates[language].monthsShort[date.getUTCMonth()],
          n: date.getUTCMonth() + 1,
          t: DPGlobal.getDaysInMonth(date.getUTCFullYear(), date.getUTCMonth()),
          // day
          j: date.getUTCDate(),
          l: dates[language].days[date.getUTCDay()],
          D: dates[language].daysShort[date.getUTCDay()],
          w: date.getUTCDay(), // 0 -> 6
          N: (date.getUTCDay() === 0 ? 7 : date.getUTCDay()),       // 1 -> 7
          S: (date.getUTCDate() % 10 <= dates[language].suffix.length ? dates[language].suffix[date.getUTCDate() % 10 - 1] : ''),
          // hour
          a: (dates[language].meridiem.length === 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
          g: (date.getUTCHours() % 12 === 0 ? 12 : date.getUTCHours() % 12),
          G: date.getUTCHours(),
          // minute
          i: date.getUTCMinutes(),
          // second
          s: date.getUTCSeconds()
        };
        val.m = (val.n < 10 ? '0' : '') + val.n;
        val.d = (val.j < 10 ? '0' : '') + val.j;
        val.A = val.a.toString().toUpperCase();
        val.h = (val.g < 10 ? '0' : '') + val.g;
        val.H = (val.G < 10 ? '0' : '') + val.G;
        val.i = (val.i < 10 ? '0' : '') + val.i;
        val.s = (val.s < 10 ? '0' : '') + val.s;
      } else {
        throw new Error('Invalid format type.');
      }
      var date = [],
        seps = $.extend([], format.separators);
      for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
        if (seps.length) {
          date.push(seps.shift());
        }
        date.push(val[format.parts[i]]);
      }
      if (seps.length) {
        date.push(seps.shift());
      }
      return date.join('');
    },
    convertViewMode:  function (viewMode) {
      switch (viewMode) {
        case 4:
        case 'decade':
          viewMode = 4;
          break;
        case 3:
        case 'year':
          viewMode = 3;
          break;
        case 2:
        case 'month':
          viewMode = 2;
          break;
        case 1:
        case 'day':
          viewMode = 1;
          break;
        case 0:
        case 'hour':
          viewMode = 0;
          break;
      }

      return viewMode;
    },
    headTemplate: '<thead>' +
                '<tr>' +
                '<th class="prev"><i class="{iconType} {leftArrow}"/></th>' +
                '<th colspan="5" class="switch"></th>' +
                '<th class="next"><i class="{iconType} {rightArrow}"/></th>' +
                '</tr>' +
      '</thead>',
    headTemplateV3: '<thead>' +
                '<tr>' +
                '<th class="prev"><span class="{iconType} {leftArrow}"></span> </th>' +
                '<th colspan="5" class="switch"></th>' +
                '<th class="next"><span class="{iconType} {rightArrow}"></span> </th>' +
                '</tr>' +
      '</thead>',
    contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
    footTemplate: '<tfoot>' + 
                    '<tr><th colspan="7" class="today"></th></tr>' +
                    '<tr><th colspan="7" class="clear"></th></tr>' +
                  '</tfoot>'
  };
  DPGlobal.template = '<div class="datetimepicker">' +
    '<div class="datetimepicker-minutes">' +
    '<table class=" table-condensed">' +
    DPGlobal.headTemplate +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-hours">' +
    '<table class=" table-condensed">' +
    DPGlobal.headTemplate +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-days">' +
    '<table class=" table-condensed">' +
    DPGlobal.headTemplate +
    '<tbody></tbody>' +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-months">' +
    '<table class="table-condensed">' +
    DPGlobal.headTemplate +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-years">' +
    '<table class="table-condensed">' +
    DPGlobal.headTemplate +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '</div>';
  DPGlobal.templateV3 = '<div class="datetimepicker">' +
    '<div class="datetimepicker-minutes">' +
    '<table class=" table-condensed">' +
    DPGlobal.headTemplateV3 +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-hours">' +
    '<table class=" table-condensed">' +
    DPGlobal.headTemplateV3 +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-days">' +
    '<table class=" table-condensed">' +
    DPGlobal.headTemplateV3 +
    '<tbody></tbody>' +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-months">' +
    '<table class="table-condensed">' +
    DPGlobal.headTemplateV3 +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datetimepicker-years">' +
    '<table class="table-condensed">' +
    DPGlobal.headTemplateV3 +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '</div>';
  $.fn.datetimepicker.DPGlobal = DPGlobal;

  /* DATETIMEPICKER NO CONFLICT
   * =================== */

  $.fn.datetimepicker.noConflict = function () {
    $.fn.datetimepicker = old;
    return this;
  };

  /* DATETIMEPICKER DATA-API
   * ================== */

  $(document).on(
    'focus.datetimepicker.data-api click.datetimepicker.data-api',
    '[data-provide="datetimepicker"]',
    function (e) {
      var $this = $(this);
      if ($this.data('datetimepicker')) return;
      e.preventDefault();
      // component click requires us to explicitly show it
      $this.datetimepicker('show');
    }
  );
  $(function () {
    $('[data-provide="datetimepicker-inline"]').datetimepicker();
  });

}));
/*bootstrap-datetimepicker.zh-CN.js*/
/**
 * Simplified Chinese translation for bootstrap-datetimepicker
 * Yuan Cheung <advanimal@gmail.com>
 */
;(function($){
	$.fn.datetimepicker.dates['zh-CN'] = {
			days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"],
			daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六", "周日"],
			daysMin:  ["日", "一", "二", "三", "四", "五", "六", "日"],
			months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
			monthsShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
			today: "今天",
			suffix: [],
			meridiem: ["上午", "下午"]
	};
}(jQuery));
/*layer.js*/
/*! layer-v3.0.1 Web弹层组件 MIT License  http://layer.layui.com/  By 贤心 */
;!function(e,t){"use strict";var i,n,a=e.layui&&layui.define,o={getPath:function(){var e=document.scripts,t=e[e.length-1],i=t.src;if(!t.getAttribute("merge"))return i.substring(0,i.lastIndexOf("/")+1)}(),config:{},end:{},minIndex:0,minLeft:[],btn:["&#x786E;&#x5B9A;","&#x53D6;&#x6D88;"],type:["dialog","page","iframe","loading","tips"]},r={v:"3.0.1",ie:function(){var t=navigator.userAgent.toLowerCase();return!!(e.ActiveXObject||"ActiveXObject"in e)&&((t.match(/msie\s(\d+)/)||[])[1]||"11")}(),index:e.layer&&e.layer.v?1e5:0,path:o.getPath,config:function(e,t){return e=e||{},r.cache=o.config=i.extend({},o.config,e),r.path=o.config.path||r.path,"string"==typeof e.extend&&(e.extend=[e.extend]),o.config.path&&r.ready(),e.extend?(a?layui.addcss("modules/layer/"+e.extend):r.link("skin/"+e.extend),this):this},link:function(t,n,a){if(r.path){var o=i("head")[0],l=document.createElement("link");"string"==typeof n&&(a=n);var s=(a||t).replace(/\.|\//g,""),f="layuicss-"+s,c=0;l.rel="stylesheet",l.href=r.path+t,l.id=f,i("#"+f)[0]||o.appendChild(l),"function"==typeof n&&!function d(){return++c>80?e.console&&console.error("layer.css: Invalid"):void(1989===parseInt(i("#"+f).css("width"))?n():setTimeout(d,100))}()}},ready:function(e){var t="skinlayercss",i="1110";return a?layui.addcss("modules/layer/default/layer.css?v="+r.v+i,e,t):r.link("skin/default/layer.css?v="+r.v+i,e,t),this},alert:function(e,t,n){var a="function"==typeof t;return a&&(n=t),r.open(i.extend({content:e,yes:n},a?{}:t))},confirm:function(e,t,n,a){var l="function"==typeof t;return l&&(a=n,n=t),r.open(i.extend({content:e,btn:o.btn,yes:n,btn2:a},l?{}:t))},msg:function(e,n,a){var l="function"==typeof n,f=o.config.skin,c=(f?f+" "+f+"-msg":"")||"layui-layer-msg",d=s.anim.length-1;return l&&(a=n),r.open(i.extend({content:e,time:3e3,shade:!1,skin:c,title:!1,closeBtn:!1,btn:!1,resize:!1,end:a},l&&!o.config.skin?{skin:c+" layui-layer-hui",anim:d}:function(){return n=n||{},(n.icon===-1||n.icon===t&&!o.config.skin)&&(n.skin=c+" "+(n.skin||"layui-layer-hui")),n}()))},load:function(e,t){return r.open(i.extend({type:3,icon:e||0,resize:!1,shade:.01},t))},tips:function(e,t,n){return r.open(i.extend({type:4,content:[e,t],closeBtn:!1,time:3e3,shade:!1,resize:!1,fixed:!1,maxWidth:210},n))}},l=function(e){var t=this;t.index=++r.index,t.config=i.extend({},t.config,o.config,e),document.body?t.creat():setTimeout(function(){t.creat()},50)};l.pt=l.prototype;var s=["layui-layer",".layui-layer-title",".layui-layer-main",".layui-layer-dialog","layui-layer-iframe","layui-layer-content","layui-layer-btn","layui-layer-close"];s.anim=["layer-anim","layer-anim-01","layer-anim-02","layer-anim-03","layer-anim-04","layer-anim-05","layer-anim-06"],l.pt.config={type:0,shade:.3,fixed:!0,move:s[1],title:"&#x4FE1;&#x606F;",offset:"auto",area:"auto",closeBtn:1,time:0,zIndex:19891014,maxWidth:360,anim:0,icon:-1,moveType:1,resize:!0,scrollbar:!0,tips:2},l.pt.vessel=function(e,t){var n=this,a=n.index,r=n.config,l=r.zIndex+a,f="object"==typeof r.title,c=r.maxmin&&(1===r.type||2===r.type),d=r.title?'<div class="layui-layer-title" style="'+(f?r.title[1]:"")+'">'+(f?r.title[0]:r.title)+"</div>":"";return r.zIndex=l,t([r.shade?'<div class="layui-layer-shade" id="layui-layer-shade'+a+'" times="'+a+'" style="'+("z-index:"+(l-1)+"; background-color:"+(r.shade[1]||"#000")+"; opacity:"+(r.shade[0]||r.shade)+"; filter:alpha(opacity="+(100*r.shade[0]||100*r.shade)+");")+'"></div>':"",'<div class="'+s[0]+(" layui-layer-"+o.type[r.type])+(0!=r.type&&2!=r.type||r.shade?"":" layui-layer-border")+" "+(r.skin||"")+'" id="'+s[0]+a+'" type="'+o.type[r.type]+'" times="'+a+'" showtime="'+r.time+'" conType="'+(e?"object":"string")+'" style="z-index: '+l+"; width:"+r.area[0]+";height:"+r.area[1]+(r.fixed?"":";position:absolute;")+'">'+(e&&2!=r.type?"":d)+'<div id="'+(r.id||"")+'" class="layui-layer-content'+(0==r.type&&r.icon!==-1?" layui-layer-padding":"")+(3==r.type?" layui-layer-loading"+r.icon:"")+'">'+(0==r.type&&r.icon!==-1?'<i class="layui-layer-ico layui-layer-ico'+r.icon+'"></i>':"")+(1==r.type&&e?"":r.content||"")+'</div><span class="layui-layer-setwin">'+function(){var e=c?'<a class="layui-layer-min" href="javascript:;"><cite></cite></a><a class="layui-layer-ico layui-layer-max" href="javascript:;"></a>':"";return r.closeBtn&&(e+='<a class="layui-layer-ico '+s[7]+" "+s[7]+(r.title?r.closeBtn:4==r.type?"1":"2")+'" href="javascript:;"></a>'),e}()+"</span>"+(r.btn?function(){var e="";"string"==typeof r.btn&&(r.btn=[r.btn]);for(var t=0,i=r.btn.length;t<i;t++)e+='<a class="'+s[6]+t+'">'+r.btn[t]+"</a>";return'<div class="'+s[6]+" layui-layer-btn-"+(r.btnAlign||"")+'">'+e+"</div>"}():"")+(r.resize?'<span class="layui-layer-resize"></span>':"")+"</div>"],d,i('<div class="layui-layer-move"></div>')),n},l.pt.creat=function(){var e=this,t=e.config,a=e.index,l=t.content,f="object"==typeof l,c=i("body");if(!i("#"+t.id)[0]){switch("string"==typeof t.area&&(t.area="auto"===t.area?["",""]:[t.area,""]),t.shift&&(t.anim=t.shift),6==r.ie&&(t.fixed=!1),t.type){case 0:t.btn="btn"in t?t.btn:o.btn[0],r.closeAll("dialog");break;case 2:var l=t.content=f?t.content:[t.content||"http://layer.layui.com","auto"];t.content='<iframe scrolling="'+(t.content[1]||"auto")+'" allowtransparency="true" id="'+s[4]+a+'" name="'+s[4]+a+'" onload="this.className=\'\';" class="layui-layer-load" frameborder="0" src="'+t.content[0]+'"></iframe>';break;case 3:delete t.title,delete t.closeBtn,t.icon===-1&&0===t.icon,r.closeAll("loading");break;case 4:f||(t.content=[t.content,"body"]),t.follow=t.content[1],t.content=t.content[0]+'<i class="layui-layer-TipsG"></i>',delete t.title,t.tips="object"==typeof t.tips?t.tips:[t.tips,!0],t.tipsMore||r.closeAll("tips")}e.vessel(f,function(n,r,d){c.append(n[0]),f?function(){2==t.type||4==t.type?function(){i("body").append(n[1])}():function(){l.parents("."+s[0])[0]||(l.data("display",l.css("display")).show().addClass("layui-layer-wrap").wrap(n[1]),i("#"+s[0]+a).find("."+s[5]).before(r))}()}():c.append(n[1]),i(".layui-layer-move")[0]||c.append(o.moveElem=d),e.layero=i("#"+s[0]+a),t.scrollbar||s.html.css("overflow","hidden").attr("layer-full",a)}).auto(a),2==t.type&&6==r.ie&&e.layero.find("iframe").attr("src",l[0]),4==t.type?e.tips():e.offset(),t.fixed&&n.on("resize",function(){e.offset(),(/^\d+%$/.test(t.area[0])||/^\d+%$/.test(t.area[1]))&&e.auto(a),4==t.type&&e.tips()}),t.time<=0||setTimeout(function(){r.close(e.index)},t.time),e.move().callback(),s.anim[t.anim]&&e.layero.addClass(s.anim[t.anim]).data("anim",!0)}},l.pt.auto=function(e){function t(e){e=l.find(e),e.height(f[1]-c-d-2*(0|parseFloat(e.css("padding"))))}var a=this,o=a.config,l=i("#"+s[0]+e);""===o.area[0]&&o.maxWidth>0&&(r.ie&&r.ie<8&&o.btn&&l.width(l.innerWidth()),l.outerWidth()>o.maxWidth&&l.width(o.maxWidth));var f=[l.innerWidth(),l.innerHeight()],c=l.find(s[1]).outerHeight()||0,d=l.find("."+s[6]).outerHeight()||0;switch(o.type){case 2:t("iframe");break;default:""===o.area[1]?o.fixed&&f[1]>=n.height()&&(f[1]=n.height(),t("."+s[5])):t("."+s[5])}return a},l.pt.offset=function(){var e=this,t=e.config,i=e.layero,a=[i.outerWidth(),i.outerHeight()],o="object"==typeof t.offset;e.offsetTop=(n.height()-a[1])/2,e.offsetLeft=(n.width()-a[0])/2,o?(e.offsetTop=t.offset[0],e.offsetLeft=t.offset[1]||e.offsetLeft):"auto"!==t.offset&&("t"===t.offset?e.offsetTop=0:"r"===t.offset?e.offsetLeft=n.width()-a[0]:"b"===t.offset?e.offsetTop=n.height()-a[1]:"l"===t.offset?e.offsetLeft=0:"lt"===t.offset?(e.offsetTop=0,e.offsetLeft=0):"lb"===t.offset?(e.offsetTop=n.height()-a[1],e.offsetLeft=0):"rt"===t.offset?(e.offsetTop=0,e.offsetLeft=n.width()-a[0]):"rb"===t.offset?(e.offsetTop=n.height()-a[1],e.offsetLeft=n.width()-a[0]):e.offsetTop=t.offset),t.fixed||(e.offsetTop=/%$/.test(e.offsetTop)?n.height()*parseFloat(e.offsetTop)/100:parseFloat(e.offsetTop),e.offsetLeft=/%$/.test(e.offsetLeft)?n.width()*parseFloat(e.offsetLeft)/100:parseFloat(e.offsetLeft),e.offsetTop+=n.scrollTop(),e.offsetLeft+=n.scrollLeft()),i.attr("minLeft")&&(e.offsetTop=n.height()-(i.find(s[1]).outerHeight()||0),e.offsetLeft=i.css("left")),i.css({top:e.offsetTop,left:e.offsetLeft})},l.pt.tips=function(){var e=this,t=e.config,a=e.layero,o=[a.outerWidth(),a.outerHeight()],r=i(t.follow);r[0]||(r=i("body"));var l={width:r.outerWidth(),height:r.outerHeight(),top:r.offset().top,left:r.offset().left},f=a.find(".layui-layer-TipsG"),c=t.tips[0];t.tips[1]||f.remove(),l.autoLeft=function(){l.left+o[0]-n.width()>0?(l.tipLeft=l.left+l.width-o[0],f.css({right:12,left:"auto"})):l.tipLeft=l.left},l.where=[function(){l.autoLeft(),l.tipTop=l.top-o[1]-10,f.removeClass("layui-layer-TipsB").addClass("layui-layer-TipsT").css("border-right-color",t.tips[1])},function(){l.tipLeft=l.left+l.width+10,l.tipTop=l.top,f.removeClass("layui-layer-TipsL").addClass("layui-layer-TipsR").css("border-bottom-color",t.tips[1])},function(){l.autoLeft(),l.tipTop=l.top+l.height+10,f.removeClass("layui-layer-TipsT").addClass("layui-layer-TipsB").css("border-right-color",t.tips[1])},function(){l.tipLeft=l.left-o[0]-10,l.tipTop=l.top,f.removeClass("layui-layer-TipsR").addClass("layui-layer-TipsL").css("border-bottom-color",t.tips[1])}],l.where[c-1](),1===c?l.top-(n.scrollTop()+o[1]+16)<0&&l.where[2]():2===c?n.width()-(l.left+l.width+o[0]+16)>0||l.where[3]():3===c?l.top-n.scrollTop()+l.height+o[1]+16-n.height()>0&&l.where[0]():4===c&&o[0]+16-l.left>0&&l.where[1](),a.find("."+s[5]).css({"background-color":t.tips[1],"padding-right":t.closeBtn?"30px":""}),a.css({left:l.tipLeft-(t.fixed?n.scrollLeft():0),top:l.tipTop-(t.fixed?n.scrollTop():0)})},l.pt.move=function(){var e=this,t=e.config,a=i(document),l=e.layero,s=l.find(t.move),f=l.find(".layui-layer-resize"),c={};return t.move&&s.css("cursor","move"),s.on("mousedown",function(e){e.preventDefault(),t.move&&(c.moveStart=!0,c.offset=[e.clientX-parseFloat(l.css("left")),e.clientY-parseFloat(l.css("top"))],o.moveElem.css("cursor","move").show())}),f.on("mousedown",function(e){e.preventDefault(),c.resizeStart=!0,c.offset=[e.clientX,e.clientY],c.area=[l.outerWidth(),l.outerHeight()],o.moveElem.css("cursor","se-resize").show()}),a.on("mousemove",function(i){if(c.moveStart){var a=i.clientX-c.offset[0],o=i.clientY-c.offset[1],s="fixed"===l.css("position");if(i.preventDefault(),c.stX=s?0:n.scrollLeft(),c.stY=s?0:n.scrollTop(),!t.moveOut){var f=n.width()-l.outerWidth()+c.stX,d=n.height()-l.outerHeight()+c.stY;a<c.stX&&(a=c.stX),a>f&&(a=f),o<c.stY&&(o=c.stY),o>d&&(o=d)}l.css({left:a,top:o})}if(t.resize&&c.resizeStart){var a=i.clientX-c.offset[0],o=i.clientY-c.offset[1];i.preventDefault(),r.style(e.index,{width:c.area[0]+a,height:c.area[1]+o}),c.isResize=!0}}).on("mouseup",function(e){c.moveStart&&(delete c.moveStart,o.moveElem.hide(),t.moveEnd&&t.moveEnd()),c.resizeStart&&(delete c.resizeStart,o.moveElem.hide())}),e},l.pt.callback=function(){function e(){var e=a.cancel&&a.cancel(t.index,n);e===!1||r.close(t.index)}var t=this,n=t.layero,a=t.config;t.openLayer(),a.success&&(2==a.type?n.find("iframe").on("load",function(){a.success(n,t.index)}):a.success(n,t.index)),6==r.ie&&t.IE6(n),n.find("."+s[6]).children("a").on("click",function(){var e=i(this).index();if(0===e)a.yes?a.yes(t.index,n):a.btn1?a.btn1(t.index,n):r.close(t.index);else{var o=a["btn"+(e+1)]&&a["btn"+(e+1)](t.index,n);o===!1||r.close(t.index)}}),n.find("."+s[7]).on("click",e),a.shadeClose&&i("#layui-layer-shade"+t.index).on("click",function(){r.close(t.index)}),n.find(".layui-layer-min").on("click",function(){var e=a.min&&a.min(n);e===!1||r.min(t.index,a)}),n.find(".layui-layer-max").on("click",function(){i(this).hasClass("layui-layer-maxmin")?(r.restore(t.index),a.restore&&a.restore(n)):(r.full(t.index,a),setTimeout(function(){a.full&&a.full(n)},100))}),a.end&&(o.end[t.index]=a.end)},o.reselect=function(){i.each(i("select"),function(e,t){var n=i(this);n.parents("."+s[0])[0]||1==n.attr("layer")&&i("."+s[0]).length<1&&n.removeAttr("layer").show(),n=null})},l.pt.IE6=function(e){i("select").each(function(e,t){var n=i(this);n.parents("."+s[0])[0]||"none"===n.css("display")||n.attr({layer:"1"}).hide(),n=null})},l.pt.openLayer=function(){var e=this;r.zIndex=e.config.zIndex,r.setTop=function(e){var t=function(){r.zIndex++,e.css("z-index",r.zIndex+1)};return r.zIndex=parseInt(e[0].style.zIndex),e.on("mousedown",t),r.zIndex}},o.record=function(e){var t=[e.width(),e.height(),e.position().top,e.position().left+parseFloat(e.css("margin-left"))];e.find(".layui-layer-max").addClass("layui-layer-maxmin"),e.attr({area:t})},o.rescollbar=function(e){s.html.attr("layer-full")==e&&(s.html[0].style.removeProperty?s.html[0].style.removeProperty("overflow"):s.html[0].style.removeAttribute("overflow"),s.html.removeAttr("layer-full"))},e.layer=r,r.getChildFrame=function(e,t){return t=t||i("."+s[4]).attr("times"),i("#"+s[0]+t).find("iframe").contents().find(e)},r.getFrameIndex=function(e){return i("#"+e).parents("."+s[4]).attr("times")},r.iframeAuto=function(e){if(e){var t=r.getChildFrame("html",e).outerHeight(),n=i("#"+s[0]+e),a=n.find(s[1]).outerHeight()||0,o=n.find("."+s[6]).outerHeight()||0;n.css({height:t+a+o}),n.find("iframe").css({height:t})}},r.iframeSrc=function(e,t){i("#"+s[0]+e).find("iframe").attr("src",t)},r.style=function(e,t,n){var a=i("#"+s[0]+e),r=a.find(".layui-layer-content"),l=a.attr("type"),f=a.find(s[1]).outerHeight()||0,c=a.find("."+s[6]).outerHeight()||0;a.attr("minLeft");l!==o.type[3]&&l!==o.type[4]&&(n||(parseFloat(t.width)<=260&&(t.width=260),parseFloat(t.height)-f-c<=64&&(t.height=64+f+c)),a.css(t),c=a.find("."+s[6]).outerHeight(),l===o.type[2]?a.find("iframe").css({height:parseFloat(t.height)-f-c}):r.css({height:parseFloat(t.height)-f-c-parseFloat(r.css("padding-top"))-parseFloat(r.css("padding-bottom"))}))},r.min=function(e,t){var a=i("#"+s[0]+e),l=a.find(s[1]).outerHeight()||0,f=a.attr("minLeft")||181*o.minIndex+"px",c=a.css("position");o.record(a),o.minLeft[0]&&(f=o.minLeft[0],o.minLeft.shift()),a.attr("position",c),r.style(e,{width:180,height:l,left:f,top:n.height()-l,position:"fixed",overflow:"hidden"},!0),a.find(".layui-layer-min").hide(),"page"===a.attr("type")&&a.find(s[4]).hide(),o.rescollbar(e),a.attr("minLeft")||o.minIndex++,a.attr("minLeft",f)},r.restore=function(e){var t=i("#"+s[0]+e),n=t.attr("area").split(",");t.attr("type");r.style(e,{width:parseFloat(n[0]),height:parseFloat(n[1]),top:parseFloat(n[2]),left:parseFloat(n[3]),position:t.attr("position"),overflow:"visible"},!0),t.find(".layui-layer-max").removeClass("layui-layer-maxmin"),t.find(".layui-layer-min").show(),"page"===t.attr("type")&&t.find(s[4]).show(),o.rescollbar(e)},r.full=function(e){var t,a=i("#"+s[0]+e);o.record(a),s.html.attr("layer-full")||s.html.css("overflow","hidden").attr("layer-full",e),clearTimeout(t),t=setTimeout(function(){var t="fixed"===a.css("position");r.style(e,{top:t?0:n.scrollTop(),left:t?0:n.scrollLeft(),width:n.width(),height:n.height()},!0),a.find(".layui-layer-min").hide()},100)},r.title=function(e,t){var n=i("#"+s[0]+(t||r.index)).find(s[1]);n.html(e)},r.close=function(e){var t=i("#"+s[0]+e),n=t.attr("type"),a="layer-anim-close";if(t[0]){var l="layui-layer-wrap",f=function(){if(n===o.type[1]&&"object"===t.attr("conType")){t.children(":not(."+s[5]+")").remove();for(var a=t.find("."+l),r=0;r<2;r++)a.unwrap();a.css("display",a.data("display")).removeClass(l)}else{if(n===o.type[2])try{var f=i("#"+s[4]+e)[0];f.contentWindow.document.write(""),f.contentWindow.close(),t.find("."+s[5])[0].removeChild(f)}catch(c){}t[0].innerHTML="",t.remove()}"function"==typeof o.end[e]&&o.end[e](),delete o.end[e]};t.data("anim")&&t.addClass(a),i("#layui-layer-moves, #layui-layer-shade"+e).remove(),6==r.ie&&o.reselect(),o.rescollbar(e),t.attr("minLeft")&&(o.minIndex--,o.minLeft.push(t.attr("minLeft"))),setTimeout(function(){f()},r.ie&&r.ie<10||!t.data("anim")?0:200)}},r.closeAll=function(e){i.each(i("."+s[0]),function(){var t=i(this),n=e?t.attr("type")===e:1;n&&r.close(t.attr("times")),n=null})};var f=r.cache||{},c=function(e){return f.skin?" "+f.skin+" "+f.skin+"-"+e:""};r.prompt=function(e,t){var a="";if(e=e||{},"function"==typeof e&&(t=e),e.area){var o=e.area;a='style="width: '+o[0]+"; height: "+o[1]+';"',delete e.area}var l,s=2==e.formType?'<textarea class="layui-layer-input"'+a+">"+(e.value||"")+"</textarea>":function(){return'<input type="'+(1==e.formType?"password":"text")+'" class="layui-layer-input" value="'+(e.value||"")+'">'}();return r.open(i.extend({type:1,btn:["&#x786E;&#x5B9A;","&#x53D6;&#x6D88;"],content:s,skin:"layui-layer-prompt"+c("prompt"),maxWidth:n.width(),success:function(e){l=e.find(".layui-layer-input"),l.focus()},resize:!1,yes:function(i){var n=l.val();""===n?l.focus():n.length>(e.maxlength||500)?r.tips("&#x6700;&#x591A;&#x8F93;&#x5165;"+(e.maxlength||500)+"&#x4E2A;&#x5B57;&#x6570;",l,{tips:1}):t&&t(n,i,l)}},e))},r.tab=function(e){e=e||{};var t=e.tab||{};return r.open(i.extend({type:1,skin:"layui-layer-tab"+c("tab"),resize:!1,title:function(){var e=t.length,i=1,n="";if(e>0)for(n='<span class="layui-layer-tabnow">'+t[0].title+"</span>";i<e;i++)n+="<span>"+t[i].title+"</span>";return n}(),content:'<ul class="layui-layer-tabmain">'+function(){var e=t.length,i=1,n="";if(e>0)for(n='<li class="layui-layer-tabli xubox_tab_layer">'+(t[0].content||"no content")+"</li>";i<e;i++)n+='<li class="layui-layer-tabli">'+(t[i].content||"no  content")+"</li>";return n}()+"</ul>",success:function(t){var n=t.find(".layui-layer-title").children(),a=t.find(".layui-layer-tabmain").children();n.on("mousedown",function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0;var n=i(this),o=n.index();n.addClass("layui-layer-tabnow").siblings().removeClass("layui-layer-tabnow"),a.eq(o).show().siblings().hide(),"function"==typeof e.change&&e.change(o)})}},e))},r.photos=function(t,n,a){function o(e,t,i){var n=new Image;return n.src=e,n.complete?t(n):(n.onload=function(){n.onload=null,t(n)},void(n.onerror=function(e){n.onerror=null,i(e)}))}var l={};if(t=t||{},t.photos){var s=t.photos.constructor===Object,f=s?t.photos:{},d=f.data||[],u=f.start||0;if(l.imgIndex=(0|u)+1,t.img=t.img||"img",s){if(0===d.length)return r.msg("&#x6CA1;&#x6709;&#x56FE;&#x7247;")}else{var y=i(t.photos),p=function(){d=[],y.find(t.img).each(function(e){var t=i(this);t.attr("layer-index",e),d.push({alt:t.attr("alt"),pid:t.attr("layer-pid"),src:t.attr("layer-src")||t.attr("src"),thumb:t.attr("src")})})};if(p(),0===d.length)return;if(n||y.on("click",t.img,function(){var e=i(this),n=e.attr("layer-index");r.photos(i.extend(t,{photos:{start:n,data:d,tab:t.tab},full:t.full}),!0),p()}),!n)return}l.imgprev=function(e){l.imgIndex--,l.imgIndex<1&&(l.imgIndex=d.length),l.tabimg(e)},l.imgnext=function(e,t){l.imgIndex++,l.imgIndex>d.length&&(l.imgIndex=1,t)||l.tabimg(e)},l.keyup=function(e){if(!l.end){var t=e.keyCode;e.preventDefault(),37===t?l.imgprev(!0):39===t?l.imgnext(!0):27===t&&r.close(l.index)}},l.tabimg=function(e){d.length<=1||(f.start=l.imgIndex-1,r.close(l.index),r.photos(t,!0,e))},l.event=function(){l.bigimg.hover(function(){l.imgsee.show()},function(){l.imgsee.hide()}),l.bigimg.find(".layui-layer-imgprev").on("click",function(e){e.preventDefault(),l.imgprev()}),l.bigimg.find(".layui-layer-imgnext").on("click",function(e){e.preventDefault(),l.imgnext()}),i(document).on("keyup",l.keyup)},l.loadi=r.load(1,{shade:!("shade"in t)&&.9,scrollbar:!1}),o(d[u].src,function(n){r.close(l.loadi),l.index=r.open(i.extend({type:1,area:function(){var a=[n.width,n.height],o=[i(e).width()-100,i(e).height()-100];if(!t.full&&(a[0]>o[0]||a[1]>o[1])){var r=[a[0]/o[0],a[1]/o[1]];r[0]>r[1]?(a[0]=a[0]/r[0],a[1]=a[1]/r[0]):r[0]<r[1]&&(a[0]=a[0]/r[1],a[1]=a[1]/r[1])}return[a[0]+"px",a[1]+"px"]}(),title:!1,shade:.9,shadeClose:!0,closeBtn:!1,move:".layui-layer-phimg img",moveType:1,scrollbar:!1,moveOut:!0,anim:5*Math.random()|0,skin:"layui-layer-photos"+c("photos"),content:'<div class="layui-layer-phimg"><img src="'+d[u].src+'" alt="'+(d[u].alt||"")+'" layer-pid="'+d[u].pid+'"><div class="layui-layer-imgsee">'+(d.length>1?'<span class="layui-layer-imguide"><a href="javascript:;" class="layui-layer-iconext layui-layer-imgprev"></a><a href="javascript:;" class="layui-layer-iconext layui-layer-imgnext"></a></span>':"")+'<div class="layui-layer-imgbar" style="display:'+(a?"block":"")+'"><span class="layui-layer-imgtit"><a href="javascript:;">'+(d[u].alt||"")+"</a><em>"+l.imgIndex+"/"+d.length+"</em></span></div></div></div>",success:function(e,i){l.bigimg=e.find(".layui-layer-phimg"),l.imgsee=e.find(".layui-layer-imguide,.layui-layer-imgbar"),l.event(e),t.tab&&t.tab(d[u],e)},end:function(){l.end=!0,i(document).off("keyup",l.keyup)}},t))},function(){r.close(l.loadi),r.msg("&#x5F53;&#x524D;&#x56FE;&#x7247;&#x5730;&#x5740;&#x5F02;&#x5E38;<br>&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x5F20;&#xFF1F;",{time:3e4,btn:["&#x4E0B;&#x4E00;&#x5F20;","&#x4E0D;&#x770B;&#x4E86;"],yes:function(){d.length>1&&l.imgnext(!0,!0)}})})}},o.run=function(t){i=t,n=i(e),s.html=i("html"),r.open=function(e){var t=new l(e);return t.index}},e.layui&&layui.define?(r.ready(),layui.define("jquery",function(t){r.path=layui.cache.dir,o.run(layui.jquery),e.layer=r,t("layer",r)})):"function"==typeof define?define(["jquery"],function(){return o.run(e.jQuery),r}):function(){o.run(e.jQuery),r.ready()}()}(window);
/*select2.js*/
function myehr_initSelect2(params){
	var selectObj = $("#"+params.id);
	selectObj.select2({
		language: "zh-CN",  
	    allowClear: true,  
	    width: params.width,  
	    height:params.height,  
	    placeholder: params.placeholder,
	  	data: myehr_getSelectjsonData(params.url,params.jsonParam)
	});
	$("#"+params.id).select2("data",{"id":myehr_getSelectjsonData(params.url,params.jsonParam)[0].id,"text":myehr_getSelectjsonData(params.url,params.jsonParam)[0].text});
	if(params.value!=null&&params.value!=''){ //设置默认值
		selectObj.val("2").trigger("change");
	}
	
	if(params.chang){
		selectObj.on("change", params.chang);
	}
	
}

function myehr_getSelectjsonData(url,jsonParam){
	var  _temp = null;
	url+='&dictTypeCode='+jsonParam.dictTypeCode;
	if(jsonParam.nullItemText!=undefined){
		url+='&nullItemText='+encodeURI(jsonParam.nullItemText, "UTF-8");
	}
	
	$.ajax({  
        url: url,  
        async:false, //是否为异步操作  
	    cache:false,    //是否缓存结果  
	    type:"POST",    //请求方式  
	    dataType:"json",    //服务器返回数据是什么类型  
	    //contentType: "application/x-www-form-urlencoded; charset=utf-8",
	    data:JSON.stringify(jsonParam),
	    success:function(result){   //此函数在服务器执行成功时被调用，参数result是服务器返回的值  
	    	_temp = result;
	    }  
    });
    return _temp;
 }

function myehr_getInitData_field(dt){
	var  _temp = null;
	$.ajax({  
        url: '/myehr/FieldList/findSelectInitData.action?fieldId='+dt,  
        async:false, //是否为异步操作  
	    cache:false,    //是否缓存结果  
	    type:"POST",    //请求方式  
	    dataType:"json",    //服务器返回数据是什么类型  
	    success:function(result){   //此函数在服务器执行成功时被调用，参数result是服务器返回的值  
	    	_temp = result;
	    }  
    });
    return _temp;
}

function myehr_getInitData_form(dt,containerParam){
	var  _temp = null;
	var _param = {};
	_param.formColumnId = dt;
	_param.containerParam = containerParam;
	$.ajax({  
        url: '/myehr/form/findSelectInitData.action?formColumnId='+dt,  
        async:false, //是否为异步操作  
        data: JSON.stringify(_param),
	    cache:false,    //是否缓存结果  
	    type:"POST",    //请求方式  
	    contentType: 'application/json;charset=utf-8',
	    dataType:"json",    //服务器返回数据是什么类型  
	    success:function(result){   //此函数在服务器执行成功时被调用，参数result是服务器返回的值  
	    	_temp = result;
	    }  
    });
    return _temp;
 }

function myehr_initSelect(params,dataField,containerParam,dataString){
	var str = [];
	var obj = document.getElementById(params.id);
	if(obj!=undefined&&obj!=null){
		obj.options.length=0;
	}
	
	
	if(dataField!=undefined){
		str = dataField.split("_");
	}
	if(dataString!=undefined && dataString!=""){
		var data =  eval(dataString);
		for(var i=0;i<data.length;i++){
			document.getElementById(params.id).options.add(new Option(data[i].text,data[i].id));
		}
		return;
	}else if(str.length!=0){
		if(str.length==1||str[0]==("dict")||str[0]==("dictList")){
			var data = myehr_getSelectjsonData(params.url,params.jsonParam);
		}else{
			if(str.length>2&&str[1]==("form")){
				var data = myehr_getInitData_form(str[2],containerParam);
			}else{
				var data = myehr_getInitData_field(str[2]);
			}
		}
	}
	
	var dictDatas= [];
	if(params.id=="SYS_COMMON_YES_NO"){
		for(var i=data.length;i>0;i--){
			document.getElementById(params.id).options.add(new Option(data[i-1].text,data[i-1].id));
		}
	}else if(params.dictData!=undefined){
		dictDatas=params.dictData.split(",");
		if(params.jsonParam.dictTypeCode==dictDatas[0]){
			for(var j=1;j<dictDatas.length;j++){
				for(var i=0;i<data.length;i++){
					if(dictDatas[j]== data[i].id){
						if(data[i].id==params.value){
							document.getElementById(params.id).options.add(new Option(data[i].text,data[i].id,true,true));
						}else{
							document.getElementById(params.id).options.add(new Option(data[i].text,data[i].id));
						}
					}
				}	
			}
		}else{
			for(var i=0;i<data.length;i++){
				if(data[i].id==params.value){
					document.getElementById(params.id).options.add(new Option(data[i].text,data[i].id,true,true));
				}else{
					document.getElementById(params.id).options.add(new Option(data[i].text,data[i].id));
				}
				
			}	
		}
		$('.selectpicker').selectpicker('refresh');
	}else{
		for(var i=0;i<data.length;i++){
			if(data[i].id==params.value){
				document.getElementById(params.id).options.add(new Option(data[i].text,data[i].id,true,true));
			}else{
				document.getElementById(params.id).options.add(new Option(data[i].text,data[i].id));
			}
		}	
		$('.selectpicker').selectpicker('refresh');
	}
}
function myehr_initSelectMore(params,dataField){
	var data = myehr_getSelectjsonData(params.url,params.jsonParam);
	if(params.id=="SYS_COMMON_YES_NO"){
		for(var i=data.length;i>0;i--){
			document.getElementById(params.id).options.add(new Option(myehr_getSelectjsonData(params.url,params.jsonParam)[i-1].text,myehr_getSelectjsonData(params.url,params.jsonParam)[i-1].id));
		}
	}else{
		var txt='';
		for(var i = 1;i <data.length;i++){
			txt += '<option value='+ data[i].id +'>' + data[i].text +'</option>';
		}
		document.getElementById(params.id).innerHTML=txt;
		$('.selectpicker').selectpicker('refresh');	
	}
}

function myehr_initSelect_sql(id,sql){
	var data = myehr_getInitData_sql(sql);
	for(var i=0;i<data.length;i++){
		document.getElementById(id).options.add(new Option(data[i].text,data[i].id));
	}
	$('.selectpicker').selectpicker('refresh');
}
function myehr_getInitData_sql(sql){
	var  _temp = sql;
	var datas = [];
	$.ajax({  
        url: '/myehr/dict/findSelectInitDataBysql.action?dataBySql='+_temp,  
        async:false, //是否为异步操作  
	    cache:false,    //是否缓存结果  
	    type:"POST",    //请求方式  
	    dataType:"json",    //服务器返回数据是什么类型  
	    success:function(result){   //此函数在服务器执行成功时被调用，参数result是服务器返回的值  
	    	datas = result;
	    }  
    });
    return datas;
 }
function myehr_SQLFORBID_sql(sql){
	var  _temp = sql;
	var datas = [];
	$.ajax({  
        url: '/myehr/dict/getDataBySql.action?dataBySql='+encodeURIComponent(_temp),  
        async:false, //是否为异步操作  
	    cache:false,    //是否缓存结果  
	    type:"POST",    //请求方式  
	    dataType:"json",    //服务器返回数据是什么类型  
	    success:function(result){   //此函数在服务器执行成功时被调用，参数result是服务器返回的值  
	    	datas = result;
	    }  
    });
    return datas;
 }

function myehr_initSelect_color(params,dataField,containerParam,dataString){
	var str = [];
	var obj = document.getElementById(params.id);
	var data = myehr_getSelectjsonData(params.url,params.jsonParam);
	var dictDatas= [];
	for(var i=0;i<data.length;i++){
		if(data[i].text.split("_")[0]=='渐变'){
			$("#"+params.id).append("<option value=\""+data[i].id+"\">"+data[i].text+"</option>\n");
		}else{
			$("#"+params.id).append("<option style=\"background-color:"+data[i].id+";height:20px;margin:5px\" value=\""+data[i].id+"\">"+data[i].text+"</option>\n");
		}
		
	}	
}
/*select2.full.js*/
/*!
 * Select2 4.0.3
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS
    factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 =
(function () {
  // Restore the Select2 AMD loader so it can be used
  // Needed mostly in the language files, where the loader is not inserted
  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
    var S2 = jQuery.fn.select2.amd;
  }
var S2;(function () { if (!S2 || !S2.requirejs) {
if (!S2) { S2 = {}; } else { require = S2; }
/**
 * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                //Lop off the last part of baseParts, so that . matches the
                //"directory" and not name of the baseName's module. For instance,
                //baseName of "one/two/three", maps to "one/two/three.js", but we
                //want the directory, "one/two" for this normalization.
                name = baseParts.slice(0, baseParts.length - 1).concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

S2.requirejs = requirejs;S2.require = require;S2.define = define;
}
}());
S2.define("almond", function(){});

/* global jQuery:false, $:false */
S2.define('jquery',[],function () {
  var _$ = jQuery || $;

  if (_$ == null && console && console.error) {
    console.error(
      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
      'found. Make sure that you are including jQuery before Select2 on your ' +
      'web page.'
    );
  }

  return _$;
});

S2.define('select2/utils',[
  'jquery'
], function ($) {
  var Utils = {};

  Utils.Extend = function (ChildClass, SuperClass) {
    var __hasProp = {}.hasOwnProperty;

    function BaseConstructor () {
      this.constructor = ChildClass;
    }

    for (var key in SuperClass) {
      if (__hasProp.call(SuperClass, key)) {
        ChildClass[key] = SuperClass[key];
      }
    }

    BaseConstructor.prototype = SuperClass.prototype;
    ChildClass.prototype = new BaseConstructor();
    ChildClass.__super__ = SuperClass.prototype;

    return ChildClass;
  };

  function getMethods (theClass) {
    var proto = theClass.prototype;

    var methods = [];

    for (var methodName in proto) {
      var m = proto[methodName];

      if (typeof m !== 'function') {
        continue;
      }

      if (methodName === 'constructor') {
        continue;
      }

      methods.push(methodName);
    }

    return methods;
  }

  Utils.Decorate = function (SuperClass, DecoratorClass) {
    var decoratedMethods = getMethods(DecoratorClass);
    var superMethods = getMethods(SuperClass);

    function DecoratedClass () {
      var unshift = Array.prototype.unshift;

      var argCount = DecoratorClass.prototype.constructor.length;

      var calledConstructor = SuperClass.prototype.constructor;

      if (argCount > 0) {
        unshift.call(arguments, SuperClass.prototype.constructor);

        calledConstructor = DecoratorClass.prototype.constructor;
      }

      calledConstructor.apply(this, arguments);
    }

    DecoratorClass.displayName = SuperClass.displayName;

    function ctr () {
      this.constructor = DecoratedClass;
    }

    DecoratedClass.prototype = new ctr();

    for (var m = 0; m < superMethods.length; m++) {
        var superMethod = superMethods[m];

        DecoratedClass.prototype[superMethod] =
          SuperClass.prototype[superMethod];
    }

    var calledMethod = function (methodName) {
      // Stub out the original method if it's not decorating an actual method
      var originalMethod = function () {};

      if (methodName in DecoratedClass.prototype) {
        originalMethod = DecoratedClass.prototype[methodName];
      }

      var decoratedMethod = DecoratorClass.prototype[methodName];

      return function () {
        var unshift = Array.prototype.unshift;

        unshift.call(arguments, originalMethod);

        return decoratedMethod.apply(this, arguments);
      };
    };

    for (var d = 0; d < decoratedMethods.length; d++) {
      var decoratedMethod = decoratedMethods[d];

      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
    }

    return DecoratedClass;
  };

  var Observable = function () {
    this.listeners = {};
  };

  Observable.prototype.on = function (event, callback) {
    this.listeners = this.listeners || {};

    if (event in this.listeners) {
      this.listeners[event].push(callback);
    } else {
      this.listeners[event] = [callback];
    }
  };

  Observable.prototype.trigger = function (event) {
    var slice = Array.prototype.slice;
    var params = slice.call(arguments, 1);

    this.listeners = this.listeners || {};

    // Params should always come in as an array
    if (params == null) {
      params = [];
    }

    // If there are no arguments to the event, use a temporary object
    if (params.length === 0) {
      params.push({});
    }

    // Set the `_type` of the first object to the event
    params[0]._type = event;

    if (event in this.listeners) {
      this.invoke(this.listeners[event], slice.call(arguments, 1));
    }

    if ('*' in this.listeners) {
      this.invoke(this.listeners['*'], arguments);
    }
  };

  Observable.prototype.invoke = function (listeners, params) {
    for (var i = 0, len = listeners.length; i < len; i++) {
      listeners[i].apply(this, params);
    }
  };

  Utils.Observable = Observable;

  Utils.generateChars = function (length) {
    var chars = '';

    for (var i = 0; i < length; i++) {
      var randomChar = Math.floor(Math.random() * 36);
      chars += randomChar.toString(36);
    }

    return chars;
  };

  Utils.bind = function (func, context) {
    return function () {
      func.apply(context, arguments);
    };
  };

  Utils._convertData = function (data) {
    for (var originalKey in data) {
      var keys = originalKey.split('-');

      var dataLevel = data;

      if (keys.length === 1) {
        continue;
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k];

        // Lowercase the first letter
        // By default, dash-separated becomes camelCase
        key = key.substring(0, 1).toLowerCase() + key.substring(1);

        if (!(key in dataLevel)) {
          dataLevel[key] = {};
        }

        if (k == keys.length - 1) {
          dataLevel[key] = data[originalKey];
        }

        dataLevel = dataLevel[key];
      }

      delete data[originalKey];
    }

    return data;
  };

  Utils.hasScroll = function (index, el) {
    // Adapted from the function created by @ShadowScripter
    // and adapted by @BillBarry on the Stack Exchange Code Review website.
    // The original code can be found at
    // http://codereview.stackexchange.com/q/13338
    // and was designed to be used with the Sizzle selector engine.

    var $el = $(el);
    var overflowX = el.style.overflowX;
    var overflowY = el.style.overflowY;

    //Check both x and y declarations
    if (overflowX === overflowY &&
        (overflowY === 'hidden' || overflowY === 'visible')) {
      return false;
    }

    if (overflowX === 'scroll' || overflowY === 'scroll') {
      return true;
    }

    return ($el.innerHeight() < el.scrollHeight ||
      $el.innerWidth() < el.scrollWidth);
  };

  Utils.escapeMarkup = function (markup) {
    var replaceMap = {
      '\\': '&#92;',
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;',
      '/': '&#47;'
    };

    // Do not try to escape the markup if it's not a string
    if (typeof markup !== 'string') {
      return markup;
    }

    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
      return replaceMap[match];
    });
  };

  // Append an array of jQuery nodes to a given element.
  Utils.appendMany = function ($element, $nodes) {
    // jQuery 1.7.x does not support $.fn.append() with an array
    // Fall back to a jQuery object collection using $.fn.add()
    if ($.fn.jquery.substr(0, 3) === '1.7') {
      var $jqNodes = $();

      $.map($nodes, function (node) {
        $jqNodes = $jqNodes.add(node);
      });

      $nodes = $jqNodes;
    }

    $element.append($nodes);
  };

  return Utils;
});

S2.define('select2/results',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Results ($element, options, dataAdapter) {
    this.$element = $element;
    this.data = dataAdapter;
    this.options = options;

    Results.__super__.constructor.call(this);
  }

  Utils.Extend(Results, Utils.Observable);

  Results.prototype.render = function () {
    var $results = $(
      '<ul class="select2-results__options" role="tree"></ul>'
    );

    if (this.options.get('multiple')) {
      $results.attr('aria-multiselectable', 'true');
    }

    this.$results = $results;

    return $results;
  };

  Results.prototype.clear = function () {
    this.$results.empty();
  };

  Results.prototype.displayMessage = function (params) {
    var escapeMarkup = this.options.get('escapeMarkup');

    this.clear();
    this.hideLoading();

    var $message = $(
      '<li role="treeitem" aria-live="assertive"' +
      ' class="select2-results__option"></li>'
    );

    var message = this.options.get('translations').get(params.message);

    $message.append(
      escapeMarkup(
        message(params.args)
      )
    );

    $message[0].className += ' select2-results__message';

    this.$results.append($message);
  };

  Results.prototype.hideMessages = function () {
    this.$results.find('.select2-results__message').remove();
  };

  Results.prototype.append = function (data) {
    this.hideLoading();

    var $options = [];

    if (data.results == null || data.results.length === 0) {
      if (this.$results.children().length === 0) {
        this.trigger('results:message', {
          message: 'noResults'
        });
      }

      return;
    }

    data.results = this.sort(data.results);

    for (var d = 0; d < data.results.length; d++) {
      var item = data.results[d];

      var $option = this.option(item);

      $options.push($option);
    }

    this.$results.append($options);
  };

  Results.prototype.position = function ($results, $dropdown) {
    var $resultsContainer = $dropdown.find('.select2-results');
    $resultsContainer.append($results);
  };

  Results.prototype.sort = function (data) {
    var sorter = this.options.get('sorter');

    return sorter(data);
  };

  Results.prototype.highlightFirstItem = function () {
    var $options = this.$results
      .find('.select2-results__option[aria-selected]');

    var $selected = $options.filter('[aria-selected=true]');

    // Check if there are any selected options
    if ($selected.length > 0) {
      // If there are selected options, highlight the first
      $selected.first().trigger('mouseenter');
    } else {
      // If there are no selected options, highlight the first option
      // in the dropdown
      $options.first().trigger('mouseenter');
    }

    this.ensureHighlightVisible();
  };

  Results.prototype.setClasses = function () {
    var self = this;

    this.data.current(function (selected) {
      var selectedIds = $.map(selected, function (s) {
        return s.id.toString();
      });

      var $options = self.$results
        .find('.select2-results__option[aria-selected]');

      $options.each(function () {
        var $option = $(this);

        var item = $.data(this, 'data');

        // id needs to be converted to a string when comparing
        var id = '' + item.id;

        if ((item.element != null && item.element.selected) ||
            (item.element == null && $.inArray(id, selectedIds) > -1)) {
          $option.attr('aria-selected', 'true');
        } else {
          $option.attr('aria-selected', 'false');
        }
      });

    });
  };

  Results.prototype.showLoading = function (params) {
    this.hideLoading();

    var loadingMore = this.options.get('translations').get('searching');

    var loading = {
      disabled: true,
      loading: true,
      text: loadingMore(params)
    };
    var $loading = this.option(loading);
    $loading.className += ' loading-results';

    this.$results.prepend($loading);
  };

  Results.prototype.hideLoading = function () {
    this.$results.find('.loading-results').remove();
  };

  Results.prototype.option = function (data) {
    var option = document.createElement('li');
    option.className = 'select2-results__option';

    var attrs = {
      'role': 'treeitem',
      'aria-selected': 'false'
    };

    if (data.disabled) {
      delete attrs['aria-selected'];
      attrs['aria-disabled'] = 'true';
    }

    if (data.id == null) {
      delete attrs['aria-selected'];
    }

    if (data._resultId != null) {
      option.id = data._resultId;
    }

    if (data.title) {
      option.title = data.title;
    }

    if (data.children) {
      attrs.role = 'group';
      attrs['aria-label'] = data.text;
      delete attrs['aria-selected'];
    }

    for (var attr in attrs) {
      var val = attrs[attr];

      option.setAttribute(attr, val);
    }

    if (data.children) {
      var $option = $(option);

      var label = document.createElement('strong');
      label.className = 'select2-results__group';

      var $label = $(label);
      this.template(data, label);

      var $children = [];

      for (var c = 0; c < data.children.length; c++) {
        var child = data.children[c];

        var $child = this.option(child);

        $children.push($child);
      }

      var $childrenContainer = $('<ul></ul>', {
        'class': 'select2-results__options select2-results__options--nested'
      });

      $childrenContainer.append($children);

      $option.append(label);
      $option.append($childrenContainer);
    } else {
      this.template(data, option);
    }

    $.data(option, 'data', data);

    return option;
  };

  Results.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-results';

    this.$results.attr('id', id);

    container.on('results:all', function (params) {
      self.clear();
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
        self.highlightFirstItem();
      }
    });

    container.on('results:append', function (params) {
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
      }
    });

    container.on('query', function (params) {
      self.hideMessages();
      self.showLoading(params);
    });

    container.on('select', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();
      self.highlightFirstItem();
    });

    container.on('unselect', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();
      self.highlightFirstItem();
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expended="true"
      self.$results.attr('aria-expanded', 'true');
      self.$results.attr('aria-hidden', 'false');

      self.setClasses();
      self.ensureHighlightVisible();
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expended="false"
      self.$results.attr('aria-expanded', 'false');
      self.$results.attr('aria-hidden', 'true');
      self.$results.removeAttr('aria-activedescendant');
    });

    container.on('results:toggle', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      $highlighted.trigger('mouseup');
    });

    container.on('results:select', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      var data = $highlighted.data('data');

      if ($highlighted.attr('aria-selected') == 'true') {
        self.trigger('close', {});
      } else {
        self.trigger('select', {
          data: data
        });
      }
    });

    container.on('results:previous', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[aria-selected]');

      var currentIndex = $options.index($highlighted);

      // If we are already at te top, don't move further
      if (currentIndex === 0) {
        return;
      }

      var nextIndex = currentIndex - 1;

      // If none are highlighted, highlight the first
      if ($highlighted.length === 0) {
        nextIndex = 0;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top;
      var nextTop = $next.offset().top;
      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextTop - currentOffset < 0) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:next', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[aria-selected]');

      var currentIndex = $options.index($highlighted);

      var nextIndex = currentIndex + 1;

      // If we are at the last option, stay there
      if (nextIndex >= $options.length) {
        return;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var nextBottom = $next.offset().top + $next.outerHeight(false);
      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextBottom > currentOffset) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:focus', function (params) {
      params.element.addClass('select2-results__option--highlighted');
    });

    container.on('results:message', function (params) {
      self.displayMessage(params);
    });

    if ($.fn.mousewheel) {
      this.$results.on('mousewheel', function (e) {
        var top = self.$results.scrollTop();

        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

        if (isAtTop) {
          self.$results.scrollTop(0);

          e.preventDefault();
          e.stopPropagation();
        } else if (isAtBottom) {
          self.$results.scrollTop(
            self.$results.get(0).scrollHeight - self.$results.height()
          );

          e.preventDefault();
          e.stopPropagation();
        }
      });
    }

    this.$results.on('mouseup', '.select2-results__option[aria-selected]',
      function (evt) {
      var $this = $(this);

      var data = $this.data('data');

      if ($this.attr('aria-selected') === 'true') {
        if (self.options.get('multiple')) {
          self.trigger('unselect', {
            originalEvent: evt,
            data: data
          });
        } else {
          self.trigger('close', {});
        }

        return;
      }

      self.trigger('select', {
        originalEvent: evt,
        data: data
      });
    });

    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
      function (evt) {
      var data = $(this).data('data');

      self.getHighlightedResults()
          .removeClass('select2-results__option--highlighted');

      self.trigger('results:focus', {
        data: data,
        element: $(this)
      });
    });
  };

  Results.prototype.getHighlightedResults = function () {
    var $highlighted = this.$results
    .find('.select2-results__option--highlighted');

    return $highlighted;
  };

  Results.prototype.destroy = function () {
    this.$results.remove();
  };

  Results.prototype.ensureHighlightVisible = function () {
    var $highlighted = this.getHighlightedResults();

    if ($highlighted.length === 0) {
      return;
    }

    var $options = this.$results.find('[aria-selected]');

    var currentIndex = $options.index($highlighted);

    var currentOffset = this.$results.offset().top;
    var nextTop = $highlighted.offset().top;
    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

    var offsetDelta = nextTop - currentOffset;
    nextOffset -= $highlighted.outerHeight(false) * 2;

    if (currentIndex <= 2) {
      this.$results.scrollTop(0);
    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
      this.$results.scrollTop(nextOffset);
    }
  };

  Results.prototype.template = function (result, container) {
    var template = this.options.get('templateResult');
    var escapeMarkup = this.options.get('escapeMarkup');

    var content = template(result, container);

    if (content == null) {
      container.style.display = 'none';
    } else if (typeof content === 'string') {
      container.innerHTML = escapeMarkup(content);
    } else {
      $(container).append(content);
    }
  };

  return Results;
});

S2.define('select2/keys',[

], function () {
  var KEYS = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DELETE: 46
  };

  return KEYS;
});

S2.define('select2/selection/base',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function BaseSelection ($element, options) {
    this.$element = $element;
    this.options = options;

    BaseSelection.__super__.constructor.call(this);
  }

  Utils.Extend(BaseSelection, Utils.Observable);

  BaseSelection.prototype.render = function () {
    var $selection = $(
      '<span class="select2-selection" role="combobox" ' +
      ' aria-haspopup="true" aria-expanded="false">' +
      '</span>'
    );

    this._tabindex = 0;

    if (this.$element.data('old-tabindex') != null) {
      this._tabindex = this.$element.data('old-tabindex');
    } else if (this.$element.attr('tabindex') != null) {
      this._tabindex = this.$element.attr('tabindex');
    }

    $selection.attr('title', this.$element.attr('title'));
    $selection.attr('tabindex', this._tabindex);

    this.$selection = $selection;

    return $selection;
  };

  BaseSelection.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-container';
    var resultsId = container.id + '-results';

    this.container = container;

    this.$selection.on('focus', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('blur', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      if (evt.which === KEYS.SPACE) {
        evt.preventDefault();
      }
    });

    container.on('results:focus', function (params) {
      self.$selection.attr('aria-activedescendant', params.data._resultId);
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expanded="true"
      self.$selection.attr('aria-expanded', 'true');
      self.$selection.attr('aria-owns', resultsId);

      self._attachCloseHandler(container);
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expanded="false"
      self.$selection.attr('aria-expanded', 'false');
      self.$selection.removeAttr('aria-activedescendant');
      self.$selection.removeAttr('aria-owns');

      self.$selection.focus();

      self._detachCloseHandler(container);
    });

    container.on('enable', function () {
      self.$selection.attr('tabindex', self._tabindex);
    });

    container.on('disable', function () {
      self.$selection.attr('tabindex', '-1');
    });
  };

  BaseSelection.prototype._handleBlur = function (evt) {
    var self = this;

    // This needs to be delayed as the active element is the body when the tab
    // key is pressed, possibly along with others.
    window.setTimeout(function () {
      // Don't trigger `blur` if the focus is still in the selection
      if (
        (document.activeElement == self.$selection[0]) ||
        ($.contains(self.$selection[0], document.activeElement))
      ) {
        return;
      }

      self.trigger('blur', evt);
    }, 1);
  };

  BaseSelection.prototype._attachCloseHandler = function (container) {
    var self = this;

    $(document.body).on('mousedown.select2.' + container.id, function (e) {
      var $target = $(e.target);

      var $select = $target.closest('.select2');

      var $all = $('.select2.select2-container--open');

      $all.each(function () {
        var $this = $(this);

        if (this == $select[0]) {
          return;
        }

        var $element = $this.data('element');

        $element.select2('close');
      });
    });
  };

  BaseSelection.prototype._detachCloseHandler = function (container) {
    $(document.body).off('mousedown.select2.' + container.id);
  };

  BaseSelection.prototype.position = function ($selection, $container) {
    var $selectionContainer = $container.find('.selection');
    $selectionContainer.append($selection);
  };

  BaseSelection.prototype.destroy = function () {
    this._detachCloseHandler(this.container);
  };

  BaseSelection.prototype.update = function (data) {
    throw new Error('The `update` method must be defined in child classes.');
  };

  return BaseSelection;
});

S2.define('select2/selection/single',[
  'jquery',
  './base',
  '../utils',
  '../keys'
], function ($, BaseSelection, Utils, KEYS) {
  function SingleSelection () {
    SingleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(SingleSelection, BaseSelection);

  SingleSelection.prototype.render = function () {
    var $selection = SingleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--single');

    $selection.html(
      '<span class="select2-selection__rendered"></span>' +
      '<span class="select2-selection__arrow" role="presentation">' +
        '<b role="presentation"></b>' +
      '</span>'
    );

    return $selection;
  };

  SingleSelection.prototype.bind = function (container, $container) {
    var self = this;

    SingleSelection.__super__.bind.apply(this, arguments);

    var id = container.id + '-container';

    this.$selection.find('.select2-selection__rendered').attr('id', id);
    this.$selection.attr('aria-labelledby', id);

    this.$selection.on('mousedown', function (evt) {
      // Only respond to left clicks
      if (evt.which !== 1) {
        return;
      }

      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on('focus', function (evt) {
      // User focuses on the container
    });

    this.$selection.on('blur', function (evt) {
      // User exits the container
    });

    container.on('focus', function (evt) {
      if (!container.isOpen()) {
        self.$selection.focus();
      }
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });
  };

  SingleSelection.prototype.clear = function () {
    this.$selection.find('.select2-selection__rendered').empty();
  };

  SingleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  SingleSelection.prototype.selectionContainer = function () {
    return $('<span></span>');
  };

  SingleSelection.prototype.update = function (data) {
    if (data.length === 0) {
      this.clear();
      return;
    }

    var selection = data[0];

    var $rendered = this.$selection.find('.select2-selection__rendered');
    var formatted = this.display(selection, $rendered);

    $rendered.empty().append(formatted);
    $rendered.prop('title', selection.title || selection.text);
  };

  return SingleSelection;
});

S2.define('select2/selection/multiple',[
  'jquery',
  './base',
  '../utils'
], function ($, BaseSelection, Utils) {
  function MultipleSelection ($element, options) {
    MultipleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(MultipleSelection, BaseSelection);

  MultipleSelection.prototype.render = function () {
    var $selection = MultipleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--multiple');

    $selection.html(
      '<ul class="select2-selection__rendered"></ul>'
    );

    return $selection;
  };

  MultipleSelection.prototype.bind = function (container, $container) {
    var self = this;

    MultipleSelection.__super__.bind.apply(this, arguments);

    this.$selection.on('click', function (evt) {
      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on(
      'click',
      '.select2-selection__choice__remove',
      function (evt) {
        // Ignore the event if it is disabled
        if (self.options.get('disabled')) {
          return;
        }

        var $remove = $(this);
        var $selection = $remove.parent();

        var data = $selection.data('data');

        self.trigger('unselect', {
          originalEvent: evt,
          data: data
        });
      }
    );
  };

  MultipleSelection.prototype.clear = function () {
    this.$selection.find('.select2-selection__rendered').empty();
  };

  MultipleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  MultipleSelection.prototype.selectionContainer = function () {
    var $container = $(
      '<li class="select2-selection__choice">' +
        '<span class="select2-selection__choice__remove" role="presentation">' +
          '&times;' +
        '</span>' +
      '</li>'
    );

    return $container;
  };

  MultipleSelection.prototype.update = function (data) {
    this.clear();

    if (data.length === 0) {
      return;
    }

    var $selections = [];

    for (var d = 0; d < data.length; d++) {
      var selection = data[d];

      var $selection = this.selectionContainer();
      var formatted = this.display(selection, $selection);

      $selection.append(formatted);
      $selection.prop('title', selection.title || selection.text);

      $selection.data('data', selection);

      $selections.push($selection);
    }

    var $rendered = this.$selection.find('.select2-selection__rendered');

    Utils.appendMany($rendered, $selections);
  };

  return MultipleSelection;
});

S2.define('select2/selection/placeholder',[
  '../utils'
], function (Utils) {
  function Placeholder (decorated, $element, options) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options);
  }

  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
    var $placeholder = this.selectionContainer();

    $placeholder.html(this.display(placeholder));
    $placeholder.addClass('select2-selection__placeholder')
                .removeClass('select2-selection__choice');

    return $placeholder;
  };

  Placeholder.prototype.update = function (decorated, data) {
    var singlePlaceholder = (
      data.length == 1 && data[0].id != this.placeholder.id
    );
    var multipleSelections = data.length > 1;

    if (multipleSelections || singlePlaceholder) {
      return decorated.call(this, data);
    }

    this.clear();

    var $placeholder = this.createPlaceholder(this.placeholder);

    this.$selection.find('.select2-selection__rendered').append($placeholder);
  };

  return Placeholder;
});

S2.define('select2/selection/allowClear',[
  'jquery',
  '../keys'
], function ($, KEYS) {
  function AllowClear () { }

  AllowClear.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    if (this.placeholder == null) {
      if (this.options.get('debug') && window.console && console.error) {
        console.error(
          'Select2: The `allowClear` option should be used in combination ' +
          'with the `placeholder` option.'
        );
      }
    }

    this.$selection.on('mousedown', '.select2-selection__clear',
      function (evt) {
        self._handleClear(evt);
    });

    container.on('keypress', function (evt) {
      self._handleKeyboardClear(evt, container);
    });
  };

  AllowClear.prototype._handleClear = function (_, evt) {
    // Ignore the event if it is disabled
    if (this.options.get('disabled')) {
      return;
    }

    var $clear = this.$selection.find('.select2-selection__clear');

    // Ignore the event if nothing has been selected
    if ($clear.length === 0) {
      return;
    }

    evt.stopPropagation();

    var data = $clear.data('data');

    for (var d = 0; d < data.length; d++) {
      var unselectData = {
        data: data[d]
      };

      // Trigger the `unselect` event, so people can prevent it from being
      // cleared.
      this.trigger('unselect', unselectData);

      // If the event was prevented, don't clear it out.
      if (unselectData.prevented) {
        return;
      }
    }

    this.$element.val(this.placeholder.id).trigger('change');

    this.trigger('toggle', {});
  };

  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
    if (container.isOpen()) {
      return;
    }

    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
      this._handleClear(evt);
    }
  };

  AllowClear.prototype.update = function (decorated, data) {
    decorated.call(this, data);

    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
        data.length === 0) {
      return;
    }

    var $remove = $(
      '<span class="select2-selection__clear">' +
        '&times;' +
      '</span>'
    );
    $remove.data('data', data);

    this.$selection.find('.select2-selection__rendered').prepend($remove);
  };

  return AllowClear;
});

S2.define('select2/selection/search',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function Search (decorated, $element, options) {
    decorated.call(this, $element, options);
  }

  Search.prototype.render = function (decorated) {
    var $search = $(
      '<li class="select2-search select2-search--inline">' +
        '<input class="select2-search__field" type="search" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
        ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
      '</li>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    var $rendered = decorated.call(this);

    this._transferTabIndex();

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('open', function () {
      self.$search.trigger('focus');
    });

    container.on('close', function () {
      self.$search.val('');
      self.$search.removeAttr('aria-activedescendant');
      self.$search.trigger('focus');
    });

    container.on('enable', function () {
      self.$search.prop('disabled', false);

      self._transferTabIndex();
    });

    container.on('disable', function () {
      self.$search.prop('disabled', true);
    });

    container.on('focus', function (evt) {
      self.$search.trigger('focus');
    });

    container.on('results:focus', function (params) {
      self.$search.attr('aria-activedescendant', params.id);
    });

    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
      evt.stopPropagation();

      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();

      var key = evt.which;

      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
        var $previousChoice = self.$searchContainer
          .prev('.select2-selection__choice');

        if ($previousChoice.length > 0) {
          var item = $previousChoice.data('data');

          self.searchRemoveChoice(item);

          evt.preventDefault();
        }
      }
    });

    // Try to detect the IE version should the `documentMode` property that
    // is stored on the document. This is only implemented in IE and is
    // slightly cleaner than doing a user agent check.
    // This property is not available in Edge, but Edge also doesn't have
    // this bug.
    var msie = document.documentMode;
    var disableInputEvents = msie && msie <= 11;

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$selection.on(
      'input.searchcheck',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents) {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        // Unbind the duplicated `keyup` event
        self.$selection.off('keyup.search');
      }
    );

    this.$selection.on(
      'keyup.search input.search',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents && evt.type === 'input') {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        var key = evt.which;

        // We can freely ignore events from modifier keys
        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
          return;
        }

        // Tabbing will be handled during the `keydown` phase
        if (key == KEYS.TAB) {
          return;
        }

        self.handleSearch(evt);
      }
    );
  };

  /**
   * This method will transfer the tabindex attribute from the rendered
   * selection to the search box. This allows for the search box to be used as
   * the primary focus instead of the selection container.
   *
   * @private
   */
  Search.prototype._transferTabIndex = function (decorated) {
    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
    this.$selection.attr('tabindex', '-1');
  };

  Search.prototype.createPlaceholder = function (decorated, placeholder) {
    this.$search.attr('placeholder', placeholder.text);
  };

  Search.prototype.update = function (decorated, data) {
    var searchHadFocus = this.$search[0] == document.activeElement;

    this.$search.attr('placeholder', '');

    decorated.call(this, data);

    this.$selection.find('.select2-selection__rendered')
                   .append(this.$searchContainer);

    this.resizeSearch();
    if (searchHadFocus) {
      this.$search.focus();
    }
  };

  Search.prototype.handleSearch = function () {
    this.resizeSearch();

    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.searchRemoveChoice = function (decorated, item) {
    this.trigger('unselect', {
      data: item
    });

    this.$search.val(item.text);
    this.handleSearch();
  };

  Search.prototype.resizeSearch = function () {
    this.$search.css('width', '25px');

    var width = '';

    if (this.$search.attr('placeholder') !== '') {
      width = this.$selection.find('.select2-selection__rendered').innerWidth();
    } else {
      var minimumWidth = this.$search.val().length + 1;

      width = (minimumWidth * 0.75) + 'em';
    }

    this.$search.css('width', width);
  };

  return Search;
});

S2.define('select2/selection/eventRelay',[
  'jquery'
], function ($) {
  function EventRelay () { }

  EventRelay.prototype.bind = function (decorated, container, $container) {
    var self = this;
    var relayEvents = [
      'open', 'opening',
      'close', 'closing',
      'select', 'selecting',
      'unselect', 'unselecting'
    ];

    var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

    decorated.call(this, container, $container);

    container.on('*', function (name, params) {
      // Ignore events that should not be relayed
      if ($.inArray(name, relayEvents) === -1) {
        return;
      }

      // The parameters should always be an object
      params = params || {};

      // Generate the jQuery event for the Select2 event
      var evt = $.Event('select2:' + name, {
        params: params
      });

      self.$element.trigger(evt);

      // Only handle preventable events if it was one
      if ($.inArray(name, preventableEvents) === -1) {
        return;
      }

      params.prevented = evt.isDefaultPrevented();
    });
  };

  return EventRelay;
});

S2.define('select2/translation',[
  'jquery',
  'require'
], function ($, require) {
  function Translation (dict) {
    this.dict = dict || {};
  }

  Translation.prototype.all = function () {
    return this.dict;
  };

  Translation.prototype.get = function (key) {
    return this.dict[key];
  };

  Translation.prototype.extend = function (translation) {
    this.dict = $.extend({}, translation.all(), this.dict);
  };

  // Static functions

  Translation._cache = {};

  Translation.loadPath = function (path) {
    if (!(path in Translation._cache)) {
      var translations = require(path);

      Translation._cache[path] = translations;
    }

    return new Translation(Translation._cache[path]);
  };

  return Translation;
});

S2.define('select2/diacritics',[

], function () {
  var diacritics = {
    '\u24B6': 'A',
    '\uFF21': 'A',
    '\u00C0': 'A',
    '\u00C1': 'A',
    '\u00C2': 'A',
    '\u1EA6': 'A',
    '\u1EA4': 'A',
    '\u1EAA': 'A',
    '\u1EA8': 'A',
    '\u00C3': 'A',
    '\u0100': 'A',
    '\u0102': 'A',
    '\u1EB0': 'A',
    '\u1EAE': 'A',
    '\u1EB4': 'A',
    '\u1EB2': 'A',
    '\u0226': 'A',
    '\u01E0': 'A',
    '\u00C4': 'A',
    '\u01DE': 'A',
    '\u1EA2': 'A',
    '\u00C5': 'A',
    '\u01FA': 'A',
    '\u01CD': 'A',
    '\u0200': 'A',
    '\u0202': 'A',
    '\u1EA0': 'A',
    '\u1EAC': 'A',
    '\u1EB6': 'A',
    '\u1E00': 'A',
    '\u0104': 'A',
    '\u023A': 'A',
    '\u2C6F': 'A',
    '\uA732': 'AA',
    '\u00C6': 'AE',
    '\u01FC': 'AE',
    '\u01E2': 'AE',
    '\uA734': 'AO',
    '\uA736': 'AU',
    '\uA738': 'AV',
    '\uA73A': 'AV',
    '\uA73C': 'AY',
    '\u24B7': 'B',
    '\uFF22': 'B',
    '\u1E02': 'B',
    '\u1E04': 'B',
    '\u1E06': 'B',
    '\u0243': 'B',
    '\u0182': 'B',
    '\u0181': 'B',
    '\u24B8': 'C',
    '\uFF23': 'C',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010A': 'C',
    '\u010C': 'C',
    '\u00C7': 'C',
    '\u1E08': 'C',
    '\u0187': 'C',
    '\u023B': 'C',
    '\uA73E': 'C',
    '\u24B9': 'D',
    '\uFF24': 'D',
    '\u1E0A': 'D',
    '\u010E': 'D',
    '\u1E0C': 'D',
    '\u1E10': 'D',
    '\u1E12': 'D',
    '\u1E0E': 'D',
    '\u0110': 'D',
    '\u018B': 'D',
    '\u018A': 'D',
    '\u0189': 'D',
    '\uA779': 'D',
    '\u01F1': 'DZ',
    '\u01C4': 'DZ',
    '\u01F2': 'Dz',
    '\u01C5': 'Dz',
    '\u24BA': 'E',
    '\uFF25': 'E',
    '\u00C8': 'E',
    '\u00C9': 'E',
    '\u00CA': 'E',
    '\u1EC0': 'E',
    '\u1EBE': 'E',
    '\u1EC4': 'E',
    '\u1EC2': 'E',
    '\u1EBC': 'E',
    '\u0112': 'E',
    '\u1E14': 'E',
    '\u1E16': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u00CB': 'E',
    '\u1EBA': 'E',
    '\u011A': 'E',
    '\u0204': 'E',
    '\u0206': 'E',
    '\u1EB8': 'E',
    '\u1EC6': 'E',
    '\u0228': 'E',
    '\u1E1C': 'E',
    '\u0118': 'E',
    '\u1E18': 'E',
    '\u1E1A': 'E',
    '\u0190': 'E',
    '\u018E': 'E',
    '\u24BB': 'F',
    '\uFF26': 'F',
    '\u1E1E': 'F',
    '\u0191': 'F',
    '\uA77B': 'F',
    '\u24BC': 'G',
    '\uFF27': 'G',
    '\u01F4': 'G',
    '\u011C': 'G',
    '\u1E20': 'G',
    '\u011E': 'G',
    '\u0120': 'G',
    '\u01E6': 'G',
    '\u0122': 'G',
    '\u01E4': 'G',
    '\u0193': 'G',
    '\uA7A0': 'G',
    '\uA77D': 'G',
    '\uA77E': 'G',
    '\u24BD': 'H',
    '\uFF28': 'H',
    '\u0124': 'H',
    '\u1E22': 'H',
    '\u1E26': 'H',
    '\u021E': 'H',
    '\u1E24': 'H',
    '\u1E28': 'H',
    '\u1E2A': 'H',
    '\u0126': 'H',
    '\u2C67': 'H',
    '\u2C75': 'H',
    '\uA78D': 'H',
    '\u24BE': 'I',
    '\uFF29': 'I',
    '\u00CC': 'I',
    '\u00CD': 'I',
    '\u00CE': 'I',
    '\u0128': 'I',
    '\u012A': 'I',
    '\u012C': 'I',
    '\u0130': 'I',
    '\u00CF': 'I',
    '\u1E2E': 'I',
    '\u1EC8': 'I',
    '\u01CF': 'I',
    '\u0208': 'I',
    '\u020A': 'I',
    '\u1ECA': 'I',
    '\u012E': 'I',
    '\u1E2C': 'I',
    '\u0197': 'I',
    '\u24BF': 'J',
    '\uFF2A': 'J',
    '\u0134': 'J',
    '\u0248': 'J',
    '\u24C0': 'K',
    '\uFF2B': 'K',
    '\u1E30': 'K',
    '\u01E8': 'K',
    '\u1E32': 'K',
    '\u0136': 'K',
    '\u1E34': 'K',
    '\u0198': 'K',
    '\u2C69': 'K',
    '\uA740': 'K',
    '\uA742': 'K',
    '\uA744': 'K',
    '\uA7A2': 'K',
    '\u24C1': 'L',
    '\uFF2C': 'L',
    '\u013F': 'L',
    '\u0139': 'L',
    '\u013D': 'L',
    '\u1E36': 'L',
    '\u1E38': 'L',
    '\u013B': 'L',
    '\u1E3C': 'L',
    '\u1E3A': 'L',
    '\u0141': 'L',
    '\u023D': 'L',
    '\u2C62': 'L',
    '\u2C60': 'L',
    '\uA748': 'L',
    '\uA746': 'L',
    '\uA780': 'L',
    '\u01C7': 'LJ',
    '\u01C8': 'Lj',
    '\u24C2': 'M',
    '\uFF2D': 'M',
    '\u1E3E': 'M',
    '\u1E40': 'M',
    '\u1E42': 'M',
    '\u2C6E': 'M',
    '\u019C': 'M',
    '\u24C3': 'N',
    '\uFF2E': 'N',
    '\u01F8': 'N',
    '\u0143': 'N',
    '\u00D1': 'N',
    '\u1E44': 'N',
    '\u0147': 'N',
    '\u1E46': 'N',
    '\u0145': 'N',
    '\u1E4A': 'N',
    '\u1E48': 'N',
    '\u0220': 'N',
    '\u019D': 'N',
    '\uA790': 'N',
    '\uA7A4': 'N',
    '\u01CA': 'NJ',
    '\u01CB': 'Nj',
    '\u24C4': 'O',
    '\uFF2F': 'O',
    '\u00D2': 'O',
    '\u00D3': 'O',
    '\u00D4': 'O',
    '\u1ED2': 'O',
    '\u1ED0': 'O',
    '\u1ED6': 'O',
    '\u1ED4': 'O',
    '\u00D5': 'O',
    '\u1E4C': 'O',
    '\u022C': 'O',
    '\u1E4E': 'O',
    '\u014C': 'O',
    '\u1E50': 'O',
    '\u1E52': 'O',
    '\u014E': 'O',
    '\u022E': 'O',
    '\u0230': 'O',
    '\u00D6': 'O',
    '\u022A': 'O',
    '\u1ECE': 'O',
    '\u0150': 'O',
    '\u01D1': 'O',
    '\u020C': 'O',
    '\u020E': 'O',
    '\u01A0': 'O',
    '\u1EDC': 'O',
    '\u1EDA': 'O',
    '\u1EE0': 'O',
    '\u1EDE': 'O',
    '\u1EE2': 'O',
    '\u1ECC': 'O',
    '\u1ED8': 'O',
    '\u01EA': 'O',
    '\u01EC': 'O',
    '\u00D8': 'O',
    '\u01FE': 'O',
    '\u0186': 'O',
    '\u019F': 'O',
    '\uA74A': 'O',
    '\uA74C': 'O',
    '\u01A2': 'OI',
    '\uA74E': 'OO',
    '\u0222': 'OU',
    '\u24C5': 'P',
    '\uFF30': 'P',
    '\u1E54': 'P',
    '\u1E56': 'P',
    '\u01A4': 'P',
    '\u2C63': 'P',
    '\uA750': 'P',
    '\uA752': 'P',
    '\uA754': 'P',
    '\u24C6': 'Q',
    '\uFF31': 'Q',
    '\uA756': 'Q',
    '\uA758': 'Q',
    '\u024A': 'Q',
    '\u24C7': 'R',
    '\uFF32': 'R',
    '\u0154': 'R',
    '\u1E58': 'R',
    '\u0158': 'R',
    '\u0210': 'R',
    '\u0212': 'R',
    '\u1E5A': 'R',
    '\u1E5C': 'R',
    '\u0156': 'R',
    '\u1E5E': 'R',
    '\u024C': 'R',
    '\u2C64': 'R',
    '\uA75A': 'R',
    '\uA7A6': 'R',
    '\uA782': 'R',
    '\u24C8': 'S',
    '\uFF33': 'S',
    '\u1E9E': 'S',
    '\u015A': 'S',
    '\u1E64': 'S',
    '\u015C': 'S',
    '\u1E60': 'S',
    '\u0160': 'S',
    '\u1E66': 'S',
    '\u1E62': 'S',
    '\u1E68': 'S',
    '\u0218': 'S',
    '\u015E': 'S',
    '\u2C7E': 'S',
    '\uA7A8': 'S',
    '\uA784': 'S',
    '\u24C9': 'T',
    '\uFF34': 'T',
    '\u1E6A': 'T',
    '\u0164': 'T',
    '\u1E6C': 'T',
    '\u021A': 'T',
    '\u0162': 'T',
    '\u1E70': 'T',
    '\u1E6E': 'T',
    '\u0166': 'T',
    '\u01AC': 'T',
    '\u01AE': 'T',
    '\u023E': 'T',
    '\uA786': 'T',
    '\uA728': 'TZ',
    '\u24CA': 'U',
    '\uFF35': 'U',
    '\u00D9': 'U',
    '\u00DA': 'U',
    '\u00DB': 'U',
    '\u0168': 'U',
    '\u1E78': 'U',
    '\u016A': 'U',
    '\u1E7A': 'U',
    '\u016C': 'U',
    '\u00DC': 'U',
    '\u01DB': 'U',
    '\u01D7': 'U',
    '\u01D5': 'U',
    '\u01D9': 'U',
    '\u1EE6': 'U',
    '\u016E': 'U',
    '\u0170': 'U',
    '\u01D3': 'U',
    '\u0214': 'U',
    '\u0216': 'U',
    '\u01AF': 'U',
    '\u1EEA': 'U',
    '\u1EE8': 'U',
    '\u1EEE': 'U',
    '\u1EEC': 'U',
    '\u1EF0': 'U',
    '\u1EE4': 'U',
    '\u1E72': 'U',
    '\u0172': 'U',
    '\u1E76': 'U',
    '\u1E74': 'U',
    '\u0244': 'U',
    '\u24CB': 'V',
    '\uFF36': 'V',
    '\u1E7C': 'V',
    '\u1E7E': 'V',
    '\u01B2': 'V',
    '\uA75E': 'V',
    '\u0245': 'V',
    '\uA760': 'VY',
    '\u24CC': 'W',
    '\uFF37': 'W',
    '\u1E80': 'W',
    '\u1E82': 'W',
    '\u0174': 'W',
    '\u1E86': 'W',
    '\u1E84': 'W',
    '\u1E88': 'W',
    '\u2C72': 'W',
    '\u24CD': 'X',
    '\uFF38': 'X',
    '\u1E8A': 'X',
    '\u1E8C': 'X',
    '\u24CE': 'Y',
    '\uFF39': 'Y',
    '\u1EF2': 'Y',
    '\u00DD': 'Y',
    '\u0176': 'Y',
    '\u1EF8': 'Y',
    '\u0232': 'Y',
    '\u1E8E': 'Y',
    '\u0178': 'Y',
    '\u1EF6': 'Y',
    '\u1EF4': 'Y',
    '\u01B3': 'Y',
    '\u024E': 'Y',
    '\u1EFE': 'Y',
    '\u24CF': 'Z',
    '\uFF3A': 'Z',
    '\u0179': 'Z',
    '\u1E90': 'Z',
    '\u017B': 'Z',
    '\u017D': 'Z',
    '\u1E92': 'Z',
    '\u1E94': 'Z',
    '\u01B5': 'Z',
    '\u0224': 'Z',
    '\u2C7F': 'Z',
    '\u2C6B': 'Z',
    '\uA762': 'Z',
    '\u24D0': 'a',
    '\uFF41': 'a',
    '\u1E9A': 'a',
    '\u00E0': 'a',
    '\u00E1': 'a',
    '\u00E2': 'a',
    '\u1EA7': 'a',
    '\u1EA5': 'a',
    '\u1EAB': 'a',
    '\u1EA9': 'a',
    '\u00E3': 'a',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u1EB1': 'a',
    '\u1EAF': 'a',
    '\u1EB5': 'a',
    '\u1EB3': 'a',
    '\u0227': 'a',
    '\u01E1': 'a',
    '\u00E4': 'a',
    '\u01DF': 'a',
    '\u1EA3': 'a',
    '\u00E5': 'a',
    '\u01FB': 'a',
    '\u01CE': 'a',
    '\u0201': 'a',
    '\u0203': 'a',
    '\u1EA1': 'a',
    '\u1EAD': 'a',
    '\u1EB7': 'a',
    '\u1E01': 'a',
    '\u0105': 'a',
    '\u2C65': 'a',
    '\u0250': 'a',
    '\uA733': 'aa',
    '\u00E6': 'ae',
    '\u01FD': 'ae',
    '\u01E3': 'ae',
    '\uA735': 'ao',
    '\uA737': 'au',
    '\uA739': 'av',
    '\uA73B': 'av',
    '\uA73D': 'ay',
    '\u24D1': 'b',
    '\uFF42': 'b',
    '\u1E03': 'b',
    '\u1E05': 'b',
    '\u1E07': 'b',
    '\u0180': 'b',
    '\u0183': 'b',
    '\u0253': 'b',
    '\u24D2': 'c',
    '\uFF43': 'c',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010B': 'c',
    '\u010D': 'c',
    '\u00E7': 'c',
    '\u1E09': 'c',
    '\u0188': 'c',
    '\u023C': 'c',
    '\uA73F': 'c',
    '\u2184': 'c',
    '\u24D3': 'd',
    '\uFF44': 'd',
    '\u1E0B': 'd',
    '\u010F': 'd',
    '\u1E0D': 'd',
    '\u1E11': 'd',
    '\u1E13': 'd',
    '\u1E0F': 'd',
    '\u0111': 'd',
    '\u018C': 'd',
    '\u0256': 'd',
    '\u0257': 'd',
    '\uA77A': 'd',
    '\u01F3': 'dz',
    '\u01C6': 'dz',
    '\u24D4': 'e',
    '\uFF45': 'e',
    '\u00E8': 'e',
    '\u00E9': 'e',
    '\u00EA': 'e',
    '\u1EC1': 'e',
    '\u1EBF': 'e',
    '\u1EC5': 'e',
    '\u1EC3': 'e',
    '\u1EBD': 'e',
    '\u0113': 'e',
    '\u1E15': 'e',
    '\u1E17': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u00EB': 'e',
    '\u1EBB': 'e',
    '\u011B': 'e',
    '\u0205': 'e',
    '\u0207': 'e',
    '\u1EB9': 'e',
    '\u1EC7': 'e',
    '\u0229': 'e',
    '\u1E1D': 'e',
    '\u0119': 'e',
    '\u1E19': 'e',
    '\u1E1B': 'e',
    '\u0247': 'e',
    '\u025B': 'e',
    '\u01DD': 'e',
    '\u24D5': 'f',
    '\uFF46': 'f',
    '\u1E1F': 'f',
    '\u0192': 'f',
    '\uA77C': 'f',
    '\u24D6': 'g',
    '\uFF47': 'g',
    '\u01F5': 'g',
    '\u011D': 'g',
    '\u1E21': 'g',
    '\u011F': 'g',
    '\u0121': 'g',
    '\u01E7': 'g',
    '\u0123': 'g',
    '\u01E5': 'g',
    '\u0260': 'g',
    '\uA7A1': 'g',
    '\u1D79': 'g',
    '\uA77F': 'g',
    '\u24D7': 'h',
    '\uFF48': 'h',
    '\u0125': 'h',
    '\u1E23': 'h',
    '\u1E27': 'h',
    '\u021F': 'h',
    '\u1E25': 'h',
    '\u1E29': 'h',
    '\u1E2B': 'h',
    '\u1E96': 'h',
    '\u0127': 'h',
    '\u2C68': 'h',
    '\u2C76': 'h',
    '\u0265': 'h',
    '\u0195': 'hv',
    '\u24D8': 'i',
    '\uFF49': 'i',
    '\u00EC': 'i',
    '\u00ED': 'i',
    '\u00EE': 'i',
    '\u0129': 'i',
    '\u012B': 'i',
    '\u012D': 'i',
    '\u00EF': 'i',
    '\u1E2F': 'i',
    '\u1EC9': 'i',
    '\u01D0': 'i',
    '\u0209': 'i',
    '\u020B': 'i',
    '\u1ECB': 'i',
    '\u012F': 'i',
    '\u1E2D': 'i',
    '\u0268': 'i',
    '\u0131': 'i',
    '\u24D9': 'j',
    '\uFF4A': 'j',
    '\u0135': 'j',
    '\u01F0': 'j',
    '\u0249': 'j',
    '\u24DA': 'k',
    '\uFF4B': 'k',
    '\u1E31': 'k',
    '\u01E9': 'k',
    '\u1E33': 'k',
    '\u0137': 'k',
    '\u1E35': 'k',
    '\u0199': 'k',
    '\u2C6A': 'k',
    '\uA741': 'k',
    '\uA743': 'k',
    '\uA745': 'k',
    '\uA7A3': 'k',
    '\u24DB': 'l',
    '\uFF4C': 'l',
    '\u0140': 'l',
    '\u013A': 'l',
    '\u013E': 'l',
    '\u1E37': 'l',
    '\u1E39': 'l',
    '\u013C': 'l',
    '\u1E3D': 'l',
    '\u1E3B': 'l',
    '\u017F': 'l',
    '\u0142': 'l',
    '\u019A': 'l',
    '\u026B': 'l',
    '\u2C61': 'l',
    '\uA749': 'l',
    '\uA781': 'l',
    '\uA747': 'l',
    '\u01C9': 'lj',
    '\u24DC': 'm',
    '\uFF4D': 'm',
    '\u1E3F': 'm',
    '\u1E41': 'm',
    '\u1E43': 'm',
    '\u0271': 'm',
    '\u026F': 'm',
    '\u24DD': 'n',
    '\uFF4E': 'n',
    '\u01F9': 'n',
    '\u0144': 'n',
    '\u00F1': 'n',
    '\u1E45': 'n',
    '\u0148': 'n',
    '\u1E47': 'n',
    '\u0146': 'n',
    '\u1E4B': 'n',
    '\u1E49': 'n',
    '\u019E': 'n',
    '\u0272': 'n',
    '\u0149': 'n',
    '\uA791': 'n',
    '\uA7A5': 'n',
    '\u01CC': 'nj',
    '\u24DE': 'o',
    '\uFF4F': 'o',
    '\u00F2': 'o',
    '\u00F3': 'o',
    '\u00F4': 'o',
    '\u1ED3': 'o',
    '\u1ED1': 'o',
    '\u1ED7': 'o',
    '\u1ED5': 'o',
    '\u00F5': 'o',
    '\u1E4D': 'o',
    '\u022D': 'o',
    '\u1E4F': 'o',
    '\u014D': 'o',
    '\u1E51': 'o',
    '\u1E53': 'o',
    '\u014F': 'o',
    '\u022F': 'o',
    '\u0231': 'o',
    '\u00F6': 'o',
    '\u022B': 'o',
    '\u1ECF': 'o',
    '\u0151': 'o',
    '\u01D2': 'o',
    '\u020D': 'o',
    '\u020F': 'o',
    '\u01A1': 'o',
    '\u1EDD': 'o',
    '\u1EDB': 'o',
    '\u1EE1': 'o',
    '\u1EDF': 'o',
    '\u1EE3': 'o',
    '\u1ECD': 'o',
    '\u1ED9': 'o',
    '\u01EB': 'o',
    '\u01ED': 'o',
    '\u00F8': 'o',
    '\u01FF': 'o',
    '\u0254': 'o',
    '\uA74B': 'o',
    '\uA74D': 'o',
    '\u0275': 'o',
    '\u01A3': 'oi',
    '\u0223': 'ou',
    '\uA74F': 'oo',
    '\u24DF': 'p',
    '\uFF50': 'p',
    '\u1E55': 'p',
    '\u1E57': 'p',
    '\u01A5': 'p',
    '\u1D7D': 'p',
    '\uA751': 'p',
    '\uA753': 'p',
    '\uA755': 'p',
    '\u24E0': 'q',
    '\uFF51': 'q',
    '\u024B': 'q',
    '\uA757': 'q',
    '\uA759': 'q',
    '\u24E1': 'r',
    '\uFF52': 'r',
    '\u0155': 'r',
    '\u1E59': 'r',
    '\u0159': 'r',
    '\u0211': 'r',
    '\u0213': 'r',
    '\u1E5B': 'r',
    '\u1E5D': 'r',
    '\u0157': 'r',
    '\u1E5F': 'r',
    '\u024D': 'r',
    '\u027D': 'r',
    '\uA75B': 'r',
    '\uA7A7': 'r',
    '\uA783': 'r',
    '\u24E2': 's',
    '\uFF53': 's',
    '\u00DF': 's',
    '\u015B': 's',
    '\u1E65': 's',
    '\u015D': 's',
    '\u1E61': 's',
    '\u0161': 's',
    '\u1E67': 's',
    '\u1E63': 's',
    '\u1E69': 's',
    '\u0219': 's',
    '\u015F': 's',
    '\u023F': 's',
    '\uA7A9': 's',
    '\uA785': 's',
    '\u1E9B': 's',
    '\u24E3': 't',
    '\uFF54': 't',
    '\u1E6B': 't',
    '\u1E97': 't',
    '\u0165': 't',
    '\u1E6D': 't',
    '\u021B': 't',
    '\u0163': 't',
    '\u1E71': 't',
    '\u1E6F': 't',
    '\u0167': 't',
    '\u01AD': 't',
    '\u0288': 't',
    '\u2C66': 't',
    '\uA787': 't',
    '\uA729': 'tz',
    '\u24E4': 'u',
    '\uFF55': 'u',
    '\u00F9': 'u',
    '\u00FA': 'u',
    '\u00FB': 'u',
    '\u0169': 'u',
    '\u1E79': 'u',
    '\u016B': 'u',
    '\u1E7B': 'u',
    '\u016D': 'u',
    '\u00FC': 'u',
    '\u01DC': 'u',
    '\u01D8': 'u',
    '\u01D6': 'u',
    '\u01DA': 'u',
    '\u1EE7': 'u',
    '\u016F': 'u',
    '\u0171': 'u',
    '\u01D4': 'u',
    '\u0215': 'u',
    '\u0217': 'u',
    '\u01B0': 'u',
    '\u1EEB': 'u',
    '\u1EE9': 'u',
    '\u1EEF': 'u',
    '\u1EED': 'u',
    '\u1EF1': 'u',
    '\u1EE5': 'u',
    '\u1E73': 'u',
    '\u0173': 'u',
    '\u1E77': 'u',
    '\u1E75': 'u',
    '\u0289': 'u',
    '\u24E5': 'v',
    '\uFF56': 'v',
    '\u1E7D': 'v',
    '\u1E7F': 'v',
    '\u028B': 'v',
    '\uA75F': 'v',
    '\u028C': 'v',
    '\uA761': 'vy',
    '\u24E6': 'w',
    '\uFF57': 'w',
    '\u1E81': 'w',
    '\u1E83': 'w',
    '\u0175': 'w',
    '\u1E87': 'w',
    '\u1E85': 'w',
    '\u1E98': 'w',
    '\u1E89': 'w',
    '\u2C73': 'w',
    '\u24E7': 'x',
    '\uFF58': 'x',
    '\u1E8B': 'x',
    '\u1E8D': 'x',
    '\u24E8': 'y',
    '\uFF59': 'y',
    '\u1EF3': 'y',
    '\u00FD': 'y',
    '\u0177': 'y',
    '\u1EF9': 'y',
    '\u0233': 'y',
    '\u1E8F': 'y',
    '\u00FF': 'y',
    '\u1EF7': 'y',
    '\u1E99': 'y',
    '\u1EF5': 'y',
    '\u01B4': 'y',
    '\u024F': 'y',
    '\u1EFF': 'y',
    '\u24E9': 'z',
    '\uFF5A': 'z',
    '\u017A': 'z',
    '\u1E91': 'z',
    '\u017C': 'z',
    '\u017E': 'z',
    '\u1E93': 'z',
    '\u1E95': 'z',
    '\u01B6': 'z',
    '\u0225': 'z',
    '\u0240': 'z',
    '\u2C6C': 'z',
    '\uA763': 'z',
    '\u0386': '\u0391',
    '\u0388': '\u0395',
    '\u0389': '\u0397',
    '\u038A': '\u0399',
    '\u03AA': '\u0399',
    '\u038C': '\u039F',
    '\u038E': '\u03A5',
    '\u03AB': '\u03A5',
    '\u038F': '\u03A9',
    '\u03AC': '\u03B1',
    '\u03AD': '\u03B5',
    '\u03AE': '\u03B7',
    '\u03AF': '\u03B9',
    '\u03CA': '\u03B9',
    '\u0390': '\u03B9',
    '\u03CC': '\u03BF',
    '\u03CD': '\u03C5',
    '\u03CB': '\u03C5',
    '\u03B0': '\u03C5',
    '\u03C9': '\u03C9',
    '\u03C2': '\u03C3'
  };

  return diacritics;
});

S2.define('select2/data/base',[
  '../utils'
], function (Utils) {
  function BaseAdapter ($element, options) {
    BaseAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(BaseAdapter, Utils.Observable);

  BaseAdapter.prototype.current = function (callback) {
    throw new Error('The `current` method must be defined in child classes.');
  };

  BaseAdapter.prototype.query = function (params, callback) {
    throw new Error('The `query` method must be defined in child classes.');
  };

  BaseAdapter.prototype.bind = function (container, $container) {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.destroy = function () {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.generateResultId = function (container, data) {
    var id = container.id + '-result-';

    id += Utils.generateChars(4);

    if (data.id != null) {
      id += '-' + data.id.toString();
    } else {
      id += '-' + Utils.generateChars(4);
    }
    return id;
  };

  return BaseAdapter;
});

S2.define('select2/data/select',[
  './base',
  '../utils',
  'jquery'
], function (BaseAdapter, Utils, $) {
  function SelectAdapter ($element, options) {
    this.$element = $element;
    this.options = options;

    SelectAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(SelectAdapter, BaseAdapter);

  SelectAdapter.prototype.current = function (callback) {
    var data = [];
    var self = this;

    this.$element.find(':selected').each(function () {
      var $option = $(this);

      var option = self.item($option);

      data.push(option);
    });

    callback(data);
  };

  SelectAdapter.prototype.select = function (data) {
    var self = this;

    data.selected = true;

    // If data.element is a DOM node, use it instead
    if ($(data.element).is('option')) {
      data.element.selected = true;

      this.$element.trigger('change');

      return;
    }

    if (this.$element.prop('multiple')) {
      this.current(function (currentData) {
        var val = [];

        data = [data];
        data.push.apply(data, currentData);

        for (var d = 0; d < data.length; d++) {
          var id = data[d].id;

          if ($.inArray(id, val) === -1) {
            val.push(id);
          }
        }

        self.$element.val(val);
        self.$element.trigger('change');
      });
    } else {
      var val = data.id;

      this.$element.val(val);
      this.$element.trigger('change');
    }
  };

  SelectAdapter.prototype.unselect = function (data) {
    var self = this;

    if (!this.$element.prop('multiple')) {
      return;
    }

    data.selected = false;

    if ($(data.element).is('option')) {
      data.element.selected = false;

      this.$element.trigger('change');

      return;
    }

    this.current(function (currentData) {
      var val = [];

      for (var d = 0; d < currentData.length; d++) {
        var id = currentData[d].id;

        if (id !== data.id && $.inArray(id, val) === -1) {
          val.push(id);
        }
      }

      self.$element.val(val);

      self.$element.trigger('change');
    });
  };

  SelectAdapter.prototype.bind = function (container, $container) {
    var self = this;

    this.container = container;

    container.on('select', function (params) {
      self.select(params.data);
    });

    container.on('unselect', function (params) {
      self.unselect(params.data);
    });
  };

  SelectAdapter.prototype.destroy = function () {
    // Remove anything added to child elements
    this.$element.find('*').each(function () {
      // Remove any custom data set by Select2
      $.removeData(this, 'data');
    });
  };

  SelectAdapter.prototype.query = function (params, callback) {
    var data = [];
    var self = this;

    var $options = this.$element.children();

    $options.each(function () {
      var $option = $(this);

      if (!$option.is('option') && !$option.is('optgroup')) {
        return;
      }

      var option = self.item($option);

      var matches = self.matches(params, option);

      if (matches !== null) {
        data.push(matches);
      }
    });

    callback({
      results: data
    });
  };

  SelectAdapter.prototype.addOptions = function ($options) {
    Utils.appendMany(this.$element, $options);
  };

  SelectAdapter.prototype.option = function (data) {
    var option;

    if (data.children) {
      option = document.createElement('optgroup');
      option.label = data.text;
    } else {
      option = document.createElement('option');

      if (option.textContent !== undefined) {
        option.textContent = data.text;
      } else {
        option.innerText = data.text;
      }
    }

    if (data.id) {
      option.value = data.id;
    }

    if (data.disabled) {
      option.disabled = true;
    }

    if (data.selected) {
      option.selected = true;
    }

    if (data.title) {
      option.title = data.title;
    }

    var $option = $(option);

    var normalizedData = this._normalizeItem(data);
    normalizedData.element = option;

    // Override the option's data with the combined data
    $.data(option, 'data', normalizedData);

    return $option;
  };

  SelectAdapter.prototype.item = function ($option) {
    var data = {};

    data = $.data($option[0], 'data');

    if (data != null) {
      return data;
    }

    if ($option.is('option')) {
      data = {
        id: $option.val(),
        text: $option.text(),
        disabled: $option.prop('disabled'),
        selected: $option.prop('selected'),
        title: $option.prop('title')
      };
    } else if ($option.is('optgroup')) {
      data = {
        text: $option.prop('label'),
        children: [],
        title: $option.prop('title')
      };

      var $children = $option.children('option');
      var children = [];

      for (var c = 0; c < $children.length; c++) {
        var $child = $($children[c]);

        var child = this.item($child);

        children.push(child);
      }

      data.children = children;
    }

    data = this._normalizeItem(data);
    data.element = $option[0];

    $.data($option[0], 'data', data);

    return data;
  };

  SelectAdapter.prototype._normalizeItem = function (item) {
    if (!$.isPlainObject(item)) {
      item = {
        id: item,
        text: item
      };
    }

    item = $.extend({}, {
      text: ''
    }, item);

    var defaults = {
      selected: false,
      disabled: false
    };

    if (item.id != null) {
      item.id = item.id.toString();
    }

    if (item.text != null) {
      item.text = item.text.toString();
    }

    if (item._resultId == null && item.id && this.container != null) {
      item._resultId = this.generateResultId(this.container, item);
    }

    return $.extend({}, defaults, item);
  };

  SelectAdapter.prototype.matches = function (params, data) {
    var matcher = this.options.get('matcher');

    return matcher(params, data);
  };

  return SelectAdapter;
});

S2.define('select2/data/array',[
  './select',
  '../utils',
  'jquery'
], function (SelectAdapter, Utils, $) {
  function ArrayAdapter ($element, options) {
    var data = options.get('data') || [];

    ArrayAdapter.__super__.constructor.call(this, $element, options);

    this.addOptions(this.convertToOptions(data));
  }

  Utils.Extend(ArrayAdapter, SelectAdapter);

  ArrayAdapter.prototype.select = function (data) {
    var $option = this.$element.find('option').filter(function (i, elm) {
      return elm.value == data.id.toString();
    });

    if ($option.length === 0) {
      $option = this.option(data);

      this.addOptions($option);
    }

    ArrayAdapter.__super__.select.call(this, data);
  };

  ArrayAdapter.prototype.convertToOptions = function (data) {
    var self = this;

    var $existing = this.$element.find('option');
    var existingIds = $existing.map(function () {
      return self.item($(this)).id;
    }).get();

    var $options = [];

    // Filter out all items except for the one passed in the argument
    function onlyItem (item) {
      return function () {
        return $(this).val() == item.id;
      };
    }

    for (var d = 0; d < data.length; d++) {
      var item = this._normalizeItem(data[d]);

      // Skip items which were pre-loaded, only merge the data
      if ($.inArray(item.id, existingIds) >= 0) {
        var $existingOption = $existing.filter(onlyItem(item));

        var existingData = this.item($existingOption);
        var newData = $.extend(true, {}, item, existingData);

        var $newOption = this.option(newData);

        $existingOption.replaceWith($newOption);

        continue;
      }

      var $option = this.option(item);

      if (item.children) {
        var $children = this.convertToOptions(item.children);

        Utils.appendMany($option, $children);
      }

      $options.push($option);
    }

    return $options;
  };

  return ArrayAdapter;
});

S2.define('select2/data/ajax',[
  './array',
  '../utils',
  'jquery'
], function (ArrayAdapter, Utils, $) {
  function AjaxAdapter ($element, options) {
    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

    if (this.ajaxOptions.processResults != null) {
      this.processResults = this.ajaxOptions.processResults;
    }

    AjaxAdapter.__super__.constructor.call(this, $element, options);
  }

  Utils.Extend(AjaxAdapter, ArrayAdapter);

  AjaxAdapter.prototype._applyDefaults = function (options) {
    var defaults = {
      data: function (params) {
        return $.extend({}, params, {
          q: params.term
        });
      },
      transport: function (params, success, failure) {
        var $request = $.ajax(params);

        $request.then(success);
        $request.fail(failure);

        return $request;
      }
    };

    return $.extend({}, defaults, options, true);
  };

  AjaxAdapter.prototype.processResults = function (results) {
    return results;
  };

  AjaxAdapter.prototype.query = function (params, callback) {
    var matches = [];
    var self = this;

    if (this._request != null) {
      // JSONP requests cannot always be aborted
      if ($.isFunction(this._request.abort)) {
        this._request.abort();
      }

      this._request = null;
    }

    var options = $.extend({
      type: 'GET'
    }, this.ajaxOptions);

    if (typeof options.url === 'function') {
      options.url = options.url.call(this.$element, params);
    }

    if (typeof options.data === 'function') {
      options.data = options.data.call(this.$element, params);
    }

    function request () {
      var $request = options.transport(options, function (data) {
        var results = self.processResults(data, params);

        if (self.options.get('debug') && window.console && console.error) {
          // Check to make sure that the response included a `results` key.
          if (!results || !results.results || !$.isArray(results.results)) {
            console.error(
              'Select2: The AJAX results did not return an array in the ' +
              '`results` key of the response.'
            );
          }
        }

        callback(results);
      }, function () {
        // Attempt to detect if a request was aborted
        // Only works if the transport exposes a status property
        if ($request.status && $request.status === '0') {
          return;
        }

        self.trigger('results:message', {
          message: 'errorLoading'
        });
      });

      self._request = $request;
    }

    if (this.ajaxOptions.delay && params.term != null) {
      if (this._queryTimeout) {
        window.clearTimeout(this._queryTimeout);
      }

      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
    } else {
      request();
    }
  };

  return AjaxAdapter;
});

S2.define('select2/data/tags',[
  'jquery'
], function ($) {
  function Tags (decorated, $element, options) {
    var tags = options.get('tags');

    var createTag = options.get('createTag');

    if (createTag !== undefined) {
      this.createTag = createTag;
    }

    var insertTag = options.get('insertTag');

    if (insertTag !== undefined) {
        this.insertTag = insertTag;
    }

    decorated.call(this, $element, options);

    if ($.isArray(tags)) {
      for (var t = 0; t < tags.length; t++) {
        var tag = tags[t];
        var item = this._normalizeItem(tag);

        var $option = this.option(item);

        this.$element.append($option);
      }
    }
  }

  Tags.prototype.query = function (decorated, params, callback) {
    var self = this;

    this._removeOldTags();

    if (params.term == null || params.page != null) {
      decorated.call(this, params, callback);
      return;
    }

    function wrapper (obj, child) {
      var data = obj.results;

      for (var i = 0; i < data.length; i++) {
        var option = data[i];

        var checkChildren = (
          option.children != null &&
          !wrapper({
            results: option.children
          }, true)
        );

        var checkText = option.text === params.term;

        if (checkText || checkChildren) {
          if (child) {
            return false;
          }

          obj.data = data;
          callback(obj);

          return;
        }
      }

      if (child) {
        return true;
      }

      var tag = self.createTag(params);

      if (tag != null) {
        var $option = self.option(tag);
        $option.attr('data-select2-tag', true);

        self.addOptions([$option]);

        self.insertTag(data, tag);
      }

      obj.results = data;

      callback(obj);
    }

    decorated.call(this, params, wrapper);
  };

  Tags.prototype.createTag = function (decorated, params) {
    var term = $.trim(params.term);

    if (term === '') {
      return null;
    }

    return {
      id: term,
      text: term
    };
  };

  Tags.prototype.insertTag = function (_, data, tag) {
    data.unshift(tag);
  };

  Tags.prototype._removeOldTags = function (_) {
    var tag = this._lastTag;

    var $options = this.$element.find('option[data-select2-tag]');

    $options.each(function () {
      if (this.selected) {
        return;
      }

      $(this).remove();
    });
  };

  return Tags;
});

S2.define('select2/data/tokenizer',[
  'jquery'
], function ($) {
  function Tokenizer (decorated, $element, options) {
    var tokenizer = options.get('tokenizer');

    if (tokenizer !== undefined) {
      this.tokenizer = tokenizer;
    }

    decorated.call(this, $element, options);
  }

  Tokenizer.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    this.$search =  container.dropdown.$search || container.selection.$search ||
      $container.find('.select2-search__field');
  };

  Tokenizer.prototype.query = function (decorated, params, callback) {
    var self = this;

    function createAndSelect (data) {
      // Normalize the data object so we can use it for checks
      var item = self._normalizeItem(data);

      // Check if the data object already exists as a tag
      // Select it if it doesn't
      var $existingOptions = self.$element.find('option').filter(function () {
        return $(this).val() === item.id;
      });

      // If an existing option wasn't found for it, create the option
      if (!$existingOptions.length) {
        var $option = self.option(item);
        $option.attr('data-select2-tag', true);

        self._removeOldTags();
        self.addOptions([$option]);
      }

      // Select the item, now that we know there is an option for it
      select(item);
    }

    function select (data) {
      self.trigger('select', {
        data: data
      });
    }

    params.term = params.term || '';

    var tokenData = this.tokenizer(params, this.options, createAndSelect);

    if (tokenData.term !== params.term) {
      // Replace the search term if we have the search box
      if (this.$search.length) {
        this.$search.val(tokenData.term);
        this.$search.focus();
      }

      params.term = tokenData.term;
    }

    decorated.call(this, params, callback);
  };

  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
    var separators = options.get('tokenSeparators') || [];
    var term = params.term;
    var i = 0;

    var createTag = this.createTag || function (params) {
      return {
        id: params.term,
        text: params.term
      };
    };

    while (i < term.length) {
      var termChar = term[i];

      if ($.inArray(termChar, separators) === -1) {
        i++;

        continue;
      }

      var part = term.substr(0, i);
      var partParams = $.extend({}, params, {
        term: part
      });

      var data = createTag(partParams);

      if (data == null) {
        i++;
        continue;
      }

      callback(data);

      // Reset the term to not include the tokenized portion
      term = term.substr(i + 1) || '';
      i = 0;
    }

    return {
      term: term
    };
  };

  return Tokenizer;
});

S2.define('select2/data/minimumInputLength',[

], function () {
  function MinimumInputLength (decorated, $e, options) {
    this.minimumInputLength = options.get('minimumInputLength');

    decorated.call(this, $e, options);
  }

  MinimumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (params.term.length < this.minimumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooShort',
        args: {
          minimum: this.minimumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MinimumInputLength;
});

S2.define('select2/data/maximumInputLength',[

], function () {
  function MaximumInputLength (decorated, $e, options) {
    this.maximumInputLength = options.get('maximumInputLength');

    decorated.call(this, $e, options);
  }

  MaximumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (this.maximumInputLength > 0 &&
        params.term.length > this.maximumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooLong',
        args: {
          maximum: this.maximumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MaximumInputLength;
});

S2.define('select2/data/maximumSelectionLength',[

], function (){
  function MaximumSelectionLength (decorated, $e, options) {
    this.maximumSelectionLength = options.get('maximumSelectionLength');

    decorated.call(this, $e, options);
  }

  MaximumSelectionLength.prototype.query =
    function (decorated, params, callback) {
      var self = this;

      this.current(function (currentData) {
        var count = currentData != null ? currentData.length : 0;
        if (self.maximumSelectionLength > 0 &&
          count >= self.maximumSelectionLength) {
          self.trigger('results:message', {
            message: 'maximumSelected',
            args: {
              maximum: self.maximumSelectionLength
            }
          });
          return;
        }
        decorated.call(self, params, callback);
      });
  };

  return MaximumSelectionLength;
});

S2.define('select2/dropdown',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Dropdown ($element, options) {
    this.$element = $element;
    this.options = options;

    Dropdown.__super__.constructor.call(this);
  }

  Utils.Extend(Dropdown, Utils.Observable);

  Dropdown.prototype.render = function () {
    var $dropdown = $(
      '<span class="select2-dropdown">' +
        '<span class="select2-results"></span>' +
      '</span>'
    );

    $dropdown.attr('dir', this.options.get('dir'));

    this.$dropdown = $dropdown;

    return $dropdown;
  };

  Dropdown.prototype.bind = function () {
    // Should be implemented in subclasses
  };

  Dropdown.prototype.position = function ($dropdown, $container) {
    // Should be implmented in subclasses
  };

  Dropdown.prototype.destroy = function () {
    // Remove the dropdown from the DOM
    this.$dropdown.remove();
  };

  return Dropdown;
});

S2.define('select2/dropdown/search',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function Search () { }

  Search.prototype.render = function (decorated) {
    var $rendered = decorated.call(this);

    var $search = $(
      '<span class="select2-search select2-search--dropdown">' +
        '<input class="select2-search__field" type="search" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
        ' spellcheck="false" role="textbox" />' +
      '</span>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    $rendered.prepend($search);

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    this.$search.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();
    });

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$search.on('input', function (evt) {
      // Unbind the duplicated `keyup` event
      $(this).off('keyup');
    });

    this.$search.on('keyup input', function (evt) {
      self.handleSearch(evt);
    });

    container.on('open', function () {
      self.$search.attr('tabindex', 0);

      self.$search.focus();

      window.setTimeout(function () {
        self.$search.focus();
      }, 0);
    });

    container.on('close', function () {
      self.$search.attr('tabindex', -1);

      self.$search.val('');
    });

    container.on('focus', function () {
      if (container.isOpen()) {
        self.$search.focus();
      }
    });

    container.on('results:all', function (params) {
      if (params.query.term == null || params.query.term === '') {
        var showSearch = self.showSearch(params);

        if (showSearch) {
          self.$searchContainer.removeClass('select2-search--hide');
        } else {
          self.$searchContainer.addClass('select2-search--hide');
        }
      }
    });
  };

  Search.prototype.handleSearch = function (evt) {
    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.showSearch = function (_, params) {
    return true;
  };

  return Search;
});

S2.define('select2/dropdown/hidePlaceholder',[

], function () {
  function HidePlaceholder (decorated, $element, options, dataAdapter) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options, dataAdapter);
  }

  HidePlaceholder.prototype.append = function (decorated, data) {
    data.results = this.removePlaceholder(data.results);

    decorated.call(this, data);
  };

  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
    var modifiedData = data.slice(0);

    for (var d = data.length - 1; d >= 0; d--) {
      var item = data[d];

      if (this.placeholder.id === item.id) {
        modifiedData.splice(d, 1);
      }
    }

    return modifiedData;
  };

  return HidePlaceholder;
});

S2.define('select2/dropdown/infiniteScroll',[
  'jquery'
], function ($) {
  function InfiniteScroll (decorated, $element, options, dataAdapter) {
    this.lastParams = {};

    decorated.call(this, $element, options, dataAdapter);

    this.$loadingMore = this.createLoadingMore();
    this.loading = false;
  }

  InfiniteScroll.prototype.append = function (decorated, data) {
    this.$loadingMore.remove();
    this.loading = false;

    decorated.call(this, data);

    if (this.showLoadingMore(data)) {
      this.$results.append(this.$loadingMore);
    }
  };

  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('query', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    container.on('query:append', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    this.$results.on('scroll', function () {
      var isLoadMoreVisible = $.contains(
        document.documentElement,
        self.$loadingMore[0]
      );

      if (self.loading || !isLoadMoreVisible) {
        return;
      }

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var loadingMoreOffset = self.$loadingMore.offset().top +
        self.$loadingMore.outerHeight(false);

      if (currentOffset + 50 >= loadingMoreOffset) {
        self.loadMore();
      }
    });
  };

  InfiniteScroll.prototype.loadMore = function () {
    this.loading = true;

    var params = $.extend({}, {page: 1}, this.lastParams);

    params.page++;

    this.trigger('query:append', params);
  };

  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
    return data.pagination && data.pagination.more;
  };

  InfiniteScroll.prototype.createLoadingMore = function () {
    var $option = $(
      '<li ' +
      'class="select2-results__option select2-results__option--load-more"' +
      'role="treeitem" aria-disabled="true"></li>'
    );

    var message = this.options.get('translations').get('loadingMore');

    $option.html(message(this.lastParams));

    return $option;
  };

  return InfiniteScroll;
});

S2.define('select2/dropdown/attachBody',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function AttachBody (decorated, $element, options) {
    this.$dropdownParent = options.get('dropdownParent') || $(document.body);

    decorated.call(this, $element, options);
  }

  AttachBody.prototype.bind = function (decorated, container, $container) {
    var self = this;

    var setupResultsEvents = false;

    decorated.call(this, container, $container);

    container.on('open', function () {
      self._showDropdown();
      self._attachPositioningHandler(container);

      if (!setupResultsEvents) {
        setupResultsEvents = true;

        container.on('results:all', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        container.on('results:append', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });
      }
    });

    container.on('close', function () {
      self._hideDropdown();
      self._detachPositioningHandler(container);
    });

    this.$dropdownContainer.on('mousedown', function (evt) {
      evt.stopPropagation();
    });
  };

  AttachBody.prototype.destroy = function (decorated) {
    decorated.call(this);

    this.$dropdownContainer.remove();
  };

  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
    // Clone all of the container classes
    $dropdown.attr('class', $container.attr('class'));

    $dropdown.removeClass('select2');
    $dropdown.addClass('select2-container--open');

    $dropdown.css({
      position: 'absolute',
      top: -999999
    });

    this.$container = $container;
  };

  AttachBody.prototype.render = function (decorated) {
    var $container = $('<span></span>');

    var $dropdown = decorated.call(this);
    $container.append($dropdown);

    this.$dropdownContainer = $container;

    return $container;
  };

  AttachBody.prototype._hideDropdown = function (decorated) {
    this.$dropdownContainer.detach();
  };

  AttachBody.prototype._attachPositioningHandler =
      function (decorated, container) {
    var self = this;

    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.each(function () {
      $(this).data('select2-scroll-position', {
        x: $(this).scrollLeft(),
        y: $(this).scrollTop()
      });
    });

    $watchers.on(scrollEvent, function (ev) {
      var position = $(this).data('select2-scroll-position');
      $(this).scrollTop(position.y);
    });

    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
      function (e) {
      self._positionDropdown();
      self._resizeDropdown();
    });
  };

  AttachBody.prototype._detachPositioningHandler =
      function (decorated, container) {
    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.off(scrollEvent);

    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
  };

  AttachBody.prototype._positionDropdown = function () {
    var $window = $(window);

    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

    var newDirection = null;

    var offset = this.$container.offset();

    offset.bottom = offset.top + this.$container.outerHeight(false);

    var container = {
      height: this.$container.outerHeight(false)
    };

    container.top = offset.top;
    container.bottom = offset.top + container.height;

    var dropdown = {
      height: this.$dropdown.outerHeight(false)
    };

    var viewport = {
      top: $window.scrollTop(),
      bottom: $window.scrollTop() + $window.height()
    };

    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

    var css = {
      left: offset.left,
      top: container.bottom
    };

    // Determine what the parent element is to use for calciulating the offset
    var $offsetParent = this.$dropdownParent;

    // For statically positoned elements, we need to get the element
    // that is determining the offset
    if ($offsetParent.css('position') === 'static') {
      $offsetParent = $offsetParent.offsetParent();
    }

    var parentOffset = $offsetParent.offset();

    css.top -= parentOffset.top;
    css.left -= parentOffset.left;

    if (!isCurrentlyAbove && !isCurrentlyBelow) {
      newDirection = 'below';
    }

    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
      newDirection = 'above';
    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
      newDirection = 'below';
    }

    if (newDirection == 'above' ||
      (isCurrentlyAbove && newDirection !== 'below')) {
      css.top = container.top - parentOffset.top - dropdown.height;
    }

    if (newDirection != null) {
      this.$dropdown
        .removeClass('select2-dropdown--below select2-dropdown--above')
        .addClass('select2-dropdown--' + newDirection);
      this.$container
        .removeClass('select2-container--below select2-container--above')
        .addClass('select2-container--' + newDirection);
    }

    this.$dropdownContainer.css(css);
  };

  AttachBody.prototype._resizeDropdown = function () {
    var css = {
      width: this.$container.outerWidth(false) + 'px'
    };

    if (this.options.get('dropdownAutoWidth')) {
      css.minWidth = css.width;
      css.position = 'relative';
      css.width = 'auto';
    }

    this.$dropdown.css(css);
  };

  AttachBody.prototype._showDropdown = function (decorated) {
    this.$dropdownContainer.appendTo(this.$dropdownParent);

    this._positionDropdown();
    this._resizeDropdown();
  };

  return AttachBody;
});

S2.define('select2/dropdown/minimumResultsForSearch',[

], function () {
  function countResults (data) {
    var count = 0;

    for (var d = 0; d < data.length; d++) {
      var item = data[d];

      if (item.children) {
        count += countResults(item.children);
      } else {
        count++;
      }
    }

    return count;
  }

  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

    if (this.minimumResultsForSearch < 0) {
      this.minimumResultsForSearch = Infinity;
    }

    decorated.call(this, $element, options, dataAdapter);
  }

  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
    if (countResults(params.data.results) < this.minimumResultsForSearch) {
      return false;
    }

    return decorated.call(this, params);
  };

  return MinimumResultsForSearch;
});

S2.define('select2/dropdown/selectOnClose',[

], function () {
  function SelectOnClose () { }

  SelectOnClose.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('close', function (params) {
      self._handleSelectOnClose(params);
    });
  };

  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
    if (params && params.originalSelect2Event != null) {
      var event = params.originalSelect2Event;

      // Don't select an item if the close event was triggered from a select or
      // unselect event
      if (event._type === 'select' || event._type === 'unselect') {
        return;
      }
    }

    var $highlightedResults = this.getHighlightedResults();

    // Only select highlighted results
    if ($highlightedResults.length < 1) {
      return;
    }

    var data = $highlightedResults.data('data');

    // Don't re-select already selected resulte
    if (
      (data.element != null && data.element.selected) ||
      (data.element == null && data.selected)
    ) {
      return;
    }

    this.trigger('select', {
        data: data
    });
  };

  return SelectOnClose;
});

S2.define('select2/dropdown/closeOnSelect',[

], function () {
  function CloseOnSelect () { }

  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('select', function (evt) {
      self._selectTriggered(evt);
    });

    container.on('unselect', function (evt) {
      self._selectTriggered(evt);
    });
  };

  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
    var originalEvent = evt.originalEvent;

    // Don't close if the control key is being held
    if (originalEvent && originalEvent.ctrlKey) {
      return;
    }

    this.trigger('close', {
      originalEvent: originalEvent,
      originalSelect2Event: evt
    });
  };

  return CloseOnSelect;
});

S2.define('select2/i18n/en',[],function () {
  // English
  return {
    errorLoading: function () {
      return 'The results could not be loaded.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Please delete ' + overChars + ' character';

      if (overChars != 1) {
        message += 's';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Please enter ' + remainingChars + ' or more characters';

      return message;
    },
    loadingMore: function () {
      return 'Loading more results…';
    },
    maximumSelected: function (args) {
      var message = 'You can only select ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No results found';
    },
    searching: function () {
      return 'Searching…';
    }
  };
});

S2.define('select2/defaults',[
  'jquery',
  'require',

  './results',

  './selection/single',
  './selection/multiple',
  './selection/placeholder',
  './selection/allowClear',
  './selection/search',
  './selection/eventRelay',

  './utils',
  './translation',
  './diacritics',

  './data/select',
  './data/array',
  './data/ajax',
  './data/tags',
  './data/tokenizer',
  './data/minimumInputLength',
  './data/maximumInputLength',
  './data/maximumSelectionLength',

  './dropdown',
  './dropdown/search',
  './dropdown/hidePlaceholder',
  './dropdown/infiniteScroll',
  './dropdown/attachBody',
  './dropdown/minimumResultsForSearch',
  './dropdown/selectOnClose',
  './dropdown/closeOnSelect',

  './i18n/en'
], function ($, require,

             ResultsList,

             SingleSelection, MultipleSelection, Placeholder, AllowClear,
             SelectionSearch, EventRelay,

             Utils, Translation, DIACRITICS,

             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

             EnglishTranslation) {
  function Defaults () {
    this.reset();
  }

  Defaults.prototype.apply = function (options) {
    options = $.extend(true, {}, this.defaults, options);

    if (options.dataAdapter == null) {
      if (options.ajax != null) {
        options.dataAdapter = AjaxData;
      } else if (options.data != null) {
        options.dataAdapter = ArrayData;
      } else {
        options.dataAdapter = SelectData;
      }

      if (options.minimumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MinimumInputLength
        );
      }

      if (options.maximumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumInputLength
        );
      }

      if (options.maximumSelectionLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumSelectionLength
        );
      }

      if (options.tags) {
        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
      }

      if (options.tokenSeparators != null || options.tokenizer != null) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Tokenizer
        );
      }

      if (options.query != null) {
        var Query = require(options.amdBase + 'compat/query');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Query
        );
      }

      if (options.initSelection != null) {
        var InitSelection = require(options.amdBase + 'compat/initSelection');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          InitSelection
        );
      }
    }

    if (options.resultsAdapter == null) {
      options.resultsAdapter = ResultsList;

      if (options.ajax != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          InfiniteScroll
        );
      }

      if (options.placeholder != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          HidePlaceholder
        );
      }

      if (options.selectOnClose) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          SelectOnClose
        );
      }
    }

    if (options.dropdownAdapter == null) {
      if (options.multiple) {
        options.dropdownAdapter = Dropdown;
      } else {
        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

        options.dropdownAdapter = SearchableDropdown;
      }

      if (options.minimumResultsForSearch !== 0) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          MinimumResultsForSearch
        );
      }

      if (options.closeOnSelect) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          CloseOnSelect
        );
      }

      if (
        options.dropdownCssClass != null ||
        options.dropdownCss != null ||
        options.adaptDropdownCssClass != null
      ) {
        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          DropdownCSS
        );
      }

      options.dropdownAdapter = Utils.Decorate(
        options.dropdownAdapter,
        AttachBody
      );
    }

    if (options.selectionAdapter == null) {
      if (options.multiple) {
        options.selectionAdapter = MultipleSelection;
      } else {
        options.selectionAdapter = SingleSelection;
      }

      // Add the placeholder mixin if a placeholder was specified
      if (options.placeholder != null) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          Placeholder
        );
      }

      if (options.allowClear) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          AllowClear
        );
      }

      if (options.multiple) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          SelectionSearch
        );
      }

      if (
        options.containerCssClass != null ||
        options.containerCss != null ||
        options.adaptContainerCssClass != null
      ) {
        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          ContainerCSS
        );
      }

      options.selectionAdapter = Utils.Decorate(
        options.selectionAdapter,
        EventRelay
      );
    }

    if (typeof options.language === 'string') {
      // Check if the language is specified with a region
      if (options.language.indexOf('-') > 0) {
        // Extract the region information if it is included
        var languageParts = options.language.split('-');
        var baseLanguage = languageParts[0];

        options.language = [options.language, baseLanguage];
      } else {
        options.language = [options.language];
      }
    }

    if ($.isArray(options.language)) {
      var languages = new Translation();
      options.language.push('en');

      var languageNames = options.language;

      for (var l = 0; l < languageNames.length; l++) {
        var name = languageNames[l];
        var language = {};

        try {
          // Try to load it with the original name
          language = Translation.loadPath(name);
        } catch (e) {
          try {
            // If we couldn't load it, check if it wasn't the full path
            name = this.defaults.amdLanguageBase + name;
            language = Translation.loadPath(name);
          } catch (ex) {
            // The translation could not be loaded at all. Sometimes this is
            // because of a configuration problem, other times this can be
            // because of how Select2 helps load all possible translation files.
            if (options.debug && window.console && console.warn) {
              console.warn(
                'Select2: The language file for "' + name + '" could not be ' +
                'automatically loaded. A fallback will be used instead.'
              );
            }

            continue;
          }
        }

        languages.extend(language);
      }

      options.translations = languages;
    } else {
      var baseTranslation = Translation.loadPath(
        this.defaults.amdLanguageBase + 'en'
      );
      var customTranslation = new Translation(options.language);

      customTranslation.extend(baseTranslation);

      options.translations = customTranslation;
    }

    return options;
  };

  Defaults.prototype.reset = function () {
    function stripDiacritics (text) {
      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
      function match(a) {
        return DIACRITICS[a] || a;
      }

      return text.replace(/[^\u0000-\u007E]/g, match);
    }

    function matcher (params, data) {
      // Always return the object if there is nothing to compare
      if ($.trim(params.term) === '') {
        return data;
      }

      // Do a recursive check for options with children
      if (data.children && data.children.length > 0) {
        // Clone the data object if there are children
        // This is required as we modify the object to remove any non-matches
        var match = $.extend(true, {}, data);

        // Check each child of the option
        for (var c = data.children.length - 1; c >= 0; c--) {
          var child = data.children[c];

          var matches = matcher(params, child);

          // If there wasn't a match, remove the object in the array
          if (matches == null) {
            match.children.splice(c, 1);
          }
        }

        // If any children matched, return the new object
        if (match.children.length > 0) {
          return match;
        }

        // If there were no matching children, check just the plain object
        return matcher(params, match);
      }

      var original = stripDiacritics(data.text).toUpperCase();
      var term = stripDiacritics(params.term).toUpperCase();

      // Check if the text contains the term
      if (original.indexOf(term) > -1) {
        return data;
      }

      // If it doesn't contain the term, don't return anything
      return null;
    }

    this.defaults = {
      amdBase: './',
      amdLanguageBase: './i18n/',
      closeOnSelect: true,
      debug: false,
      dropdownAutoWidth: false,
      escapeMarkup: Utils.escapeMarkup,
      language: EnglishTranslation,
      matcher: matcher,
      minimumInputLength: 0,
      maximumInputLength: 0,
      maximumSelectionLength: 0,
      minimumResultsForSearch: 0,
      selectOnClose: false,
      sorter: function (data) {
        return data;
      },
      templateResult: function (result) {
        return result.text;
      },
      templateSelection: function (selection) {
        return selection.text;
      },
      theme: 'default',
      width: 'resolve'
    };
  };

  Defaults.prototype.set = function (key, value) {
    var camelKey = $.camelCase(key);

    var data = {};
    data[camelKey] = value;

    var convertedData = Utils._convertData(data);

    $.extend(this.defaults, convertedData);
  };

  var defaults = new Defaults();

  return defaults;
});

S2.define('select2/options',[
  'require',
  'jquery',
  './defaults',
  './utils'
], function (require, $, Defaults, Utils) {
  function Options (options, $element) {
    this.options = options;

    if ($element != null) {
      this.fromElement($element);
    }

    this.options = Defaults.apply(this.options);

    if ($element && $element.is('input')) {
      var InputCompat = require(this.get('amdBase') + 'compat/inputData');

      this.options.dataAdapter = Utils.Decorate(
        this.options.dataAdapter,
        InputCompat
      );
    }
  }

  Options.prototype.fromElement = function ($e) {
    var excludedData = ['select2'];

    if (this.options.multiple == null) {
      this.options.multiple = $e.prop('multiple');
    }

    if (this.options.disabled == null) {
      this.options.disabled = $e.prop('disabled');
    }

    if (this.options.language == null) {
      if ($e.prop('lang')) {
        this.options.language = $e.prop('lang').toLowerCase();
      } else if ($e.closest('[lang]').prop('lang')) {
        this.options.language = $e.closest('[lang]').prop('lang');
      }
    }

    if (this.options.dir == null) {
      if ($e.prop('dir')) {
        this.options.dir = $e.prop('dir');
      } else if ($e.closest('[dir]').prop('dir')) {
        this.options.dir = $e.closest('[dir]').prop('dir');
      } else {
        this.options.dir = 'ltr';
      }
    }

    $e.prop('disabled', this.options.disabled);
    $e.prop('multiple', this.options.multiple);

    if ($e.data('select2Tags')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-select2-tags` attribute has been changed to ' +
          'use the `data-data` and `data-tags="true"` attributes and will be ' +
          'removed in future versions of Select2.'
        );
      }

      $e.data('data', $e.data('select2Tags'));
      $e.data('tags', true);
    }

    if ($e.data('ajaxUrl')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-ajax-url` attribute has been changed to ' +
          '`data-ajax--url` and support for the old attribute will be removed' +
          ' in future versions of Select2.'
        );
      }

      $e.attr('ajax--url', $e.data('ajaxUrl'));
      $e.data('ajax--url', $e.data('ajaxUrl'));
    }

    var dataset = {};

    // Prefer the element's `dataset` attribute if it exists
    // jQuery 1.x does not correctly handle data attributes with multiple dashes
    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
      dataset = $.extend(true, {}, $e[0].dataset, $e.data());
    } else {
      dataset = $e.data();
    }

    var data = $.extend(true, {}, dataset);

    data = Utils._convertData(data);

    for (var key in data) {
      if ($.inArray(key, excludedData) > -1) {
        continue;
      }

      if ($.isPlainObject(this.options[key])) {
        $.extend(this.options[key], data[key]);
      } else {
        this.options[key] = data[key];
      }
    }

    return this;
  };

  Options.prototype.get = function (key) {
    return this.options[key];
  };

  Options.prototype.set = function (key, val) {
    this.options[key] = val;
  };

  return Options;
});

S2.define('select2/core',[
  'jquery',
  './options',
  './utils',
  './keys'
], function ($, Options, Utils, KEYS) {
  var Select2 = function ($element, options) {
    if ($element.data('select2') != null) {
      $element.data('select2').destroy();
    }

    this.$element = $element;

    this.id = this._generateId($element);

    options = options || {};

    this.options = new Options(options, $element);

    Select2.__super__.constructor.call(this);

    // Set up the tabindex

    var tabindex = $element.attr('tabindex') || 0;
    $element.data('old-tabindex', tabindex);
    $element.attr('tabindex', '-1');

    // Set up containers and adapters

    var DataAdapter = this.options.get('dataAdapter');
    this.dataAdapter = new DataAdapter($element, this.options);

    var $container = this.render();

    this._placeContainer($container);

    var SelectionAdapter = this.options.get('selectionAdapter');
    this.selection = new SelectionAdapter($element, this.options);
    this.$selection = this.selection.render();

    this.selection.position(this.$selection, $container);

    var DropdownAdapter = this.options.get('dropdownAdapter');
    this.dropdown = new DropdownAdapter($element, this.options);
    this.$dropdown = this.dropdown.render();

    this.dropdown.position(this.$dropdown, $container);

    var ResultsAdapter = this.options.get('resultsAdapter');
    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
    this.$results = this.results.render();

    this.results.position(this.$results, this.$dropdown);

    // Bind events

    var self = this;

    // Bind the container to all of the adapters
    this._bindAdapters();

    // Register any DOM event handlers
    this._registerDomEvents();

    // Register any internal event handlers
    this._registerDataEvents();
    this._registerSelectionEvents();
    this._registerDropdownEvents();
    this._registerResultsEvents();
    this._registerEvents();

    // Set the initial state
    this.dataAdapter.current(function (initialData) {
      self.trigger('selection:update', {
        data: initialData
      });
    });

    // Hide the original select
    $element.addClass('select2-hidden-accessible');
    $element.attr('aria-hidden', 'true');

    // Synchronize any monitored attributes
    this._syncAttributes();

    $element.data('select2', this);
  };

  Utils.Extend(Select2, Utils.Observable);

  Select2.prototype._generateId = function ($element) {
    var id = '';

    if ($element.attr('id') != null) {
      id = $element.attr('id');
    } else if ($element.attr('name') != null) {
      id = $element.attr('name') + '-' + Utils.generateChars(2);
    } else {
      id = Utils.generateChars(4);
    }

    id = id.replace(/(:|\.|\[|\]|,)/g, '');
    id = 'select2-' + id;

    return id;
  };

  Select2.prototype._placeContainer = function ($container) {
    $container.insertAfter(this.$element);

    var width = this._resolveWidth(this.$element, this.options.get('width'));

    if (width != null) {
      $container.css('width', width);
    }
  };

  Select2.prototype._resolveWidth = function ($element, method) {
    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

    if (method == 'resolve') {
      var styleWidth = this._resolveWidth($element, 'style');

      if (styleWidth != null) {
        return styleWidth;
      }

      return this._resolveWidth($element, 'element');
    }

    if (method == 'element') {
      var elementWidth = $element.outerWidth(false);

      if (elementWidth <= 0) {
        return 'auto';
      }

      return elementWidth + 'px';
    }

    if (method == 'style') {
      var style = $element.attr('style');

      if (typeof(style) !== 'string') {
        return null;
      }

      var attrs = style.split(';');

      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
        var attr = attrs[i].replace(/\s/g, '');
        var matches = attr.match(WIDTH);

        if (matches !== null && matches.length >= 1) {
          return matches[1];
        }
      }

      return null;
    }

    return method;
  };

  Select2.prototype._bindAdapters = function () {
    this.dataAdapter.bind(this, this.$container);
    this.selection.bind(this, this.$container);

    this.dropdown.bind(this, this.$container);
    this.results.bind(this, this.$container);
  };

  Select2.prototype._registerDomEvents = function () {
    var self = this;

    this.$element.on('change.select2', function () {
      self.dataAdapter.current(function (data) {
        self.trigger('selection:update', {
          data: data
        });
      });
    });

    this.$element.on('focus.select2', function (evt) {
      self.trigger('focus', evt);
    });

    this._syncA = Utils.bind(this._syncAttributes, this);
    this._syncS = Utils.bind(this._syncSubtree, this);

    if (this.$element[0].attachEvent) {
      this.$element[0].attachEvent('onpropertychange', this._syncA);
    }

    var observer = window.MutationObserver ||
      window.WebKitMutationObserver ||
      window.MozMutationObserver
    ;

    if (observer != null) {
      this._observer = new observer(function (mutations) {
        $.each(mutations, self._syncA);
        $.each(mutations, self._syncS);
      });
      this._observer.observe(this.$element[0], {
        attributes: true,
        childList: true,
        subtree: false
      });
    } else if (this.$element[0].addEventListener) {
      this.$element[0].addEventListener(
        'DOMAttrModified',
        self._syncA,
        false
      );
      this.$element[0].addEventListener(
        'DOMNodeInserted',
        self._syncS,
        false
      );
      this.$element[0].addEventListener(
        'DOMNodeRemoved',
        self._syncS,
        false
      );
    }
  };

  Select2.prototype._registerDataEvents = function () {
    var self = this;

    this.dataAdapter.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerSelectionEvents = function () {
    var self = this;
    var nonRelayEvents = ['toggle', 'focus'];

    this.selection.on('toggle', function () {
      self.toggleDropdown();
    });

    this.selection.on('focus', function (params) {
      self.focus(params);
    });

    this.selection.on('*', function (name, params) {
      if ($.inArray(name, nonRelayEvents) !== -1) {
        return;
      }

      self.trigger(name, params);
    });
  };

  Select2.prototype._registerDropdownEvents = function () {
    var self = this;

    this.dropdown.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerResultsEvents = function () {
    var self = this;

    this.results.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerEvents = function () {
    var self = this;

    this.on('open', function () {
      self.$container.addClass('select2-container--open');
    });

    this.on('close', function () {
      self.$container.removeClass('select2-container--open');
    });

    this.on('enable', function () {
      self.$container.removeClass('select2-container--disabled');
    });

    this.on('disable', function () {
      self.$container.addClass('select2-container--disabled');
    });

    this.on('blur', function () {
      self.$container.removeClass('select2-container--focus');
    });

    this.on('query', function (params) {
      if (!self.isOpen()) {
        self.trigger('open', {});
      }

      this.dataAdapter.query(params, function (data) {
        self.trigger('results:all', {
          data: data,
          query: params
        });
      });
    });

    this.on('query:append', function (params) {
      this.dataAdapter.query(params, function (data) {
        self.trigger('results:append', {
          data: data,
          query: params
        });
      });
    });

    this.on('keypress', function (evt) {
      var key = evt.which;

      if (self.isOpen()) {
        if (key === KEYS.ESC || key === KEYS.TAB ||
            (key === KEYS.UP && evt.altKey)) {
          self.close();

          evt.preventDefault();
        } else if (key === KEYS.ENTER) {
          self.trigger('results:select', {});

          evt.preventDefault();
        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
          self.trigger('results:toggle', {});

          evt.preventDefault();
        } else if (key === KEYS.UP) {
          self.trigger('results:previous', {});

          evt.preventDefault();
        } else if (key === KEYS.DOWN) {
          self.trigger('results:next', {});

          evt.preventDefault();
        }
      } else {
        if (key === KEYS.ENTER || key === KEYS.SPACE ||
            (key === KEYS.DOWN && evt.altKey)) {
          self.open();

          evt.preventDefault();
        }
      }
    });
  };

  Select2.prototype._syncAttributes = function () {
    this.options.set('disabled', this.$element.prop('disabled'));

    if (this.options.get('disabled')) {
      if (this.isOpen()) {
        this.close();
      }

      this.trigger('disable', {});
    } else {
      this.trigger('enable', {});
    }
  };

  Select2.prototype._syncSubtree = function (evt, mutations) {
    var changed = false;
    var self = this;

    // Ignore any mutation events raised for elements that aren't options or
    // optgroups. This handles the case when the select element is destroyed
    if (
      evt && evt.target && (
        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
      )
    ) {
      return;
    }

    if (!mutations) {
      // If mutation events aren't supported, then we can only assume that the
      // change affected the selections
      changed = true;
    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
      for (var n = 0; n < mutations.addedNodes.length; n++) {
        var node = mutations.addedNodes[n];

        if (node.selected) {
          changed = true;
        }
      }
    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
      changed = true;
    }

    // Only re-pull the data if we think there is a change
    if (changed) {
      this.dataAdapter.current(function (currentData) {
        self.trigger('selection:update', {
          data: currentData
        });
      });
    }
  };

  /**
   * Override the trigger method to automatically trigger pre-events when
   * there are events that can be prevented.
   */
  Select2.prototype.trigger = function (name, args) {
    var actualTrigger = Select2.__super__.trigger;
    var preTriggerMap = {
      'open': 'opening',
      'close': 'closing',
      'select': 'selecting',
      'unselect': 'unselecting'
    };

    if (args === undefined) {
      args = {};
    }

    if (name in preTriggerMap) {
      var preTriggerName = preTriggerMap[name];
      var preTriggerArgs = {
        prevented: false,
        name: name,
        args: args
      };

      actualTrigger.call(this, preTriggerName, preTriggerArgs);

      if (preTriggerArgs.prevented) {
        args.prevented = true;

        return;
      }
    }

    actualTrigger.call(this, name, args);
  };

  Select2.prototype.toggleDropdown = function () {
    if (this.options.get('disabled')) {
      return;
    }

    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };

  Select2.prototype.open = function () {
    if (this.isOpen()) {
      return;
    }

    this.trigger('query', {});
  };

  Select2.prototype.close = function () {
    if (!this.isOpen()) {
      return;
    }

    this.trigger('close', {});
  };

  Select2.prototype.isOpen = function () {
    return this.$container.hasClass('select2-container--open');
  };

  Select2.prototype.hasFocus = function () {
    return this.$container.hasClass('select2-container--focus');
  };

  Select2.prototype.focus = function (data) {
    // No need to re-trigger focus events if we are already focused
    if (this.hasFocus()) {
      return;
    }

    this.$container.addClass('select2-container--focus');
    this.trigger('focus', {});
  };

  Select2.prototype.enable = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("enable")` method has been deprecated and will' +
        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
        ' instead.'
      );
    }

    if (args == null || args.length === 0) {
      args = [true];
    }

    var disabled = !args[0];

    this.$element.prop('disabled', disabled);
  };

  Select2.prototype.data = function () {
    if (this.options.get('debug') &&
        arguments.length > 0 && window.console && console.warn) {
      console.warn(
        'Select2: Data can no longer be set using `select2("data")`. You ' +
        'should consider setting the value instead using `$element.val()`.'
      );
    }

    var data = [];

    this.dataAdapter.current(function (currentData) {
      data = currentData;
    });

    return data;
  };

  Select2.prototype.val = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("val")` method has been deprecated and will be' +
        ' removed in later Select2 versions. Use $element.val() instead.'
      );
    }

    if (args == null || args.length === 0) {
      return this.$element.val();
    }

    var newVal = args[0];

    if ($.isArray(newVal)) {
      newVal = $.map(newVal, function (obj) {
        return obj.toString();
      });
    }

    this.$element.val(newVal).trigger('change');
  };

  Select2.prototype.destroy = function () {
    this.$container.remove();

    if (this.$element[0].detachEvent) {
      this.$element[0].detachEvent('onpropertychange', this._syncA);
    }

    if (this._observer != null) {
      this._observer.disconnect();
      this._observer = null;
    } else if (this.$element[0].removeEventListener) {
      this.$element[0]
        .removeEventListener('DOMAttrModified', this._syncA, false);
      this.$element[0]
        .removeEventListener('DOMNodeInserted', this._syncS, false);
      this.$element[0]
        .removeEventListener('DOMNodeRemoved', this._syncS, false);
    }

    this._syncA = null;
    this._syncS = null;

    this.$element.off('.select2');
    this.$element.attr('tabindex', this.$element.data('old-tabindex'));

    this.$element.removeClass('select2-hidden-accessible');
    this.$element.attr('aria-hidden', 'false');
    this.$element.removeData('select2');

    this.dataAdapter.destroy();
    this.selection.destroy();
    this.dropdown.destroy();
    this.results.destroy();

    this.dataAdapter = null;
    this.selection = null;
    this.dropdown = null;
    this.results = null;
  };

  Select2.prototype.render = function () {
    var $container = $(
      '<span class="select2 select2-container">' +
        '<span class="selection"></span>' +
        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
      '</span>'
    );

    $container.attr('dir', this.options.get('dir'));

    this.$container = $container;

    this.$container.addClass('select2-container--' + this.options.get('theme'));

    $container.data('element', this.$element);

    return $container;
  };

  return Select2;
});

S2.define('select2/compat/utils',[
  'jquery'
], function ($) {
  function syncCssClasses ($dest, $src, adapter) {
    var classes, replacements = [], adapted;

    classes = $.trim($dest.attr('class'));

    if (classes) {
      classes = '' + classes; // for IE which returns object

      $(classes.split(/\s+/)).each(function () {
        // Save all Select2 classes
        if (this.indexOf('select2-') === 0) {
          replacements.push(this);
        }
      });
    }

    classes = $.trim($src.attr('class'));

    if (classes) {
      classes = '' + classes; // for IE which returns object

      $(classes.split(/\s+/)).each(function () {
        // Only adapt non-Select2 classes
        if (this.indexOf('select2-') !== 0) {
          adapted = adapter(this);

          if (adapted != null) {
            replacements.push(adapted);
          }
        }
      });
    }

    $dest.attr('class', replacements.join(' '));
  }

  return {
    syncCssClasses: syncCssClasses
  };
});

S2.define('select2/compat/containerCss',[
  'jquery',
  './utils'
], function ($, CompatUtils) {
  // No-op CSS adapter that discards all classes by default
  function _containerAdapter (clazz) {
    return null;
  }

  function ContainerCSS () { }

  ContainerCSS.prototype.render = function (decorated) {
    var $container = decorated.call(this);

    var containerCssClass = this.options.get('containerCssClass') || '';

    if ($.isFunction(containerCssClass)) {
      containerCssClass = containerCssClass(this.$element);
    }

    var containerCssAdapter = this.options.get('adaptContainerCssClass');
    containerCssAdapter = containerCssAdapter || _containerAdapter;

    if (containerCssClass.indexOf(':all:') !== -1) {
      containerCssClass = containerCssClass.replace(':all:', '');

      var _cssAdapter = containerCssAdapter;

      containerCssAdapter = function (clazz) {
        var adapted = _cssAdapter(clazz);

        if (adapted != null) {
          // Append the old one along with the adapted one
          return adapted + ' ' + clazz;
        }

        return clazz;
      };
    }

    var containerCss = this.options.get('containerCss') || {};

    if ($.isFunction(containerCss)) {
      containerCss = containerCss(this.$element);
    }

    CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);

    $container.css(containerCss);
    $container.addClass(containerCssClass);

    return $container;
  };

  return ContainerCSS;
});

S2.define('select2/compat/dropdownCss',[
  'jquery',
  './utils'
], function ($, CompatUtils) {
  // No-op CSS adapter that discards all classes by default
  function _dropdownAdapter (clazz) {
    return null;
  }

  function DropdownCSS () { }

  DropdownCSS.prototype.render = function (decorated) {
    var $dropdown = decorated.call(this);

    var dropdownCssClass = this.options.get('dropdownCssClass') || '';

    if ($.isFunction(dropdownCssClass)) {
      dropdownCssClass = dropdownCssClass(this.$element);
    }

    var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');
    dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;

    if (dropdownCssClass.indexOf(':all:') !== -1) {
      dropdownCssClass = dropdownCssClass.replace(':all:', '');

      var _cssAdapter = dropdownCssAdapter;

      dropdownCssAdapter = function (clazz) {
        var adapted = _cssAdapter(clazz);

        if (adapted != null) {
          // Append the old one along with the adapted one
          return adapted + ' ' + clazz;
        }

        return clazz;
      };
    }

    var dropdownCss = this.options.get('dropdownCss') || {};

    if ($.isFunction(dropdownCss)) {
      dropdownCss = dropdownCss(this.$element);
    }

    CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);

    $dropdown.css(dropdownCss);
    $dropdown.addClass(dropdownCssClass);

    return $dropdown;
  };

  return DropdownCSS;
});

S2.define('select2/compat/initSelection',[
  'jquery'
], function ($) {
  function InitSelection (decorated, $element, options) {
    if (options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `initSelection` option has been deprecated in favor' +
        ' of a custom data adapter that overrides the `current` method. ' +
        'This method is now called multiple times instead of a single ' +
        'time when the instance is initialized. Support will be removed ' +
        'for the `initSelection` option in future versions of Select2'
      );
    }

    this.initSelection = options.get('initSelection');
    this._isInitialized = false;

    decorated.call(this, $element, options);
  }

  InitSelection.prototype.current = function (decorated, callback) {
    var self = this;

    if (this._isInitialized) {
      decorated.call(this, callback);

      return;
    }

    this.initSelection.call(null, this.$element, function (data) {
      self._isInitialized = true;

      if (!$.isArray(data)) {
        data = [data];
      }

      callback(data);
    });
  };

  return InitSelection;
});

S2.define('select2/compat/inputData',[
  'jquery'
], function ($) {
  function InputData (decorated, $element, options) {
    this._currentData = [];
    this._valueSeparator = options.get('valueSeparator') || ',';

    if ($element.prop('type') === 'hidden') {
      if (options.get('debug') && console && console.warn) {
        console.warn(
          'Select2: Using a hidden input with Select2 is no longer ' +
          'supported and may stop working in the future. It is recommended ' +
          'to use a `<select>` element instead.'
        );
      }
    }

    decorated.call(this, $element, options);
  }

  InputData.prototype.current = function (_, callback) {
    function getSelected (data, selectedIds) {
      var selected = [];

      if (data.selected || $.inArray(data.id, selectedIds) !== -1) {
        data.selected = true;
        selected.push(data);
      } else {
        data.selected = false;
      }

      if (data.children) {
        selected.push.apply(selected, getSelected(data.children, selectedIds));
      }

      return selected;
    }

    var selected = [];

    for (var d = 0; d < this._currentData.length; d++) {
      var data = this._currentData[d];

      selected.push.apply(
        selected,
        getSelected(
          data,
          this.$element.val().split(
            this._valueSeparator
          )
        )
      );
    }

    callback(selected);
  };

  InputData.prototype.select = function (_, data) {
    if (!this.options.get('multiple')) {
      this.current(function (allData) {
        $.map(allData, function (data) {
          data.selected = false;
        });
      });

      this.$element.val(data.id);
      this.$element.trigger('change');
    } else {
      var value = this.$element.val();
      value += this._valueSeparator + data.id;

      this.$element.val(value);
      this.$element.trigger('change');
    }
  };

  InputData.prototype.unselect = function (_, data) {
    var self = this;

    data.selected = false;

    this.current(function (allData) {
      var values = [];

      for (var d = 0; d < allData.length; d++) {
        var item = allData[d];

        if (data.id == item.id) {
          continue;
        }

        values.push(item.id);
      }

      self.$element.val(values.join(self._valueSeparator));
      self.$element.trigger('change');
    });
  };

  InputData.prototype.query = function (_, params, callback) {
    var results = [];

    for (var d = 0; d < this._currentData.length; d++) {
      var data = this._currentData[d];

      var matches = this.matches(params, data);

      if (matches !== null) {
        results.push(matches);
      }
    }

    callback({
      results: results
    });
  };

  InputData.prototype.addOptions = function (_, $options) {
    var options = $.map($options, function ($option) {
      return $.data($option[0], 'data');
    });

    this._currentData.push.apply(this._currentData, options);
  };

  return InputData;
});

S2.define('select2/compat/matcher',[
  'jquery'
], function ($) {
  function oldMatcher (matcher) {
    function wrappedMatcher (params, data) {
      var match = $.extend(true, {}, data);

      if (params.term == null || $.trim(params.term) === '') {
        return match;
      }

      if (data.children) {
        for (var c = data.children.length - 1; c >= 0; c--) {
          var child = data.children[c];

          // Check if the child object matches
          // The old matcher returned a boolean true or false
          var doesMatch = matcher(params.term, child.text, child);

          // If the child didn't match, pop it off
          if (!doesMatch) {
            match.children.splice(c, 1);
          }
        }

        if (match.children.length > 0) {
          return match;
        }
      }

      if (matcher(params.term, data.text, data)) {
        return match;
      }

      return null;
    }

    return wrappedMatcher;
  }

  return oldMatcher;
});

S2.define('select2/compat/query',[

], function () {
  function Query (decorated, $element, options) {
    if (options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `query` option has been deprecated in favor of a ' +
        'custom data adapter that overrides the `query` method. Support ' +
        'will be removed for the `query` option in future versions of ' +
        'Select2.'
      );
    }

    decorated.call(this, $element, options);
  }

  Query.prototype.query = function (_, params, callback) {
    params.callback = callback;

    var query = this.options.get('query');

    query.call(null, params);
  };

  return Query;
});

S2.define('select2/dropdown/attachContainer',[

], function () {
  function AttachContainer (decorated, $element, options) {
    decorated.call(this, $element, options);
  }

  AttachContainer.prototype.position =
    function (decorated, $dropdown, $container) {
    var $dropdownContainer = $container.find('.dropdown-wrapper');
    $dropdownContainer.append($dropdown);

    $dropdown.addClass('select2-dropdown--below');
    $container.addClass('select2-container--below');
  };

  return AttachContainer;
});

S2.define('select2/dropdown/stopPropagation',[

], function () {
  function StopPropagation () { }

  StopPropagation.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    var stoppedEvents = [
    'blur',
    'change',
    'click',
    'dblclick',
    'focus',
    'focusin',
    'focusout',
    'input',
    'keydown',
    'keyup',
    'keypress',
    'mousedown',
    'mouseenter',
    'mouseleave',
    'mousemove',
    'mouseover',
    'mouseup',
    'search',
    'touchend',
    'touchstart'
    ];

    this.$dropdown.on(stoppedEvents.join(' '), function (evt) {
      evt.stopPropagation();
    });
  };

  return StopPropagation;
});

S2.define('select2/selection/stopPropagation',[

], function () {
  function StopPropagation () { }

  StopPropagation.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    var stoppedEvents = [
      'blur',
      'change',
      'click',
      'dblclick',
      'focus',
      'focusin',
      'focusout',
      'input',
      'keydown',
      'keyup',
      'keypress',
      'mousedown',
      'mouseenter',
      'mouseleave',
      'mousemove',
      'mouseover',
      'mouseup',
      'search',
      'touchend',
      'touchstart'
    ];

    this.$selection.on(stoppedEvents.join(' '), function (evt) {
      evt.stopPropagation();
    });
  };

  return StopPropagation;
});

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof S2.define === 'function' && S2.define.amd ) {
        // AMD. Register as an anonymous module.
        S2.define('jquery-mousewheel',['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));

S2.define('jquery.select2',[
  'jquery',
  'jquery-mousewheel',

  './select2/core',
  './select2/defaults'
], function ($, _, Select2, Defaults) {
  if ($.fn.select2 == null) {
    // All methods that should return the element
    var thisMethods = ['open', 'close', 'destroy'];

    $.fn.select2 = function (options) {
      options = options || {};

      if (typeof options === 'object') {
        this.each(function () {
          var instanceOptions = $.extend(true, {}, options);

          var instance = new Select2($(this), instanceOptions);
        });

        return this;
      } else if (typeof options === 'string') {
        var ret;
        var args = Array.prototype.slice.call(arguments, 1);

        this.each(function () {
          var instance = $(this).data('select2');

          if (instance == null && window.console && console.error) {
            console.error(
              'The select2(\'' + options + '\') method was called on an ' +
              'element that is not using Select2.'
            );
          }

          ret = instance[options].apply(instance, args);
        });

        // Check if we should be returning `this`
        if ($.inArray(options, thisMethods) > -1) {
          return this;
        }

        return ret;
      } else {
        throw new Error('Invalid arguments for Select2: ' + options);
      }
    };
  }

  if ($.fn.select2.defaults == null) {
    $.fn.select2.defaults = Defaults;
  }

  return Select2;
});

  // Return the AMD loader configuration so it can be used outside of this file
  return {
    define: S2.define,
    require: S2.require
  };
}());

  // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe
  var select2 = S2.require('jquery.select2');

  // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.
  jQuery.fn.select2.amd = S2;

  // Return the Select2 instance for anyone who is importing it.
  return select2;
}));

/*jquery.showLoading.js*/
/*
 * jQuery showLoading plugin v1.0
 * 
 * Copyright (c) 2009 Jim Keller
 * Context - http://www.contextllc.com
 * 
 * Dual licensed under the MIT and GPL licenses.
 *
 */

	jQuery.fn.showLoading = function(options) {
		
		var indicatorID;
       		var settings = {
       			'addClass': '',
	       		'beforeShow': '', 
       			'afterShow': '',
       			'hPos': 'center', 
	       		'vPos': 'center',
       			'indicatorZIndex' : 5001, 
       			'overlayZIndex': 5000, 
	       		'parent': '',
       			'marginTop': 0,
       			'marginLeft': 0,
	       		'overlayWidth': null,
       			'overlayHeight': null
	       	};

		jQuery.extend(settings, options);
       	
       		var loadingDiv = jQuery('<div></div>');
		var overlayDiv = jQuery('<div></div>');

		//
		// Set up ID and classes
		//
		if ( settings.indicatorID ) {
			indicatorID = settings.indicatorID;
		}
		else {
			indicatorID = jQuery(this).attr('id');
		}
			
		jQuery(loadingDiv).attr('id', 'loading-indicator-' + indicatorID );
		jQuery(loadingDiv).addClass('loading-indicator');
		
		if ( settings.addClass ){
			jQuery(loadingDiv).addClass(settings.addClass);
		}


		
		//
		// Create the overlay
		//
		jQuery(overlayDiv).css('display', 'none');
		
		// Append to body, otherwise position() doesn't work on Webkit-based browsers
		jQuery(document.body).append(overlayDiv);
		
		//
		// Set overlay classes
		//
		jQuery(overlayDiv).attr('id', 'loading-indicator-' + indicatorID + '-overlay');
		
		jQuery(overlayDiv).addClass('loading-indicator-overlay');
		
		if ( settings.addClass ){
			jQuery(overlayDiv).addClass(settings.addClass + '-overlay');
		}
		
		//
		// Set overlay position
		//
		
		var overlay_width;
		var overlay_height;
		
		var border_top_width = jQuery(this).css('border-top-width');
		var border_left_width = jQuery(this).css('border-left-width');
		
		//
		// IE will return values like 'medium' as the default border, 
		// but we need a number
		//
		border_top_width = isNaN(parseInt(border_top_width)) ? 0 : border_top_width;
		border_left_width = isNaN(parseInt(border_left_width)) ? 0 : border_left_width;
		
		var overlay_left_pos = jQuery(this).offset().left + parseInt(border_left_width);
		var overlay_top_pos = jQuery(this).offset().top + parseInt(border_top_width);
		
		if ( settings.overlayWidth !== null ) {
			overlay_width = settings.overlayWidth;
		}
		else {
			overlay_width = parseInt(jQuery(this).width()) + parseInt(jQuery(this).css('padding-right')) + parseInt(jQuery(this).css('padding-left'));
		}

		if ( settings.overlayHeight !== null ) {
			overlay_height = settings.overlayWidth;
		}
		else {
			overlay_height = parseInt(jQuery(this).height()) + parseInt(jQuery(this).css('padding-top')) + parseInt(jQuery(this).css('padding-bottom'));
		}


		jQuery(overlayDiv).css('width', overlay_width.toString() + 'px');
		jQuery(overlayDiv).css('height', overlay_height.toString() + 'px');

		jQuery(overlayDiv).css('left', overlay_left_pos.toString() + 'px');
		jQuery(overlayDiv).css('position', 'absolute');

		jQuery(overlayDiv).css('top', overlay_top_pos.toString() + 'px' );
		jQuery(overlayDiv).css('z-index', settings.overlayZIndex);

		//
		// Set any custom overlay CSS		
		//
       		if ( settings.overlayCSS ) {
       			jQuery(overlayDiv).css ( settings.overlayCSS );
       		}


		//
		// We have to append the element to the body first
		// or .width() won't work in Webkit-based browsers (e.g. Chrome, Safari)
		//
		jQuery(loadingDiv).css('display', 'none');
		jQuery(document.body).append(loadingDiv);
		
		jQuery(loadingDiv).css('position', 'absolute');
		jQuery(loadingDiv).css('z-index', settings.indicatorZIndex);

		//
		// Set top margin
		//

		var indicatorTop = overlay_top_pos;
		
		if ( settings.marginTop ) {
			indicatorTop += parseInt(settings.marginTop);
		}
		
		var indicatorLeft = overlay_left_pos;
		
		if ( settings.marginLeft ) {
			indicatorLeft += parseInt(settings.marginTop);
		}
		
		
		//
		// set horizontal position
		//
		if ( settings.hPos.toString().toLowerCase() == 'center' ) {
			jQuery(loadingDiv).css('left', (indicatorLeft + ((jQuery(overlayDiv).width() - parseInt(jQuery(loadingDiv).width())) / 2)).toString()  + 'px');
		}
		else if ( settings.hPos.toString().toLowerCase() == 'left' ) {
			jQuery(loadingDiv).css('left', (indicatorLeft + parseInt(jQuery(overlayDiv).css('margin-left'))).toString() + 'px');
		}
		else if ( settings.hPos.toString().toLowerCase() == 'right' ) {
			jQuery(loadingDiv).css('left', (indicatorLeft + (jQuery(overlayDiv).width() - parseInt(jQuery(loadingDiv).width()))).toString()  + 'px');
		}
		else {
			jQuery(loadingDiv).css('left', (indicatorLeft + parseInt(settings.hPos)).toString() + 'px');
		}		

		//
		// set vertical position
		//
		if ( settings.vPos.toString().toLowerCase() == 'center' ) {
			jQuery(loadingDiv).css('top', (indicatorTop + ((jQuery(overlayDiv).height() - parseInt(jQuery(loadingDiv).height())) / 2)).toString()  + 'px');
		}
		else if ( settings.vPos.toString().toLowerCase() == 'top' ) {
			jQuery(loadingDiv).css('top', indicatorTop.toString() + 'px');
		}
		else if ( settings.vPos.toString().toLowerCase() == 'bottom' ) {
			jQuery(loadingDiv).css('top', (indicatorTop + (jQuery(overlayDiv).height() - parseInt(jQuery(loadingDiv).height()))).toString()  + 'px');
		}
		else {
			jQuery(loadingDiv).css('top', (indicatorTop + parseInt(settings.vPos)).toString() + 'px' );
		}		


		 
		
		//
		// Set any custom css for loading indicator
		//
       		if ( settings.css ) {
       			jQuery(loadingDiv).css ( settings.css );
       		}

		
		//
		// Set up callback options
		//
		var callback_options = 
			{
				'overlay': overlayDiv,
				'indicator': loadingDiv,
				'element': this
			};
	
		//
		// beforeShow callback
		//
		if ( typeof(settings.beforeShow) == 'function' ) {
			settings.beforeShow( callback_options );
		}
		
		//
		// Show the overlay
		//
		jQuery(overlayDiv).show();
		
		//
		// Show the loading indicator
		//
		jQuery(loadingDiv).show();

		//
		// afterShow callback
		//
		if ( typeof(settings.afterShow) == 'function' ) {
			settings.afterShow( callback_options );
		}

		return this;
    	 };


	jQuery.fn.hideLoading = function(options) {
		
		
       		var settings = {};
	
       		jQuery.extend(settings, options);

		if ( settings.indicatorID ) {
			indicatorID = settings.indicatorID;
		}
		else {
			indicatorID = jQuery(this).attr('id');
		}
       	
   		jQuery(document.body).find('#loading-indicator-' + indicatorID ).remove();
		jQuery(document.body).find('#loading-indicator-' + indicatorID + '-overlay' ).remove();
		
		return this;
     	};
/*cardStand.js*/

//下拉参数(通用)
var parame={
				id:'',
				value:"N",
				width: "100px",  
				height:"45px",
				url:'/myehr/dict/searchSysDictEntryTypeCode.action?userId=1',
				jsonParam:{},
				formType:'',
				chang:function (e){
					var aaa = e;
				}
};
 
//??(通用)
var containerParam ={};


function cardIsViewFunction(){
	$('input,select,textarea').each(function(){
			$(this).attr('disabled',"true");
			$(this).css('border','none');
			if($(this).attr('styletype')=='dateTime'){
				$(this).next().css('display',"none");
				$(this).next().next().css('display',"none");
				var width = $(this).width()+90;
				$(this).css('width',width+'px');
			}
		});
}

function getLookupValue(e,value){
	var f = e.split(".");
	var val = value;
	var entityCode = f[0];
	var fieldCodes = f[1].split("_");
	var fieldCode = "";
	for(var i=1;i<fieldCodes.length-1;i++){
		fieldCode += fieldCodes[i]; 
	}
	var xxx="";
	var formId = fieldCodes[fieldCodes.length-1];
	$.ajax({
		url:'/myehr/form/getLookupReturnValue.action?formId='+formId+"&entityCode="+entityCode+"&fieldCode="+fieldCode+"&value="+val,
		type:'post',
		cache: false,
		async: false,
		success: function (text) {
			xxx=text[0];
		}
	})
	return xxx;
}

function cardDateWidInitFunction(){
	$('.form_date1').datetimepicker({ 
		 language:  'zh-CN',  
		 format:"yyyy-mm-dd",  
		 weekStart: 1,  
		 todayBtn:  1,  
		 autoclose: 1,  
		 todayHighlight: 1,  
		 startView: 2,  
		 minView: 2,  
		 forceParse: 0,  
		 pickerPosition: "bottom-left"  
		});  
		$('.form_date2').datetimepicker({ 
		 language:  'zh-CN',  
		 format:"yyyy-mm-dd hh:ii",  
		 weekStart: 1,  
		 todayBtn:  1,  
		 autoclose: 1,  
		 todayHighlight: 1,  
		 startView: 2,  
		 minView: 0,  
		 forceParse: 0,  
		 pickerPosition: "bottom-left"  
		});  
		$('.form_date3').datetimepicker({ 
		 language:  'zh-CN',  
		 format:"hh:ii",  
		 weekStart: 1,  
		 todayBtn:  1,  
		 autoclose: 1,  
		 todayHighlight: 1,  
		 startView: 0,  
		 minView: 2,  
		 forceParse: 0,  
		 pickerPosition: "bottom-left"  
		});  
		$('.form_date4').datetimepicker({ 
		 language:  'zh-CN',  
		 format:"yyyy/mm/dd",  
		 weekStart: 1,  
		 todayBtn:  1,  
		 autoclose: 1,  
		 todayHighlight: 1,  
		 startView: 2,  
		 minView: 2,  
		 forceParse: 0,  
		 pickerPosition: "bottom-left"  
		});  
		$('.form_date5').datetimepicker({ 
		 language:  'zh-CN',  
		 format:"yyyymm",  
		 weekStart: 1,  
		 todayBtn:  1,  
		 autoclose: 1,  
		 todayHighlight: 1,  
		 startView: 3,  
		 minView: 3,  
		 forceParse: 0,  
		 pickerPosition: "bottom-left"  
		});
}

function cardGetdata(buttonId,formId){
	var classes = $("select");
	var j=0;
	var Dselect = [];
	for(var i=0;i<classes.length;i++){
		if($(classes[i]).attr('disabled')=='disabled'){
			Dselect[j] = $(classes[i]);
			$(classes[i]).removeAttr('disabled');
			j++;
		}
	}
	var param = {};
	var data = {buttonId:buttonId,formId:formId,param:{},paramsMap:{}};
	$.map($('[name=form_'+formId+']').serializeArray(), function(item, index){
		var obj = this;
		var property =item['name'].toUpperCase();
		var value = item['value'];
		param[property] = value;
	});
	for(var i=0;i<Dselect.length;i++){
		$(Dselect[i]).attr('disabled','disabled');
	}
	
	var multiselects = $('[name=form_'+formId+']').find('[multiselect="true"]');
	for(var i=0;i<multiselects.length;i++){
		var property = multiselects.eq(i).attr("name").toUpperCase();
		var value = multiselects.eq(i).val();
		if(value!=null){
			for(var j=0;j<value.length;j++){
				if(j==0){
					param[property] = value[j];
				}else{
					param[property] += ","+value[j];
				}
			}
		}else{
			param[property]="";
		}
		
		
	}
	
	data.param = param;
	return data;
}

//卡片日期数据赋值格式化(通用)
function formatDatebox(value,key) {
	  if(value!=null){
		 var type = document.getElementById(key).getAttribute("dateType");
		 type = type.substr(type.length-1,1);
		var year=value.substr(0,4);
		var yearMonth=value.substr(0,6);
		var index1=value.indexOf("-");
		var index2=value.lastIndexOf("-");
		var d1=parseInt(index2)-(parseInt(index1)+1);
		var month=value.substr((parseInt(index1)+1),d1);
		var kg=value.indexOf(" ");
		d2=parseInt(kg)-parseInt(index2);
		var day=value.substr(parseInt(index2)+1,d2);
		var mh=value.indexOf(":");
		d3=parseInt(mh)-(parseInt(kg)+1);
		var hh=value.substr(parseInt(kg)+1,d3);
		var mh2=value.lastIndexOf(":");
		d4=parseInt(mh2)-(parseInt(mh)+1);
		var mm=value.substr(parseInt(mh)+1,d4);
		var mh2=value.lastIndexOf(":");
		var ss=value.substr(parseInt(mh2)+1);
		if(type == 1){
				return year+"-"+month+"-"+day;
		}else if(type == 2){
				return year+"-"+month+"-"+day+" "+hh+":"+mm;
		}else if(type == 3){
				return hh+":"+mm;
		}else if(type == 4){
				return year+"/"+month+"/"+day;
		}else if(type == 5){
				return yearMonth;
		}
	  }
}

function cardSelectInitFunction(){
	var classes = [];
	if(''=='APP'){
		$("input").each(function(){
			if($(this).attr('dataField') != undefined){
				classes.push($(this)[0]);
			}
		})
	}else{
		classes = $("select");
	}
	for(var i=0;i<classes.length;i++){
		parame.id=classes[i].id;
		var type=$(classes[i]).attr('multiSelect');
		var dataField=$(classes[i]).attr('dataField');
		parame.placeholder="";
		parame.jsonParam.nullItemText=$(classes[i]).attr('nullItemText');
		parame.jsonParam.dictTypeCode=$(classes[i]).attr('DictName');
		if(type=="true"){
			myehr_initSelectMore(parame,dataField,containerParam);
		}else{
			myehr_initSelect(parame,dataField,containerParam);
		}
	}
}



function checkNull(id){
	var xxx = "";
	var flag = false;
	var weitians=[];
	$(id).find("input,select,textarea").each(function(){
		if($(this).attr("required")=='required'){
			var id = this.id;
			var value = $("[id='"+id+"']").val();
			//var weitian=$(this).attr('tilte');
			//weitians.push(weitian);
			if($(this).val()==""||$(this).val()==null){
				$(this).css('border-color','red');
				$(this).attr("placeholder","此项不能为空");
			var weitian=$(this).attr("title");
			weitians.push(weitian);
				var title = $(this).prev().html();
			/*	layer.alert(weitians+'不能为空', {
					icon: 5,//1:√;2:×;3:问号;4:锁;5:哭脸;6.笑脸;7:！;
					skin: 'layer-ext-moon' 
				});
				*/
				flag = true;
			}else{
				$(this).css('border-color','#000');
			}
		}
		
		var bb=$(this).val();
		var vtype=$(this).attr('vtype');
		var vtypes= new Array();
		if(vtype!=null&&vtype!=undefined){
			vtypes=vtype.split(";");
			var re=new RegExp("[^?!@#$%\^&*]+$");
			var errorText = "包含非法字符";
			if (bb !="" && bb!=null) {
				if(vtypes[0].indexOf("letter")==0){
					re = new RegExp("^[a-zA-Z\_]+$");//自定义英文
					errorText = "请输入正确的英文";
				}
				if(vtypes[0].indexOf("zh")==0){
					re = new RegExp("^[\u4e00-\u9fa5]+$");//自定义中文
					errorText = "请输入正确的中文";
				}
				if(vtypes[0].indexOf("int")==0){
					//re = new RegExp("^(([1-9]+)|([0-9]+\.[0-9]{1,2}))$");//自定义字符
					re = new RegExp("^[0-9]*[1-9][0-9]*$");//自定义字符
					errorText = "请输入正确的数字";
				}
				if(vtypes[0].indexOf("naturalNumber")==0){
					re = new RegExp("^\\d*[1-9]\\d*$");//自定义字符
					errorText = "请输入正确的自然数";
				}
				if(vtypes[0].indexOf("phone")==0){
					re = /^((0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/; //自定义电话号码
					errorText = "请输入正确的电话号码";
				}
				if(vtypes[0].indexOf("chinaMobile")==0){
					re = /1\d{10}/;//自定义手机号码
					errorText = "请输入正确的手机号码";
				}
				if(vtypes[0].indexOf("chinaZipcode")==0){
					re = /[1-9]{1}(\d+){5}/;//自定义邮政编码
					errorText = "请输入正确的邮政编码";
				}
				if(vtypes[0].indexOf("chinaIDNo")==0){
					re = /^(\d{15}$|^\d{18}$|^\d{17}(\d|X|x))$/;//自定义身份证号码
					errorText = "请输入正确的身份证号码";
				}
				if(vtypes[0].indexOf("email")==0){
					re = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;//自定义邮箱
					errorText = "请输入正确的邮箱";
				}
				if (re.test(bb)) {
				}else{
					$(this).val('');
					$(this).css('border-color','red');
					$(this).attr("placeholder",errorText);
					flag = true
				}
			}
		}
	})
	if(weitians!=""){
			
			layer.alert(weitians+'不能为空', {
					icon: 5,//1:√;2:×;3:问号;4:锁;5:哭脸;6.笑脸;7:！;
					skin: 'layer-ext-moon' 
				});
			
		}
	return flag;
}
	
	//关闭(通用)
	function closex(){ 
		var index = parent.layer.getFrameIndex(window.name); //获取当前窗体索引
		parent.layer.close(index);//执行关闭
	}
	//获取卡片内各字段ID(通用)
	function getForm(formId){
					var object=[];
					$(formId).find("input").each(function(){
							var xxx = this.id.split(".")[1];
							if(xxx!=undefined){
								var xx = xxx.split("_");
								var arr = [];
								var id = "";
								for(var i=0;i<xx.length-1;i++){
									if(i<xx.length-2){
										id = id+xx[i]+"_";
									}else{
										id = id+xx[i];
									}
								}
								object[id]=this.id;
							}
					})
					$(formId).find("select").each(function(){
							var xxx = this.id.split(".")[1];
							if(xxx!=undefined){
								var xx = xxx.split("_");
								var arr = [];
								var id = "";
								for(var i=0;i<xx.length-1;i++){
									if(i<xx.length-2){
										id = id+xx[i]+"_";
									}else{
										id = id+xx[i];
									}
								}
							object[id]=this.id;
								}
					})
					$(formId).find("textarea").each(function(){
							var xxx = this.id.split(".")[1];
							if(xxx!=undefined){
								var xx = xxx.split("_");
								var arr = [];
								var id = "";
								for(var i=0;i<xx.length-1;i++){
									if(i<xx.length-2){
										id = id+xx[i]+"_";
									}else{
										id = id+xx[i];
									}
								}
							object[id]=this.id;
								}
					})
					
					return object;
			}
//获取卡片内各字段特殊类型(通用)
function getType(formId){
				var object=[];
				$(formId).find("input").each(function(){
					var vtype = $(this).attr('format');
					var dType = $(this).attr('styleType');
					if(vtype!=undefined){
						var xxx = this.id.split(".")[1];
							var xx = xxx.split("_");
							var arr = [];
							var id = "";
							for(var i=0;i<xx.length-1;i++){
								if(i<xx.length-2){
									id = id+xx[i]+"_";
								}else{
									id = id+xx[i];
								}
							}
						object[id]="dateTime";
					}else if(dType=='fileupload'){
						var xxx = this.id.split(".")[1];
						var xx = xxx.split("_");
						var arr = [];
						var id = "";
						for(var i=0;i<xx.length-1;i++){
							if(i<xx.length-2){
								id = id+xx[i]+"_";
							}else{
								id = id+xx[i];
							}
						}
						object[id]="fileupload";
					}else if(dType=='inputSelect'){
						var xxx = this.id.split(".")[1];
						var xx = xxx.split("_");
						var arr = [];
						var id = "";
						for(var i=0;i<xx.length-1;i++){
							if(i<xx.length-2){
								id = id+xx[i]+"_";
							}else{
								id = id+xx[i];
							}
						}
						object[id]="inputSelect";
					}else if(dType=='richText'){
						var xxx = this.id.split(".")[1];
						var xx = xxx.split("_");
						var arr = [];
						var id = "";
						for(var i=0;i<xx.length-1;i++){
							if(i<xx.length-2){
								id = id+xx[i]+"_";
							}else{
								id = id+xx[i];
							}
						}
						object[id]="richText";
					}else if(dType=='lookUp'){
						var xxx = this.id.split(".")[1];
						var xx = xxx.split("_");
						var arr = [];
						var id = "";
						for(var i=0;i<xx.length-1;i++){
							if(i<xx.length-2){
								id = id+xx[i]+"_";
							}else{
								id = id+xx[i];
							}
						}
						object[id]="lookUp";
					}
				})
			$(formId).find("select").each(function(){
				var vtype = $(this).attr('class')
				var xxx = this.id.split(".")[1];
				if(xxx!=undefined&&vtype.indexOf("selectpicker")!=-1){
					if($(this).attr('multiSelect')=="true"){
						var xx = xxx.split("_");
						var arr = [];
						var id = "";
						for(var i=0;i<xx.length-1;i++){
							if(i<xx.length-2){
								id = id+xx[i]+"_";
							}else{
								id = id+xx[i];
							}
						}
						object[id]="mupick";
					}else{
						var xx = xxx.split("_");
						var arr = [];
						var id = "";
						for(var i=0;i<xx.length-1;i++){
							if(i<xx.length-2){
								id = id+xx[i]+"_";
							}else{
								id = id+xx[i];
							}
						}
						object[id]="search";
					}
				}
			})
					return object;
		}
/*-------------------------------------------------------列表----------------------------------------------------*/			
function gridPatterns2(){
	$(".fixed-table-toolbar").css("margin-top","38px");
	$(".container-fluid").css("max-height","100%");
	$(".container-fluid").css("padding-left","0");
	//$(".fixed-table-container").css("height",$('.container-fluid').height() -59 +"px");
	$(".fixed-table-body").css("height","84%");
}
function gridPatterns1(){
	$(".fixed-table-toolbar").css("margin-top","38px");
	$(".container-fluid").css("max-height","100%");
	$(".container-fluid").css("padding-left","0");
	$(".fixed-table-container").css("height",$('.container-fluid').height() -59 +"px");
	$(".fixed-table-body").css("height","84%");
	$(".input-group").css("z-index","7");
}
/**取url参数值  */
function getQueryString(name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");  
    var l = decodeURI(window.location.search);  
    var r = l.substr(1).match(reg);  
    if (r != null) return unescape(r[2]);  
    return null;  
}

/**查询条件与分页数据 */
function queryParams(pageReqeust) {
    pageReqeust.search = $("#search").val();
    pageReqeust.enabled = $("#enabled").val();
    pageReqeust.querys = $("#querys").val();
    pageReqeust.pageNo = this.offset;
    pageReqeust.pageSize = this.pageNumber;
    return pageReqeust;
}

function showMoreBtn1(ele,showButtonNum){
	var DIVAMOUNT = 4;
	if(showButtonNum<5){
	}else{
		if(ele.children('div').length > DIVAMOUNT){
			var len = ele.children('div').length;
			$("#ele>div:gt(4)").hide();
			var selectObj = $('<div class="btn-group"><button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">更多 <span class="caret"></span></button><ul class="dropdown-menu" style="min-width:90px;left:-14px;"></ul></div>');
			ele.append(selectObj);
			for(var i=DIVAMOUNT;i<len;i++){
				ele.children('div').eq(i).hide();
				var liObj = $('<li style="margin-left:14px;"></li>');
				liObj.append(ele.children('div').eq(i).clone(true));
				selectObj.find('.dropdown-menu').append(liObj);
				selectObj.find('.dropdown-menu').append($('<li role="separator" class="divider"></li>'));
			}
			selectObj.find('.dropdown-menu div').show();
		}
	}
}

function showMoreBtn(ele){
	var DIVAMOUNT = 4;
	if(ele.children('div').length > DIVAMOUNT){
		var len = ele.children('div').length;
		$("#ele>div:gt(4)").hide();
		var selectObj = $('<div class="btn-group"><button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">更多 <span class="caret"></span></button><ul class="dropdown-menu" style="min-width:90px;left:-14px;"></ul></div>');
		ele.append(selectObj);
		for(var i=DIVAMOUNT;i<len;i++){
			ele.children('div').eq(i).hide();
			var liObj = $('<li style="margin-left:14px;"></li>');
			liObj.append(ele.children('div').eq(i).clone(true));
			selectObj.find('.dropdown-menu').append(liObj);
			selectObj.find('.dropdown-menu').append($('<li role="separator" class="divider"></li>'));
		}
		selectObj.find('.dropdown-menu div').show();
	}
}

function getFilenameById(fileId){
	var fileName ="";
	$.ajax({
		url:'/myehr/FileList/getFilenameById.action?fileId='+fileId,
		type:'post',
		cache: false,
		async: false,
		success: function (obj) {
			fileName = obj.filename;
		}
	});
	return fileName;
}

function getFileByObjIdHis(objType,objId){
	var checked = [];
	$.ajax({
	    url: "/myehr/FileList/getFileByObjIdHis.action?objType="+objType+"&objId="+objId,
	    type: 'post',
	    cache: false,
	    async: false,
	    success: function (data) {
	    	checked=data;
	    }
	});
	return checked;
}

//getFileByFormId()
function getFileByObjId(objType,objId){
	var checked = [];
	$.ajax({
	    url: "/myehr/FileList/getFileByObjId.action?objType="+objType+"&objId="+objId,
	    type: 'post',
	    cache: false,
	    async: false,
	    success: function (data) {
	    	checked=data;
	    }
	});
	return checked;
}

function changeIndex(id){
	var classX = $("#"+id+"_lock").attr("class");
	if(classX=="fa fa-edit"){
		$("#"+id).find(".edui-editor-toolbarbox").eq(0).show();
		$("#"+id+"_lock").attr("class","fa fa-lock");
		$("#"+id+"_cover").css("z-index","1");
	}else{
		$("#"+id).find(".edui-editor-toolbarbox").eq(0).hide();
		$("#"+id+"_lock").attr("class","fa fa-edit");
		$("#"+id+"_cover").css("z-index","999");
		//$("#"+id).find(".edui-editor-bottombar").eq(0).hide();
	}
}




function getdata(buttonId,formId){
	return cardGetdata_main(buttonId,formId);
}

function setReadOnly(e){
	//$("#"+e).css("border","none");
	//$("[id='"+e+"']").css("border","none");
	//$("[id='"+e+"']").attr("readonly","true");
	//$("[id='"+e+"']").css("background","none")
}

function changeQueryGrid(e){
	var obj = $("#"+e).parent().parent().parent().parent().parent();
	obj.css("height","85%");
	obj.find("[class='fixed-table-container']").css("height",obj.height() -79 +"px");
	obj.find("[class='fixed-table-body']").css("height","84%");
	obj.find("[id='myTab']").css("margin","0px");
	obj.find("form").css("margin-top","0px");
}
function changeQueryGrid2(e){
	var obj = $("#"+e).parent().parent().parent().parent().parent();
	obj.css("height","85%");
	obj.find("[class='fixed-table-container']").css("height",obj.parent().parent().parent().height() -105 +"px");
	obj.find("[class='fixed-table-body']").css("height","84%");
	obj.find("[id='myTab']").css("margin","0px");
	obj.find("form").css("margin-top","0px");
}

function changeQueryGrid0(){
	$(".container-fluid").css("height","85%");
	$(".fixed-table-container").css("height",$('.container-fluid').height() -79 +"px");
	$(".fixed-table-body").css("height","84%");
	$("#myTab").css("margin","0px");
	$("form").css("margin-top","0px");
}

function changeQueryGrid1(){
//	$(".container-fluid").css("height","43%");
	$(".fixed-table-container").css("height",$('.container-fluid').height() -79 +"px");
	$(".fixed-table-body").css("height","84%");
	$("#myTab").css("margin","0px");
	$("form").css("margin-top","0px");
}

//--------------------------------------------------------------------------------------------文档管理
var showType = "all";
var folder = "all";
var tags = "";
var switchType = "view";
//表单文件
//文件下载
function showFormDate(arr,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode,numLimit,sizeLimit,typeLimit,objType,objId) {
	var previewSrcArr = [];
	var configArr = [];
	if(arr!=null){
		for (var i = arr.length - 1; i >= 0; i--) {
			previewSrcArr[i]=arr[i].filepath;
			var obj = {};
			obj.caption = arr[i].filename+'_'+arr[i].fileid;
			obj.type = arr[i].clientfilename;
			if(obj.type=='video'){
				obj.filetype="video/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			if(obj.type=='audio'){
				obj.filetype="audio/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			obj.size = arr[i].file_size;
			obj.key = i;
			configArr[i] = obj;
		}
	}
	var deleteButtonAC = '';
	var uploadButtonAC = '';
	var yulanButtonAC = '';
	if(deleteButton){
		deleteButtonAC = '<button type="button" class="kv-file-remove btn btn-kv btn-default btn-outline-secondary" {dataKey} title="删除附件" onclick="deleteAction(this,\'\',\'form\')"><i class="glyphicon glyphicon-trash"></i></button>';
	}
	if(uploadButton){
		uploadButtonAC = '<button type="button" class="kv-file-down btn btn-kv btn-default" {dataKey} title="下载附件" onclick="getFileData(this)"><i class="fa fa-cloud-download"></i></button>';
	}
	if(yulanButton){
		yulanButtonAC = '<i class="glyphicon glyphicon-king"></i>';
	}
	
	//文件预览
	$("#"+e).find("[name='file-es[]']").fileinput({
		theme: 'fa',
		language: 'zh',
		showUpload: false,
		showCaption: false,
		browseClass: "btn btn-primary btn-lg hidden",
		fileType: "any",
		previewFileIcon: true,
		overwriteInitial: false,
		showRemove:false,
		initialPreviewAsData: true,
		initialPreview: previewSrcArr,
		initialPreviewConfig:configArr,
		allowedPreviewTypes:'',
		otherActionButtons:uploadButtonAC,
		layoutTemplates:{
			actionDelete:deleteButtonAC,
		}
	});
	
	if(shangchuanButton){
		$("#"+e).find("[name='file-zh[]']").fileinput({
			theme: 'fa',
			language: 'zh',
			showPreview :true,
			showCaption:false,
			allowedFileExtensions : null,
			//uploadExtraData:expandParams(),
			maxFileCount:numLimit, //表示允许同时上传的最大文件个数newFileUp
			maxFileSize:sizeLimit,
			allowedFileExtensions:typeLimit,
			msgFilesTooMany: "选择上传的文件数量({n}) 超过允许的最大数值{m}！",
			msgSizeTooLarge: "文件 ({name}) (<b>{size} KB</b>) 超过了允许大小 <b>{maxSize} KB</b>",
			uploadUrl: "/myehr/FileList/newFileUp.action?objType="+objType+"&tag="+tags+"&objId="+objId//上传的地址,执行上传文件和更新检查点文件的操作
		}).on("fileuploaded", function(event, data) {
			$("#"+id).next().remove();
			$("#"+id).next().remove();
			initFileManage2('','','','','',id,numLimit,sizeLimit,typeLimit,objType,objId);
			changeFileCss();
		})
		$("#"+e).find("[name='file-zh[]']").on('filebatchselected', function(event, data, previewId, index) {
			  var content = "<div id='batchUp' class='row cell' style='border:none;line-height:25px;height:95%;overflow:auto;' >\n"+
							"<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n"+
							"<h5 class=\"tag-title\">标签</h5>\n"+
							"<input id=\"tag\" name=\"tag\" type=\"hidden\"/>\n"+
							"<div id=\"fileManage_tagType\">\n"+
							"</div>\n"+
							"</div>\n"+
							"</div>\n";
			layer.open({
				title:'输入内容',
				shadeClose: true,
				zIndex:9999,
				content: content,
				area: ['500px', '300px'],
				btn: ['确定', '取消'],
				success: function(layero, index){
					addHtml(tagCode,'fileManage_tagType');
				},
				yes: function(index, layero){
					layer.close(index);
				  
				},
				btn2: function(index, layero){
				 
				}
			});
		});
	}else{
		$("button").remove(".kv-file-zoom");
		$("#"+e).find("[name='file-zh[]']").css("display","none");
	}
}
//检查点文件
function showDate(arr,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode) {
	var previewSrcArr = [];
	var configArr = [];
	var checkedId = $("#"+e).find("[name='checkedId']").val();
	if(arr!=null){
		for (var i = arr.length - 1; i >= 0; i--) {
			previewSrcArr[i]=arr[i].filepath;
			var obj = {};
			obj.caption = arr[i].filename+'_'+arr[i].fileid;
			obj.type = arr[i].clientfilename;
			if(obj.type=='video'){
				obj.filetype="video/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			if(obj.type=='audio'){
				obj.filetype="audio/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			obj.size = arr[i].file_size;
			obj.key = i;
			configArr[i] = obj;
		}
	}
	var deleteButtonAC = '';
	var uploadButtonAC = '';
	var yulanButtonAC = '';
	if(deleteButton){
		deleteButtonAC = '<button type="button" class="kv-file-remove btn btn-kv btn-default btn-outline-secondary" {dataKey} title="删除附件" onclick="deleteAction(this,\''+checkedId+'\',\'form\')"><i class="glyphicon glyphicon-trash"></i></button>';
	}
	if(uploadButton){
		uploadButtonAC = '<button type="button" class="kv-file-down btn btn-kv btn-default" {dataKey} title="下载附件" onclick="getFileData(this)"><i class="fa fa-cloud-download"></i></button>';
	}
	if(yulanButton){
		yulanButtonAC = '<i class="glyphicon glyphicon-king"></i>';
	}
	
	//文件预览
	$("#"+e).find("[name='file-es[]']").fileinput({
		theme: 'fa',
		language: 'zh',
		showUpload: false,
		showCaption: false,
		browseClass: "btn btn-primary btn-lg hidden",
		fileType: "any",
		previewFileIcon: true,
		overwriteInitial: false,
		showRemove:false,
		initialPreviewAsData: true,
		initialPreview: previewSrcArr,
		initialPreviewConfig:configArr,
		allowedPreviewTypes:'',
		otherActionButtons:uploadButtonAC,
		layoutTemplates:{
			actionDelete:deleteButtonAC,
		}
	});
	if(!shangchuanButton){
		$("button").remove(".kv-file-zoom");
	}
	if(shangchuanButton){
		$("#"+e).find("[name='file-zh[]']").fileinput({
			theme: 'fa',
			language: 'zh',
			showPreview :false,
			showCaption:false,
			allowedFileExtensions : null,
			//uploadExtraData:expandParams(),
			maxFileCount:1, //表示允许同时上传的最大文件个数newFileUp
			uploadUrl: "/myehr/FileList/checkedPoint_newFileUp.action?objType=checkedAndForm&tag="+tags+"&checkedId="+checkedId+"&objId="+realFormId//上传的地址,执行上传文件和更新检查点文件的操作
		}).on("fileuploaded", function(event, data) {
			window.location.reload();
		})
		$("#"+e).find("[name='file-zh[]']").on('filebatchselected', function(event, data, previewId, index) {
			  var content = "<div id='batchUp' class='row cell' style='border:none;line-height:25px;height:95%;overflow:auto;' >\n"+
							"<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n"+
							"<h5 class=\"tag-title\">标签</h5>\n"+
							"<input id=\"tag\" name=\"tag\" type=\"hidden\"/>\n"+
							"<div id=\"fileManage_tagType\">\n"+
							"</div>\n"+
							"</div>\n"+
							"</div>\n";
			layer.open({
				offset:'50%',
				shift: 6,
				title:'输入内容',
				shadeClose: true,
				zIndex:9999,
				content: content,
				area: ['500px', '300px'],
				btn: ['确定', '取消'],
				success: function(layero, index){
					addHtml(tagCode,'fileManage_tagType');
				},
				yes: function(index, layero){
					layer.close(index);
				  
				},
				btn2: function(index, layero){
				 
				}
			});
		});
	}else{
		$("#"+e).find("[name='file-zh[]']").css("display","none");
	}
}

function addHtml(dictName,id){
	var html = "";
	data = getDictData(dictName);
	html = "<ul class=\"tag-list\" style=\"padding: 0\">";
	for(var i=0;i<data.length;i++){
		html += "<li onclick=\"changeTag('"+data[i].dictEntryCode+"')\"><a id=\"tag_"+data[i].dictEntryCode+"\" class=\"\">"+data[i].dictEntryName+"</a></li>"
	}
	html += "</ul>";
	$("#"+id).html(html);
}	
function changeTag(type){
tags = "";
if($("#tag_"+type).attr("class")!="tag"){
	$("#tag_"+type).attr("class","tag");
	$("#tag_"+type).css("background-color","orange");
}else{
	$("#tag_"+type).attr("class","");
	$("#tag_"+type).css("background-color","#f3f3f4");
}
var tag = $(".tag");
for(var i=0;i<tag.length;i++){
	tags += tag[i].innerText+","
}
if(tags.length>0){
	tags = tags.substring(0, tags.length-1);
}
	//$("#tag").val(tags);
	//alert(tags);
}	

function getDictData(dictName){
	var dictEntrys = [];
	$.ajax({
		url:'/myehr/FileList/getDictData.action?DictName='+dictName,
		type:'post',
		cache: false,
		async: false,
		success: function (obj) {
			dictEntrys = obj;
		}
	});
	return dictEntrys;
}
function getFileData(e){
	var obj = $(e).parent().parent().parent().find(".file-footer-caption").eq(0);
	var title = obj.attr("title").split("_");
	var id = title[title.length-1];
	loadFile(id);
}
function loadFile(id){
window.open('/myehr/FileList/downLoadfile.action?FILEID='+id+'&formId='+realFormId)
}

function getCheckedByFormId(){
	var checked = [];
	$.ajax({
	    url: "/myehr/FileList/getCheckedByFormId.action?formId="+realFormId,
	    type: 'post',
	    cache: false,
	    async: false,
	    success: function (data) {
	    	checked=data;
	    }
	});
	return checked;
}


//getFileByFormId()
function getFileByFormId(){
	var checked = [];
	$.ajax({
	    url: "/myehr/FileList/getFileByFormId.action?formId="+realFormId,
	    type: 'post',
	    cache: false,
	    async: false,
	    success: function (data) {
	    	checked=data;
	    }
	});
	return checked;
}

function getFileByObj(objType,objId){
	var checked = [];
	$.ajax({
	    url: "/myehr/FileList/getFileByObjId.action?objType="+objType+"&objId="+objId,
	    type: 'post',
	    cache: false,
	    async: false,
	    success: function (data) {
	    	checked=data;
	    }
	});
	return checked;
}

function getCheckedPointById(id){
	var checked = [];
	$.ajax({
	    url: "/myehr/FileList/getCheckedPointById.action?checkedId="+id,
	    type: 'post',
	    cache: false,
	    async: false,
	    success: function (data) {
	    	checked=data;
	    }
	});
	return checked;
}



function initFileManage(shangchuanButton,yulanButton,deleteButton,uploadButton,tagCode){
	var objs = getCheckedByFormId();//所有检查点
	var tableObj='<table id="fileManage" border="1" width="98%" style="text-align:center">\n'+
				 '	<tr>\n'+
				 '		<td width="2.5%">序号</td>\n'+
				 '		<td width="10%">合规检查点</td>\n'+
				 '		<td width="7.5%">合规要求</td>\n'+
				 '		<td width="2.5%">是否通过</td>\n'+
				 '		<td width="9%">检查内容</td>\n'+
				 '		<td width="2.5%">操作人</td>\n'+
				 '		<td width="8.5%">操作时间</td>\n'+
				 '		<td width="15%">文件名称</td>\n'+
				 '		<td width="42.5%">附件</td>\n'+
				 '	</tr>\n'+
				 '</table>';
	$("#form_"+realFormId).after(tableObj);
	for(var i=0;i<objs.length;i++){
		var obj1s = getCheckedPointById(objs[i].point.id);//检查点下所有要求及附件信息
		for(var j=0;j<obj1s.length;j++){
			var e="tr-"+i;
			var tableObj='';
			var date = new Date(obj1s[j].operatorTime).Format("yyyy-MM-dd");
			if(j==0){
				tableObj='<tr id="'+e+'">\n'+
						 '	<td rowspan="'+obj1s.length+'">'+(i+1)+'</td>\n'+
						 '	<td rowspan="'+obj1s.length+'">'+objs[i].point.checkedName+'</td>\n'+
						 '	<td>'+obj1s[j].checkedRequire+'</td>\n'+
						 '	<td>'+obj1s[j].isAchieve+'</td>\n'+
						 '	<td>'+obj1s[j].checkedContent+'</td>\n'+
						 '	<td>'+obj1s[j].operatorName+'</td>\n'+
						 '	<td>'+date+'</td>\n'+
						 '	<td rowspan="'+obj1s.length+'">'+objs[i].point.relatedFileName+'</td>\n'+
						 '	<td rowspan="'+obj1s.length+'">\n'+
						 '		<input type="hidden" name="checkedId" value="'+objs[i].point.id+'"/>\n'+
						 '		<div class="row cell" style="border:0">\n'+
						 '			<div class="col-sm-12 animated fadeInRight">\n'+
						 '				<div class="row">\n'+
						 '					<div id="file_wall_view" class="col-sm-12">\n'+
						 '						<input id="file-es-'+i+'" name="file-es[]" type="file" multiple/>\n'+
						 '						<input id="file-zh-'+i+'" name="file-zh[]" type="file" multiple/>\n'+
						 '					</div>\n'+
						 '				</div>\n'+
						 '			</div>\n'+
						 '		</div>\n'+
						 '	</td>\n'+
						 '</tr>\n';
			}else{
				tableObj='<tr id="'+e+'">\n'+
						 '	<td>'+obj1s[j].checkedRequire+'</td>\n'+
						 '	<td>'+obj1s[j].isAchieve+'</td>\n'+
						 '	<td>'+obj1s[j].checkedContent+'</td>\n'+
						 '	<td>'+obj1s[j].operatorName+'</td>\n'+
						 '	<td>'+date+'</td>\n'+
						 '</tr>\n';
			}
						
			$("#fileManage").append(tableObj);
		}
		var obj2s = objs[i].files;
		showDate(obj2s,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode);
	}
	
	$(".kv-file-content").css("display","none");
	$(".hidden").css("display","none");
	$(".file-drag-handle").css("display","none");
	$(".file-caption-info").css("overflow","inherit");
	$(".file-caption-info").css("height","10px");
	$(".file-footer-caption").css("float","left");
	$(".file-footer-caption").css("margin-bottom","0");
	$(".file-thumbnail-footer").css("height","30px");
	$(".file-actions").css("float","left");
	$(".file-caption-info").removeClass("file-caption-info");
	$(".file-size-info").removeClass("file-size-info");
}

function initFileManage1(shangchuanButton,yulanButton,deleteButton,uploadButton,tagCode,id){
	var objs = getCheckedByFormId();//所有检查点
	var tableObj='<h3 class="CCFubiaoTitle" style="display: block; font-size: 18px; text-align: left; height: 36px; line-height: 33px; padding-left: 16px; color: rgb(102, 102, 102); cursor: pointer; margin: 0px;">检查点管理</h3>\n'+
				 '<div class="wrapper wrapper-content animated fadeInRight testCheckedWall" style="padding-top:0" id="testCheckedWall">\n'+
				 '</div>\n';
	$("#"+id).after(tableObj);
	for(var i=0;i<objs.length;i++){
		var e = 'Checked'+objs[i].point.id;
		var obj1s = getCheckedPointById(objs[i].point.id);//检查点下所有要求及附件信息
		var checkedObj =	 '<div class="row" style="margin-left:0;margin-top:10px;text-align:left;margin-right:0px"  id="'+e+'">\n'+
							 '	 <div class="col-md-12 col-sm-12 col-lg-12 singleShow" style="border:1px solid #e7eaec;padding-top:5px;background-color: #FFF;">\n'+
							 '			 <div class="col-sm-11">\n'+
							 '				 <h3 style="margin-top:0;color:#000000;font-size:14px" title="'+objs[i].point.checkedName+'"><strong>'+objs[i].point.checkedName+'</strong></h3>\n'+
							 '				 <ul class="checkPoint" id="checkPoint'+objs[i].point.id+'" style="padding-left:0"></ul>\n'+
							 '				<div class="row cell" style="border:0">\n'+
							 '					<div class="col-sm-12 animated fadeInRight">\n'+
							 '						<div class="row">\n'+
							 '							<div id="file_wall_view" class="col-sm-12" style="padding-left:0">\n'+
							 '								<input id="file-es-'+i+'" name="file-es[]" type="file" multiple/>\n'+
							 '								<input id="file-zh-'+i+'" name="file-zh[]" type="file" multiple/>\n'+
							 '								<input class="checkedId" type="hidden" value="'+objs[i].point.id+'"/>\n'+
							 '							</div>\n'+
							 '						</div>\n'+
							 '					</div>\n'+
							 '				</div>\n'+
							 '			 </div>\n'+
							 '	 </div>\n'+
							 '</div>\n';
		$("#testCheckedWall").append(checkedObj);					 
		for(var j=0;j<obj1s.length;j++){
			var tableObj='';
			var date = new Date(obj1s[j].operatorTime).Format("yyyy-MM-dd");
			var checkbox ;
            if(obj1s[j].isAchieve=='Y'){
            	checkbox = $('<li><input type="checkbox" onclick="changeChecked(this)" checked="checked"><input class="checkedPointId" type="hidden" value="'+obj1s[j].id+'"/><label>'+obj1s[j].checkedRequire+','+obj1s[j].checkedContent+','+obj1s[j].operatorName+','+date+'</label></li>');
            }else{
            	checkbox = $('<li><input type="checkbox" onclick="changeChecked(this)"><input class="checkedPointId" type="hidden" value="'+obj1s[j].id+'"/><label>'+obj1s[j].checkedRequire+','+obj1s[j].checkedContent+','+obj1s[j].operatorName+','+date+'</label></li>');
            }
			$("#checkPoint"+objs[i].point.id).append(checkbox);
		}
		var obj2s = objs[i].files;
		showCheckedFileDate(obj2s,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode);
	}
}

function initFileManage3(shangchuanButton,yulanButton,deleteButton,uploadButton,tagCode,id,taskId,nodeId,procId){
	var objs = getCheckedByNodeId(taskId,nodeId,procId);//所有检查点
	var ckNum = objs.length;
	if(ckNum>0){
		var tableObj='<h3 class="CCFubiaoTitle" style="display: block; font-size: 18px; text-align: left; height: 36px; line-height: 33px; padding-left: 16px; color: rgb(102, 102, 102); cursor: pointer; margin: 0px;">当前检查点信息</h3>\n'+
					 '<div class="wrapper wrapper-content animated fadeInRight testCheckedWall" style="padding-top:0" id="testCheckedWall">\n'+
					 '</div>\n';
		$("#"+id).after(tableObj);
	}
	for(var i=0;i<objs.length;i++){
		var checked = objs[i].checked;
		var objs1 = objs[i].pFiles;//检查点下所有要求及附件信息
		var checkedObj =	 '<div class="row" style="margin-left:0;margin-top:10px;text-align:left;margin-right:0px">\n'+
							 '	 <div class="col-md-12 col-sm-12 col-lg-12 singleShow" style="border:1px solid #e7eaec;padding:15px 0;background-color: #FFF;">\n'+
							 '			 <div class="col-sm-11">\n'+
							 '				 <h3 style="margin-top:0;color:#000000;font-size:14px" title="'+checked.checkedName+'"><strong>'+checked.checkedName+'</strong></h3>\n'+
							 '				 <ul class="checkPoint" id="checkPoint'+checked.id+'" style="padding-left:0"></ul>\n'+
							 '			 </div>\n'+
							 '	 </div>\n'+
							 '</div>\n';
		$("#testCheckedWall").append(checkedObj);					 
		for(var j=0;j<objs1.length;j++){
			var point = objs1[j].point;
			var tableObj='';
			var date = new Date(point.operatorTime).Format("yyyy-MM-dd");
			var checkbox ;
			var e = "checkPoint-"+point.id+"-"+i;
			//var requireHtml = "<div style='width:16px;height:12px;float:left'></div>";
			var isRequire = "false";
			if(objs1[j].point.isRequire=='Y'){
				//requireHtml = "<span class='glyphicon glyphicon-asterisk' style='color:red;font-size:12px'></span>";
				isRequire = "true";
			}
			var choosePointName = "choosePoint-"+i+"-"+j;
			var pointId = point.id;
			var pointResultId = '';
			var result1 = '';
			var result2 = '';
			if(objs1[j].pointResult!=null&&objs1[j].pointResult!=undefined){
				pointResultId = objs1[j].pointResult.id
				if(objs1[j].pointResult.pointType=='checkBox'){
					if(objs1[j].pointResult.checkResult=='Y'){
						result1 = 'checked="checked"';
					}else{
						result2 = 'checked="checked"';
					}
				}
			}
			
			if(point.isFile=='Y'){
				if(point.controlType=='checkBox'){
	        		checkbox = $('<li ><div class="checkPoint checkBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
	        					 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result1+' onclick="changeChecked_ACT(this,\'radio\',\''+taskId+'\',\''+pointId+'\')" value="yes">是'+
		       					 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result2+' onclick="changeChecked_ACT(this,\'radio\',\''+taskId+'\',\''+pointId+'\')" value="no">否    '+point.checkedRequire+';'+point.checkedContent+
		       					 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
								 '		<span title="附件管理" class="glyphicon glyphicon-folder-close" onclick="openFileWall(this)"></span>'+
		       					 '			<div class="col-sm-12 animated fadeInRight checkedPointFileWall">\n'+
								 '				<div class="row">\n'+
								 '					<div id="file_wall_view" class="col-sm-12" style="padding-left:0">\n'+
								 '						<input id="file-es-'+pointId+'-'+i+'" name="file-es[]" type="file" multiple/>\n'+
								 '						<input id="file-zh-'+pointId+'-'+i+'" name="file-zh[]" type="file" multiple/>\n'+
								 '					</div>\n'+
								 '				</div>\n'+
								 '			</div>\n'+
		       					 '		</div>'+
		       					 '</li>');
				}else if(point.controlType=='textBox'){
	        		//checkbox = $('<li><div class="checkPoint"><span title="填写审批" class="glyphicon glyphicon-plus"></span><input class="checkedPointId" type="hidden" value="'+point.id+'"/><label style="margin:0 5px">'+point.checkedRequire+','+point.checkedContent+','+point.operatorName+','+date+'</label><span title="附件管理" class="glyphicon glyphicon-folder-close"></span></div></li>');
	        		checkbox = $('<li><div class="checkPoint textBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
		        				 '		<span title="填写审批" class="glyphicon glyphicon-plus" onclick="changeChecked_ACT(this,\'textBox\',\''+taskId+'\',\''+pointId+'\')"></span>'+
		        				 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
		        				 '		<textarea class="CheckResult" type="hidden" value="'+pointResultCheckResult+'"></textarea>\n'+
								 '		<input class="checkedPointId" type="hidden" value="'+pointId+'"/>'+point.checkedRequire+';'+point.checkedContent+
								 '		<span title="附件管理" class="glyphicon glyphicon-folder-close" onclick="openFileWall(this)"></span>'+
		       					 '			<div class="col-sm-12 animated fadeInRight checkedPointFileWall">\n'+
								 '				<div class="row">\n'+
								 '					<div id="file_wall_view" class="col-sm-12" style="padding-left:0">\n'+
								 '						<input id="file-es-'+pointId+'-'+i+'" name="file-es[]" type="file" multiple/>\n'+
								 '						<input id="file-zh-'+pointId+'-'+i+'" name="file-zh[]" type="file" multiple/>\n'+
								 '					</div>\n'+
								 '				</div>\n'+
								 '			</div>\n'+
		       					 '		</div>'+
		       					 '</li>');
				}
	            	
				$("#checkPoint"+checked.id).append(checkbox);
				var obj2s = objs1[j].files;
				
				showCheckedFileDate_ACT(obj2s,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode,nodeId+"_"+procId+","+pointId);
			}else{
				if(point.controlType=='checkBox'){
					checkbox = $('<li><div class="checkPoint checkBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
								 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result1+' onclick="changeChecked_ACT(this,\'radio\',\''+taskId+'\',\''+pointId+'\')" value="yes">是'+
		       					 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result2+' onclick="changeChecked_ACT(this,\'radio\',\''+taskId+'\',\''+pointId+'\')" value="no">否   '+point.checkedRequire+';'+point.checkedContent+
		       					 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
		       					 '		</div>'+
  					 			 '</li>');
				}else if(point.controlType=='textBox'){
	        		checkbox = $('<li><div class="checkPoint textBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
	        					 '		<span title="填写审批" class="glyphicon glyphicon-plus" onclick="changeChecked_ACT(this,\'textBox\',\''+taskId+'\',\''+pointId+'\')"></span>'+
		       					 '		<input class="checkedPointId" type="hidden" value="'+pointId+'"/>'+point.checkedRequire+';'+point.checkedContent+
		       					 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
		       					 '		<textarea class="CheckResult" type="hidden" value="'+pointResultCheckResult+'"></textarea>\n'+
								 '		</div>'+
		       					 '</li>');
							 
				}
				$("#checkPoint"+checked.id).append(checkbox);
			}
		}
	}
	var datas = getCheckedHisByNodeId(taskId,procId);//所有检查点
	for(var x=datas.length-1;x>-1;x--){
		var objs = datas[x].objs;
		var userName = '';
		if(objs[0].pFiles[0].pointResult!=null){
			userName = '('+getUsernameById(objs[0].pFiles[0].pointResult.operatorName)+'    '+new Date(objs[0].pFiles[0].pointResult.operatorTime).Format("yyyy/MM/dd")+')'
		}
		var tableObj='<h3 class="CCFubiaoTitle" style="display: block; font-size: 18px; text-align: left; height: 36px; line-height: 33px; padding-left: 16px; color: rgb(102, 102, 102); cursor: pointer; margin: 0px;">'+datas[x].nodeName+userName+'</h3>\n'+
					 '<div class="wrapper wrapper-content animated fadeInRight testCheckedWall" style="padding-top:0" id="testCheckedWall'+x+'">\n'+
					 '</div>\n';
		if(x==datas.length-1){
			/*if(ckNum>0){
				$("#testCheckedWall").after(tableObj);
			}else{*/
				$("#"+id).after(tableObj);
//			}
		}else{
			$("#testCheckedWall"+(x+1)).after(tableObj);
		}
		
		for(var i=0;i<objs.length;i++){
			var checked = objs[i].checked;
			var objs1 = objs[i].pFiles;//检查点下所有要求及附件信息
			var checkedObj =	 '<div class="row" style="margin-left:0;margin-top:10px;text-align:left;margin-right:0px">\n'+
								 '	 <div class="col-md-12 col-sm-12 col-lg-12 singleShow" style="border:1px solid #e7eaec;padding:15px 0;background-color: #FFF;">\n'+
								 '			 <div class="col-sm-11">\n'+
								 '				 <h3 style="margin-top:0;color:#000000;font-size:14px" title="'+checked.checkedName+'"><strong>'+checked.checkedName+'</strong></h3>\n'+
								 '				 <ul class="checkPointHis" id="checkPointHis'+checked.id+'" style="padding-left:0"></ul>\n'+
								 '			 </div>\n'+
								 '	 </div>\n'+
								 '</div>\n';
			$("#testCheckedWall"+x).append(checkedObj);					 
			for(var j=0;j<objs1.length;j++){
				var point = objs1[j].point;
				var tableObj='';
				var date = new Date(point.operatorTime).Format("yyyy-MM-dd");
				var checkbox ;
				var e = "checkPoint-"+point.id+"-"+i;
				//var requireHtml = "<div style='width:16px;height:12px;float:left'></div>";
				var isRequire = "false";
				if(objs1[j].point.isRequire=='Y'){
					//requireHtml = "<span class='glyphicon glyphicon-asterisk' style='color:red;font-size:12px'></span>";
					isRequire = "true";
				}
				var choosePointName = "choosePoint-"+i+"-"+j;
				var pointId = point.id;
				var pointResultId = '';
				var result1 = '';
				var result2 = '';
				if(objs1[j].pointResult!=null&&objs1[j].pointResult!=undefined){
					pointResultId = objs1[j].pointResult.id
					if(objs1[j].pointResult.pointType=='checkBox'){
						if(objs1[j].pointResult.checkResult=='Y'){
							result1 = 'checked="checked"';
						}else{
							result2 = 'checked="checked"';
						}
					}
				}
				
				if(point.isFile=='Y'){
					if(point.controlType=='checkBox'){
		        		checkbox = $('<li ><div class="checkPoint checkBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
		        					 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result1+' disabled value="yes">是'+
			       					 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result2+' disabled value="no">否    '+point.checkedRequire+';'+point.checkedContent+
			       					 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
									 '		<span title="附件管理" class="glyphicon glyphicon-folder-close" onclick="openFileWall(this)"></span>'+
			       					 '			<div class="col-sm-12 animated fadeInRight checkedPointFileWall">\n'+
									 '				<div class="row">\n'+
									 '					<div id="file_wall_view" class="col-sm-12" style="padding-left:0">\n'+
									 '						<input id="file-es-'+pointId+'-'+i+'" name="file-es[]" type="file" multiple/>\n'+
									 '						<input id="file-zh-'+pointId+'-'+i+'" name="file-zh[]" type="file" multiple/>\n'+
									 '					</div>\n'+
									 '				</div>\n'+
									 '			</div>\n'+
			       					 '		</div>'+
			       					 '</li>');
					}else if(point.controlType=='textBox'){
		        		//checkbox = $('<li><div class="checkPoint"><span title="填写审批" class="glyphicon glyphicon-plus"></span><input class="checkedPointId" type="hidden" value="'+point.id+'"/><label style="margin:0 5px">'+point.checkedRequire+','+point.checkedContent+','+point.operatorName+','+date+'</label><span title="附件管理" class="glyphicon glyphicon-folder-close"></span></div></li>');
		        		checkbox = $('<li><div class="checkPoint textBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
			        				 '		<span title="填写审批" class="glyphicon glyphicon-plus" onclick="changeChecked_ACT(this,\'textBox\',\''+taskId+'\',\''+pointId+'\')"></span>'+
			        				 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
			        				 '		<textarea class="CheckResult" type="hidden" value="'+pointResultCheckResult+'"></textarea>\n'+
									 '		<input class="checkedPointId" type="hidden" value="'+pointId+'"/>'+point.checkedRequire+';'+point.checkedContent+
									 '		<span title="附件管理" class="glyphicon glyphicon-folder-close" onclick="openFileWall(this)"></span>'+
			       					 '			<div class="col-sm-12 animated fadeInRight checkedPointFileWall">\n'+
									 '				<div class="row">\n'+
									 '					<div id="file_wall_view" class="col-sm-12" style="padding-left:0">\n'+
									 '						<input id="file-es-'+pointId+'-'+i+'" name="file-es[]" type="file" multiple/>\n'+
									 '						<input id="file-zh-'+pointId+'-'+i+'" name="file-zh[]" type="file" multiple/>\n'+
									 '					</div>\n'+
									 '				</div>\n'+
									 '			</div>\n'+
			       					 '		</div>'+
			       					 '</li>');
					}
		            	
					$("#checkPointHis"+checked.id).append(checkbox);
					var obj2s = objs1[j].files;
					showCheckedFileDate_ACT(obj2s,e,true,false,true,false,tagCode,nodeId+"_"+procId+","+pointId);
				}else{
					if(point.controlType=='checkBox'){
						checkbox = $('<li><div class="checkPoint checkBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
									 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result1+' disabled value="yes">是'+
			       					 '		<input type="radio" class="choosePoint" name="'+choosePointName+'" '+result2+' disabled value="no">否   '+point.checkedRequire+';'+point.checkedContent+
			       					 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
			       					 '		</div>'+
	  					 			 '</li>');
					}else if(point.controlType=='textBox'){
		        		checkbox = $('<li><div class="checkPoint textBoxPoint" isRequire="'+isRequire+'" id="checkPoint-'+pointId+'-'+i+'">'+
		        					 '		<span title="填写审批" class="glyphicon glyphicon-plus" onclick="changeChecked_ACT(this,\'textBox\',\''+taskId+'\',\''+pointId+'\')"></span>'+
			       					 '		<input class="checkedPointId" type="hidden" value="'+pointId+'"/>'+point.checkedRequire+';'+point.checkedContent+
			       					 '		<input class="pointResultId" type="hidden" value="'+pointResultId+'"/>\n'+
			       					 '		<textarea class="CheckResult" type="hidden" value="'+pointResultCheckResult+'"></textarea>\n'+
									 '		</div>'+
			       					 '</li>');
					}
					$("#checkPointHis"+checked.id).append(checkbox);
				}
			}
		}
	}
}

function initFileManage2(shangchuanButton,yulanButton,deleteButton,uploadButton,tagCode,id,numLimit,sizeLimit,typeLimit,objType,objId){
	var objs = getFileByObj(objType,objId);//所有检查点
	var tableObj='<h3 class="CCFubiaoTitle" style="display: block; font-size: 18px; text-align: left; height: 36px; line-height: 33px; padding-left: 16px; color: rgb(102, 102, 102); cursor: pointer; margin: 0px;">表单附件管理</h3>\n'+
				 '<div class="wrapper wrapper-content animated fadeInRight" style="padding-top:0;margin-bottom:50px" id="testCheckedWall">\n'+
				 '</div>\n';
	$("#"+id).after(tableObj);
	var checkedObj = '<div class="row" style="margin-left:0;margin-top:10px;text-align:left;margin-right:0px"  id="checkedFileManage">\n'+
					 '	 <div class="col-md-12 col-sm-12 col-lg-12 singleShow" style="border:1px solid #e7eaec;padding-top:5px;background-color: #FFF;">\n'+
					 '			 <div class="col-sm-11">\n'+
					 '				<div class="row cell" style="border:0">\n'+
					 '					<div class="col-sm-12 animated fadeInRight">\n'+
					 '						<div class="row">\n'+
					 '							<div id="file_wall_view" class="col-sm-12" style="padding-left:0">\n'+
					 '								<input id="file-es" name="file-es[]" type="file" multiple/>\n'+
					 '								<input id="file-zh" name="file-zh[]" type="file" multiple/>\n'+
					 '							</div>\n'+
					 '						</div>\n'+
					 '					</div>\n'+
					 '				</div>\n'+
					 '			 </div>\n'+
					 '	 </div>\n'+
					 '</div>\n';
	$("#testCheckedWall").append(checkedObj);
	showFormDate(objs,'checkedFileManage',true,true,true,true,tagCode,numLimit,sizeLimit,typeLimit,objType,objId);
}

function changeFileCss(){
//	$(".file-drop-zone-title").css("display","none");
	$(".file-drop-zone").css("height","auto");
	$(".clearfix").css("display","none !important");
	$(".kv-file-content").css("display","none");
	$(".hidden").css("display","none");
	$(".file-drag-handle").css("display","none");
	$(".file-caption-info").css("overflow","inherit");
	$(".file-caption-info").css("height","10px");
	$(".file-footer-caption").css("float","left");
	$(".file-footer-caption").css("margin-bottom","0");
	$(".file-footer-caption").css("line-height","0");
	$(".file-thumbnail-footer").css("height","30px");
	$(".file-actions").css("float","right");
	$(".file-caption-info").removeClass("file-caption-info");
	$(".file-size-info").removeClass("file-size-info");
	$("li").css("list-style-type","none");
	$(".file-preview-thumbnails").css("align-items","initial");
	$(".file-footer-buttons").find("button").removeClass("btn-kv");
	$(".file-footer-buttons").find("button").addClass("btn-lg");
	$(".fileinput-remove").css("display","none");
	$(".file-preview").css("border","none");
	$(".testCheckedWall .row").css("padding","0");
	$("#testFormWall .row").css("padding","0");
	$(".fileinput-cancel-button").css("display","none");
}
var showType = "all";
var folder = "all";
var tags = "";
var switchType = "view";
//文件下载
function showCheckedFileDate(arr,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode) {
	var previewSrcArr = [];
	var configArr = [];
	var checkedId = $("#"+e+" .checkedId").val();
	if(arr!=null){
		for (var i = arr.length - 1; i >= 0; i--) {
			previewSrcArr[i]=arr[i].filepath;
			var obj = {};
			obj.caption = arr[i].filename+'_'+arr[i].fileid;
			obj.type = arr[i].clientfilename;
			if(obj.type=='video'){
				obj.filetype="video/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			if(obj.type=='audio'){
				obj.filetype="audio/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			obj.size = arr[i].file_size;
			obj.key = i;
			configArr[i] = obj;
		}
	}
	var deleteButtonAC = '';
	var uploadButtonAC = '';
	var yulanButtonAC = '';
	if(deleteButton){
		deleteButtonAC = '<button type="button" class="kv-file-remove btn btn-kv btn-default btn-outline-secondary" {dataKey} title="删除附件" onclick="deleteAction(this,\''+checkedId+'\',\'checked\')"><i class="glyphicon glyphicon-trash"></i></button>';
	}
	if(uploadButton){
		uploadButtonAC = '<button type="button" class="kv-file-down btn btn-kv btn-default" {dataKey} title="下载附件" onclick="getFileData(this)"><i class="fa fa-cloud-download"></i></button>';
	}
	if(yulanButton){
		yulanButtonAC = '<i class="glyphicon glyphicon-king"></i>';
	}
	
	//文件预览
	$("#"+e).find("[name='file-es[]']").fileinput({
		theme: 'fa',
		language: 'zh',
		showUpload: false,
		showCaption: false,
		browseClass: "btn btn-primary btn-lg hidden",
		fileType: "any",
		previewFileIcon: true,
		overwriteInitial: false,
		showRemove:false,
		initialPreviewAsData: true,
		initialPreview: previewSrcArr,
		initialPreviewConfig:configArr,
		allowedPreviewTypes:'',
		otherActionButtons:uploadButtonAC,
		layoutTemplates:{
			actionDelete:deleteButtonAC,
		}
	});
	if(!shangchuanButton){
		$("button").remove(".kv-file-zoom");
	}
	if(shangchuanButton){
		$("#"+e).find("[name='file-zh[]']").fileinput({
			theme: 'fa',
			language: 'zh',
			showPreview :false,
			showCaption:false,
			allowedFileExtensions : null,
			//uploadExtraData:expandParams(),
			maxFileCount:1, //表示允许同时上传的最大文件个数newFileUp
			uploadUrl: "/myehr/FileList/checkedPoint_newFileUp.action?objType=checkedAndForm&tag="+tags+"&checkedId="+checkedId+"&objId="+realFormId//上传的地址,执行上传文件和更新检查点文件的操作
		}).on("fileuploaded", function(event, data) {
			window.location.reload();
		})
		$("#"+e).find("[name='file-zh[]']").on('filebatchselected', function(event, data, previewId, index) {
			  var content = "<div id='batchUp' class='row cell' style='border:none;line-height:25px;height:95%;overflow:auto;' >\n"+
							"<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n"+
							"<h5 class=\"tag-title\">标签</h5>\n"+
							"<input id=\"tag\" name=\"tag\" type=\"hidden\"/>\n"+
							"<div id=\"fileManage_tagType\">\n"+
							"</div>\n"+
							"</div>\n"+
							"</div>\n";
			layer.open({
				title:'输入内容',
				shadeClose: true,
				zIndex:9999,
				content: content,
				area: ['500px', '300px'],
				btn: ['确定', '取消'],
				success: function(layero, index){
					addHtml(tagCode,'fileManage_tagType');
				},
				yes: function(index, layero){
					layer.close(index);
				  
				},
				btn2: function(index, layero){
				 
				}
			});
		});
	}else{
		$("#"+e).find("[name='file-zh[]']").css("display","none");
	}
}

var hisTask;
function getHisTask(){
	var procInsId = param_procInsId;
	$.ajax({
		url:'/myehr/act/task/queryHisApproveUser.action?procInsId='+procInsId,
		type:'post',
		contentType: 'application/json;charset=utf-8',
		async: false,
		success: function (datas) {
			hisTask = datas;
		}
	});
}


function submit2(buttonType){
	if(checkedPointRequire()){
		if(buttonType=='通过'){
			content = "<textarea id='approveRemark' rows='7' cols='63' ></textarea>";
		}else if(buttonType=='驳回'){
			getHisTask();
			var datas = hisTask;
			content = "<div style='margin-bottom:10px'>驳回方式<select id='rejectType' >";
			content+= "<option value ='previousNode'>驳回到上节点</option>";
			content+= "<option value ='startUser'>驳回到申请人</option>";
			content+= "<option value ='free'>自由驳回到已审批节点</option>";
			content+= "</select></div>";
			content += "<div style='margin-bottom:10px'>驳回节点<select id='rejectNode' >";
			for(var i=0;i<datas.length;i++){
				content+="<option value ='"+datas[i].taskId+"'>"+datas[i].ACTNAME+"</option>";
			}
			content+="</select></div>";
			content += "<textarea id='approveRemark' rows='7' cols='63' ></textarea>";
		}else{
			saveData(buttonType,'','');
			return;
		}
		layer.open({
			title:'请填写审批意见',
			shadeClose: true,
			offset: 't',
			zIndex:9999,
			content: content,
			area: ['500px', '300px'],
			btn: ['确定', '取消'],
			yes:function(index, layero){
				var approveRemark=document.getElementById("approveRemark").value;
				var rejectType;
				if(buttonType=='驳回'){
					rejectType=document.getElementById("rejectType").value;
				}
				layer.close(index);
				submit5('2815',buttonType,approveRemark,rejectType);
				//saveData(buttonType,approveRemark,rejectType);
			},
		})
	}else{
		layer.alert('有必选的指标未勾选', {
  		  	  offset:'50%',
		      shift: 6,
			  icon: 5,//1:√;2:×;3:问号;4:锁;5:哭脸;6.笑脸;7:！;
			  skin: 'layer-ext-moon' 
			})
	}
}
function saveData(buttonType,approveRemark,rejectType){
	var paramsMap = {};
	var _param = {};
	_param.formId=formId_main;
	_param.buttonId=2815;
	_param = cardGetdata_main('#checkButton_main',formId_main);
	_param.paramsMap = paramsMap;
	if(checkNull($("#MainElement").find("form"))){
		return false;
	}else{
		$.ajax({
			url:'/myehr/form/saveButtonSave.action',
			type:'post',
			data: JSON.stringify(_param),
			cache: false,
			contentType: 'application/json;charset=utf-8',
			success: function (text) {
				if(text[0]!=0){
					alert("保存失败！");
				}else if(text[0]=='error'){
					alert("操作异常");
				}else {
					submit5(_param.buttonId,buttonType,approveRemark,rejectType);
				}
			}
		});
	}
}
function submit3(){
	var paramsMap = {};
	var _param = {};
	paramsMap.bussinessId = mainTable_Id;
	_param.formId=formId_main;
	_param.buttonId=2815;
	_param = cardGetdata_main_act('#checkButton_main',formId_main);
	_param.paramsMap = paramsMap;
	_param.actFlowParams= {key:param_key};
	$.ajax({
		url:'/myehr/act/task/start.action',
		type:'post',
		data: JSON.stringify(_param),
		cache: false,
		contentType: 'application/json;charset=utf-8',
		success: function (text) {
			if(text[0]==0){
				alert("保存失败");
			}else if(text[0]=='error'){
				alert("操作异常");
			}else {
				alert("操作成功");
				closex();
			}
		}
	});
}
function submit5(buttonId,buttonType,approveRemark,rejectType){
	var flowAction = param_flowAction;
	if(flowAction=='start'){
		submit3(buttonId);
	}else{
		submit4(buttonId,buttonType,approveRemark,rejectType);
	}
}

function animationHover(element, animation) {
    element = $(element);
    element.hover(
        function () {
            element.addClass('animated ' + animation);
        },
        function () {
            //动画完成之前移除class
            window.setTimeout(function () {
                element.removeClass('animated ' + animation);
            }, 2000);
        });
}

function approveList(){
	var procInsId = param_procInsId;
	$.ajax({
		url:'/myehr/act/task/queryApproveList.action?procInsId='+procInsId,
		type:'post',
		contentType: 'application/json;charset=utf-8',
        cache: false,
		success: function (text) {
			showDate(text)
		}
	});
}

function approveList1(){
	var pkId = '${param.pkId}';
	$.ajax({
		url:'/myehr/form/quertFreeCommitByPkId.action?pkId='+pkId,
		type:'post',
		contentType: 'application/json;charset=utf-8',
       cache: false,
		success: function (text) {
			showFreeData(text)
		}
	});
}

function showFreeData(arr) {
    for (var i = arr.length - 1; i >= 0; i--) {
	     var iconClass;
	     if(arr[i].freeProcessApprove=="pass"){
	         iconClass='vertical-timeline-icon';
	     }else{
	         iconClass='vertical-timeline-icon1';
	     }
		 var cellObj = $('<div class="vertical-timeline-block">'+
						'    <div class="'+iconClass+'"></div>'+
						'    <div class="vertical-timeline-content clearfix">'+
						'        <div class="pic fl" style="float:left">'+
						'            <img src="http://p.3761.com/pic/43701399945993.png" alt="">'+
						'            <div id="shenpiren" class="shenpirens">'+arr[i].freeProcessApproveUser+'</div>'+
						'        </div>'+
						'        <div class="content fl">'+
						'            <div class="clearfix"></div>'+
						'		     <div class="shenpizhuangtai">'+arr[i].freeProcessApprove+'</div>'+
						'	     </div>'+
						'	     <div class="clearfix"></div>'+
						'    </div>'+
						'    <div id="shenpijieguo" class="shenpijieguo">'+
						'        <div id="shenpishijian" style="font-weight:bold;float:left" class="shenpishijian">'+arr[i].freeProcessApproveTime+'</div>'+
						'        <div id="shenpijiedian" style="font-weight:bold;float:left" class="shenpijiedian">'+arr[i].freeProcessApproveUser+'</div>'+
						'        <div id="shenpiyijian" style="font-weight:bold;float:left" class="shenpiyijian">'+arr[i].freeProcessCommit+'</div>'+
						'    </div>'+
						'</div>'
		);
		$('#approveList').append(cellObj);
	}
}


function submit4(buttonId,buttonType,approveRemark,rejectType){
    var flowAction = param_flowAction;
    if(flowAction=='start'){
	    var paramsMap = {};
	    var _param = {};
	    _param.formId=2504;
	    _param.buttonId=buttonId;
	    _param =  cardGetdata_main_act('#checkButton_main',formId_main);
	    _param.paramsMap = paramsMap;
	    _param.actFlowParams= {key:param_key};
	    $.ajax({
		     url:'/myehr/act/task/start.action',
		     type:'post',
		     data: JSON.stringify(_param),
		     cache: false,
		     contentType: 'application/json;charset=utf-8',
		     success: function (text) {
			     if(text[0]==0){
				     alert("保存失败！");
			     }else if(text[0]=='error'){
				     alert("操作异常");
			     }else {
				     alert("操作成功");
				     closex();
			     }
		     }
	     });
    }else{
	     var paramsMap = {};
	     var _param = {};
	     _param.formId=2504;
	     _param.buttonId=buttonId;
	     _param =  cardGetdata_main('#checkButton_main',formId_main);
	     _param.paramsMap = paramsMap;
	     _param.actFlowParams= {taskId:param_taskId,procInsId:param_procInsId,buttonType:buttonType,approveRemark:approveRemark,rejectType:rejectType};
	     $.ajax({
		     url:'/myehr/act/task/complete.action',
		     type:'post',
		     data: JSON.stringify(_param),
		     cache: false,
		     contentType: 'application/json;charset=utf-8',
		     success: function (text) {
			     if(text[0]==0){
				     alert("保存失败！");
			     }else if(text[0]=='error'){
				     alert("操作异常");
			     }else {
				     alert("操作成功");
				     closex_2504();
			     }
		     }
	     });
    }
}
function approveChange(){
	var objS = document.getElementById("EMP_EMPLOYEE.APPROVE_TYPE");
    var value = objS.options[objS.selectedIndex].value;
	if(value=='approveReject'){
		document.getElementById("EMP_EMPLOYEE.REJECT_TYPE").disabled=false;
	}else{
		document.getElementById("EMP_EMPLOYEE.REJECT_TYPE").disabled=true;
		document.getElementById("EMP_EMPLOYEE.REJECT_TYPE").value="";
	}	
}
function rejectChange(){
	var objS = document.getElementById("EMP_EMPLOYEE.REJECT_TYPE");
    var value = objS.options[objS.selectedIndex].value;
	 if(value=='free'){
		var paramsMap = {};
		var _param = {};
		var approveType = document.getElementById("EMP_EMPLOYEE.APPROVE_TYPE").value;
		var rejectType = document.getElementById("EMP_EMPLOYEE.REJECT_TYPE").value;
		var bz = document.getElementById("bz").value;
		_param.formId=formId_main;
		_param.buttonId='';
		_param.paramsMap = paramsMap;
		_param.actFlowParams= {taskId:param_taskId,procInsId:param_procInsId,approveType:approveType,rejectType:rejectType,bz:bz};
		$.ajax({
			url:'/myehr/act/task/freeTask.action',
			type:'post',
			data: JSON.stringify(_param),
			cache: false,
			contentType: 'application/json;charset=utf-8',
			success: function (text) {
				var html = '';
				var opationhtml = '';
				for (var i=0;i<text.length;i++){
					opationhtml+="<option value =\""+text[i].actId+"\">"+text[i].actName+"</option>";
				}
				html+="<select id=\"EMP_EMPLOYEE.REJECT_TASK\" disabled=\"false\" title=\"驳回节点\" styleType=\"select\" name=\"REJECT_TASK\"  class=\"form-control\" style=\"width:200px;height:25px;\">"+opationhtml+"</select>";
				$("#solutionList").html(html);
				document.getElementById("EMP_EMPLOYEE.REJECT_TASK").disabled=false;
			}
		});
	}else{
		document.getElementById("EMP_EMPLOYEE.REJECT_TASK").disabled=true;
		document.getElementById("EMP_EMPLOYEE.REJECT_TASK").value="";
	}
}

function deleteAction(e,checkedId,type){
	var obj = $(e).parent().parent().parent().find(".file-footer-caption").eq(0);
	var title = obj.attr("title").split("_");
	var id = title[title.length-1];
	if(type=='checked'){
		$.ajax({
		    url: "/myehr/FileList/checkedPoint_deleteFile.action?fileId="+id+"&checkedId="+checkedId+"&formId="+realFormId,
		    type: 'post',
		    cache: false,
		    async: false,
		    success:function(msg){  
                if(msg[0]=="0"){  
                	layer.alert('删除成功', {
                		  offset:'50%',
              		      shift: 6,
						  icon: 6,//1:√;2:×;3:问号;4:锁;5:哭脸;6.笑脸;7:！;
						  skin: 'layer-ext-moon' 
						})
					$(e).parent().parent().parent().parent().remove();
                }else{  
                	layer.alert('删除失败', {
                		  offset:'50%',
              		  	  shift: 6,
						  icon: 5,//1:√;2:×;3:问号;4:锁;5:哭脸;6.笑脸;7:！;
						  skin: 'layer-ext-moon' 
						})
                }   
            }
		});
	}else if(type=='form'){
		$.ajax({
		    url: "/myehr/FileList/form_deleteFile.action?fileId="+id+"&formId="+realFormId,
		    type: 'post',
		    cache: false,
		    async: false,
		    success:function(msg){  
                if(msg[0]=="0"){  
                	layer.alert('删除成功', {
                		  offset:'50%',
              		      shift: 6,
						  icon: 6,//1:√;2:×;3:问号;4:锁;5:哭脸;6.笑脸;7:！;
						  skin: 'layer-ext-moon' 
						})
					$(e).parent().parent().parent().parent().remove();
                }else{  
                	layer.alert('删除失败', {
                		  offset:'50%',
              		  	  shift: 6,
						  icon: 5,//1:√;2:×;3:问号;4:锁;5:哭脸;6.笑脸;7:！;
						  skin: 'layer-ext-moon' 
						})
                }   
            }
		});
	}
	//window.location.reload();
}

function cardSelectInitFunctionx(){
	var classes = [];
	if(''=='APP'){
		$("input").each(function(){
			if($(this).attr('dataField') != undefined){
				classes.push($(this)[0]);
			}
		})
	}else{
		classes = $("select");
	}
	var columns = [];
	for(var i=0;i<classes.length;i++){
		var column = {};
		column.formColumnId = parseInt($(classes[i]).attr("columnid"));//字段ID
		column.formColumnShowType = $(classes[i]).attr("shownullitem");//是否空值
		column.formColumnUsName = $(classes[i]).attr("dictname");//字典编码
		column.formColumnGuiType = $(classes[i]).attr("datafield1");//字典类型
		columns[i] = column;
	}
	var datas = getselectdatasAll(columns);
	for(var j=0;j<datas.length;j++){
		var data = datas[j];
		for(var i=0;i<data.length;i++){
			document.getElementById(classes[j].id).options.add(new Option(data[i].name,data[i].code));
		}
	}
	$('.selectpicker').selectpicker('refresh');
}

function cardSelectInitFunctionx_grid(){
	var classes = [];
	if(''=='APP'){
		$("input").each(function(){
			if($(this).attr('dataField') != undefined){
				classes.push($(this)[0]);
			}
		})
	}else{
		classes = $("select");
	}
	var columns = [];
	for(var i=0;i<classes.length;i++){
		var column = {};
		column.formColumnId = parseInt($(classes[i]).attr("columnid"));//字段ID
		column.formColumnShowType = $(classes[i]).attr("shownullitem");//是否空值
		column.formColumnUsName = $(classes[i]).attr("dictname");//字典编码
		column.formColumnGuiType = $(classes[i]).attr("datafield1");//字典类型
		columns[i] = column;
	}
	var datas = getselectdatasAll(columns);
	for(var j=0;j<datas.length;j++){
		var data = datas[j];
		document.getElementById(classes[j].id).options.add(new Option("请选择",""));
		for(var i=0;i<data.length;i++){
			document.getElementById(classes[j].id).options.add(new Option(data[i].name,data[i].code));
		}
	}
	$('.selectpicker').selectpicker('refresh');
}

function getselectdatasAll(e){
	var dictDatas;
	$.ajax({ 
	   url:'/myehr/dict/getselectdatasAll.action',
	   type:'post',
	   cache: false,
	   async: false,
	   contentType: 'application/json;charset=utf-8',
	   data: JSON.stringify(e),
	   success: function (datas){ 
		dictDatas = datas;
	   }
   });
   return dictDatas;
}

function getRealRule(e){
	var myDate = new Date();
	var vl1 = myDate.getYear();        //获取当前年份(2位)
	var vl2 = myDate.getFullYear();    //获取完整的年份(4位,1970-????)
	var vl3 = myDate.getMonth()+1;       //获取当前月份(0-11,0代表1月)
	var vl4 = myDate.getDate();        //获取当前日(1-31)
	var vl5 = myDate.getDay();         //获取当前星期X(0-6,0代表星期天)
	var vl6 = myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)
	var vl7 = myDate.getHours();       //获取当前小时数(0-23)
	var vl8 = myDate.getMinutes();     //获取当前分钟数(0-59)
	var vl9 = myDate.getSeconds();     //获取当前秒数(0-59)
	var vl10 = myDate.getMilliseconds();    //获取当前毫秒数(0-999)
	var vl11 = myDate.toLocaleDateString();     //获取当前日期
	var mytime=myDate.toLocaleTimeString();     //获取当前时间
	var vl12 = myDate.toLocaleString( );        //获取日期与时间
	if(vl3<10){
		vl3 = "0"+vl3;
	}
	if(e!=undefined){
		e = e.replace("[YYYY]",vl2);
		e = e.replace("[MM]",vl3);
		e = e.replace("[DD]",vl4);
		e = e.replace("[hh]",vl7);
		e = e.replace("[mm]",vl8);
		e = e.replace("[ss]",vl9);
		e = e.replace("[YY]",vl1);
	}else{
		return "";
	}
	return e;
}

var columnvisible={};
function initRoleColumn(columnFormId){
    var url = '/myehr/form/queryCardFormColumnsWithUserId.action?formId='+columnFormId;
    $.ajax({
        url:url,
        type:'post',
        cache: false,
        async: false,
        contentType:'application/json',
        success:function(datas){
            for(var i=0;i<datas.length;i++){
                if(datas[i].formColumnUsName==1||datas[i].formColumnUsName==2){
                    if(datas[i].formColumnType==1){
                        var entityTablename = datas[i].formEntityTablename;
                        var fieldTablename = datas[i].formFieldTablename;
                        var columnName=entityTablename.replace(/_/g,'')+'_'+fieldTablename;
                        columnvisible[columnName]=true;
                    }else{
                        columnvisible[fieldTablename]=true;
                    }
                }else{
                    if(datas[i].formColumnType==1){
                        var entityTablename = datas[i].formEntityTablename;
                        var fieldTablename = datas[i].formFieldTablename;
                        var columnName=entityTablename.replace(/_/g,'')+'_'+fieldTablename;
                        columnvisible[columnName]=false;
                    }else{
                        columnvisible[fieldTablename]=true;
                    }
                }
            }
        }
    });
}

/*jquery.uploadify.h5.min.js*/
     	(function ($) {
     	    $.fn.Huploadify = function (opts) {
     	        var itemTemp = '<div id="${fileID}" class="uploadify-queue-item"><div class="uploadify-progress"><div class="uploadify-progress-bar"></div></div><span class="up_filename">${fileName}</span><a href="javascript:void(0);" class="uploadbtn">上传</a><a href="javascript:void(0);" class="delfilebtn">删除</a></div>';
     	        var defaults = {
     	            fileTypeExts: '*.*',//允许上传的文件类型，格式'*.jpg;*.doc'
     	            uploader: '',//文件提交的地址
     	            auto: false,//是否开启自动上传
     	            method: 'post',//发送请求的方式，get或post
     	            multi: true,//是否允许选择多个文件
     	            formData: null,//发送给服务端的参数，格式：{key1:value1,key2:value2}
     	            fileObjName: 'file',//在后端接受文件的参数名称，如PHP中的$_FILES['file']
     	            fileSizeLimit: 2048,//允许上传的文件大小，单位KB
     	            showUploadedPercent: true,//是否实时显示上传的百分比，如20%
     	            showUploadedSize: false,//是否实时显示已上传的文件大小，如1M/2M
     	            buttonText: '选择文件',//上传按钮上的文字
     	            removeTimeout: 1000,//上传完成后进度条的消失时间，单位毫秒
     	            itemTemplate: itemTemp,//上传队列显示的模板
     	            onUploadStart: null,//上传开始时的动作
     	            onUploadSuccess: null,//上传成功的动作
     	            onUploadComplete: null,//上传完成的动作
     	            onUploadError: null, //上传失败的动作
     	            onInit: null,//初始化时的动作
     	            onCancel: null,//删除掉某个文件后的回调函数，可传入参数file
     	            onClearQueue: null,//清空上传队列后的回调函数，在调用cancel并传入参数*时触发
     	            onDestroy: null,//在调用destroy方法时触发
     	            onSelect: null,//选择文件后的回调函数，可传入参数file
     	            onQueueComplete: null//队列中的所有文件上传完成后触发
     	        }

     	        var option = $.extend(defaults, opts);

     	        //定义一个通用函数集合
     	        var F = {
     	            //将文件的单位由bytes转换为KB或MB，若第二个参数指定为true，则永远转换为KB
     	            formatFileSize: function (size, withKB) {
     	                if (size > 1024 * 1024 && !withKB) {
     	                    size = (Math.round(size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
     	                }
     	                else {
     	                    size = (Math.round(size * 100 / 1024) / 100).toString() + 'KB';
     	                }
     	                return size;
     	            },
     	            //将输入的文件类型字符串转化为数组,原格式为*.jpg;*.png
     	            getFileTypes: function (str) {
     	                var result = [];
     	                var arr1 = str.split(";");
     	                for (var i = 0, len = arr1.length; i < len; i++) {
     	                    result.push(arr1[i].split(".").pop());
     	                }
     	                return result;
     	            },
     	            ////根据文件序号获取文件
     	            getFile: function (index, files) {
     	                for (var i = 0; i < files.length; i++) {
     	                    if (files[i].index == index) {
     	                        return files[i];
     	                    }
     	                }
     	                return null;
     	            }
     	        };

     	        var returnObj = null;

     	        this.each(function (index, element) {
     	            var _this = $(element);
     	            var instanceNumber = $('.uploadify').length + 1;
     	            var uploadManager = {
     	                container: _this,
     	                filteredFiles: [],//过滤后的文件数组
     	                init: function () {
     	                    var inputStr = '<input id="select_btn_' + instanceNumber + '" class="selectbtn" style="display:none;" type="file" name="fileselect[]"';
     	                    inputStr += option.multi ? ' multiple' : '';
     	                    inputStr += ' accept="';
     	                    inputStr += F.getFileTypes(option.fileTypeExts).join(",");
     	                    inputStr += '"/>';
     	                    inputStr += '<a id="file_upload_' + instanceNumber + '-button" href="javascript:void(0)" class="uploadify-button">';
     	                    inputStr += option.buttonText;
     	                    inputStr += '</a>';
     	                    var uploadFileListStr = '<div id="file_upload_' + instanceNumber + '-queue" class="uploadify-queue"></div>';
     	                    _this.append(inputStr + uploadFileListStr);

     	                    //初始化返回的实例
     	                    returnObj = {
     	                        instanceNumber: instanceNumber,
     	                        upload: function (fileIndex) {
     	                            if (fileIndex === '*') {
     	                                for (var i = 0, len = uploadManager.filteredFiles.length; i < len; i++) {
     	                                    uploadManager._uploadFile(uploadManager.filteredFiles[i]);
     	                                }
     	                            }
     	                            else {
     	                                var file = F.getFile(fileIndex, uploadManager.filteredFiles);
     	                                file && uploadManager._uploadFile(file);
     	                            }
     	                        },
     	                        cancel: function (fileIndex) {
     	                            if (fileIndex === '*') {
     	                                var len = uploadManager.filteredFiles.length;
     	                                for (var i = len - 1; i >= 0; i--) {
     	                                    uploadManager._deleteFile(uploadManager.filteredFiles[i]);
     	                                }
     	                                option.onClearQueue && option.onClearQueue(len);
     	                            }
     	                            else {
     	                                var file = F.getFile(fileIndex, uploadManager.filteredFiles);
     	                                file && uploadManager._deleteFile(file);
     	                            }
     	                        },
     	                        disable: function (instanceID) {
     	                            var parent = instanceID ? $('file_upload_' + instanceID + '-button') : $('body');
     	                            parent.find('.uploadify-button').css('background-color', '#888').off('click');
     	                        },
     	                        ennable: function (instanceID) {
     	                            //点击上传按钮时触发file的click事件
     	                            var parent = instanceID ? $('file_upload_' + instanceID + '-button') : $('body');
     	                            parent.find('.uploadify-button').css('background-color', '#707070').on('click', function () {
     	                                parent.find('.selectbtn').trigger('click');
     	                            });
     	                        },
     	                        destroy: function () {
     	                            uploadManager.container.html('');
     	                            uploadManager = null;
     	                            option.onDestroy && option.onDestroy();
     	                        },
     	                        settings: function (name, value) {
     	                            if (arguments.length == 1) {
     	                                return option[name];
     	                            }
     	                            else {
     	                                if (name == 'formData') {
     	                                    option.formData = $.extend(option.formData, value);
     	                                }
     	                                else {
     	                                    option[name] = value;
     	                                }
     	                            }
     	                        },
     	                        Huploadify: function () {
     	                            var method = arguments[0];
     	                            if (method in this) {
     	                                Array.prototype.splice.call(arguments, 0, 1);
     	                                this[method].apply(this[method], arguments);
     	                            }
     	                        }
     	                    };

     	                    //文件选择控件选择
     	                    var fileInput = this._getInputBtn();
     	                    if (fileInput.length > 0) {
     	                        fileInput.change(function (e) {
     	                            uploadManager._getFiles(e);
     	                        });
     	                    }

     	                    //点击选择文件按钮时触发file的click事件
     	                    _this.find('.uploadify-button').on('click', function () {
     	                        _this.find('.selectbtn').trigger('click');
     	                    });

     	                    option.onInit && option.onInit(returnObj);
     	                },
     	                _filter: function (files) {		//选择文件组的过滤方法
     	                    var arr = [];
     	                    var typeArray = F.getFileTypes(option.fileTypeExts);
     	                    if (typeArray.length > 0) {
     	                        for (var i = 0, len = files.length; i < len; i++) {
     	                            var f = files[i];
     	                            if (parseInt(F.formatFileSize(f.size, true)) <= option.fileSizeLimit) {
     	                                if ($.inArray('*', typeArray) >= 0 || $.inArray(f.name.split('.').pop(), typeArray) >= 0) {
     	                                    arr.push(f);
     	                                }
     	                                else {
     	                                    alert('文件 "' + f.name + '" 类型不允许！');
     	                                }
     	                            }
     	                            else {
     	                                alert('文件 "' + f.name + '" 大小超出限制！');
     	                                continue;
     	                            }
     	                        }
     	                    }
     	                    return arr;
     	                },
     	                _getInputBtn: function () {
     	                    return _this.find('.selectbtn');
     	                },
     	                _getFileList: function () {
     	                    return _this.find('.uploadify-queue');
     	                },
     	                //根据选择的文件，渲染DOM节点
     	                _renderFile: function (file) {
     	                    var $html = $(option.itemTemplate.replace(/\${fileID}/g, 'fileupload_' + instanceNumber + '_' + file.index).replace(/\${fileName}/g, file.name).replace(/\${fileSize}/g, F.formatFileSize(file.size)).replace(/\${instanceID}/g, _this.attr('id')));
     	                    //如果是非自动上传，显示上传按钮
     	                    if (!option.auto) {
     	                        $html.find('.uploadbtn').css('display', 'inline-block');
     	                    }
     	                    uploadManager._getFileList().append($html);

     	                    //判断是否显示已上传文件大小
     	                    if (option.showUploadedSize) {
     	                        var num = '<span class="progressnum"><span class="uploadedsize">0KB</span>/<span class="totalsize">${fileSize}</span></span>'.replace(/\${fileSize}/g, F.formatFileSize(file.size));
     	                        $html.find('.uploadify-progress').after(num);
     	                    }

     	                    //判断是否显示上传百分比	
     	                    if (option.showUploadedPercent) {
     	                        var percentText = '<span class="up_percent">0%</span>';
     	                        $html.find('.uploadify-progress').after(percentText);
     	                    }

     	                    //触发select动作
     	                    option.onSelect && option.onSelect(file);

     	                    //判断是否是自动上传
     	                    if (option.auto) {
     	                        uploadManager._uploadFile(file);
     	                    }
     	                    else {
     	                        //如果配置非自动上传，绑定上传事件
     	                        $html.find('.uploadbtn').on('click', function () {
     	                            if (!$(this).hasClass('.disabledbtn')) {
     	                                $(this).addClass('.disabledbtn');
     	                                uploadManager._uploadFile(file);
     	                            }
     	                        });
     	                    }

     	                    //为删除文件按钮绑定删除文件事件
     	                    $html.find('.delfilebtn').on('click', function () {
     	                        if (!$(this).hasClass('.disabledbtn')) {
     	                            $(this).addClass('.disabledbtn');
     	                            uploadManager._deleteFile(file);
     	                        }
     	                    });
     	                },
     	                //获取选择后的文件
     	                _getFiles: function (e) {
     	                    var files = e.target.files;
     	                    files = uploadManager._filter(files);
     	                    var fileCount = _this.find('.uploadify-queue .uploadify-queue-item').length;//队列中已经有的文件个数
     	                    for (var i = 0, len = files.length; i < len; i++) {
     	                        files[i].index = ++fileCount;
     	                        files[i].status = 0;//标记为未开始上传
     	                        uploadManager.filteredFiles.push(files[i]);
     	                        var l = uploadManager.filteredFiles.length;
     	                        uploadManager._renderFile(uploadManager.filteredFiles[l - 1]);
     	                    }
     	                },
     	                //删除文件
     	                _deleteFile: function (file) {
     	                    for (var i = 0, len = uploadManager.filteredFiles.length; i < len; i++) {
     	                        var f = uploadManager.filteredFiles[i];
     	                        if (f.index == file.index) {
     	                            uploadManager.filteredFiles.splice(i, 1);
     	                            _this.find('#fileupload_' + instanceNumber + '_' + file.index).fadeOut();
     	                            option.onCancel && option.onCancel(file);
     	                            break;
     	                        }
     	                    }
     	                },
     	                //校正上传完成后的进度条误差
     	                _regulateView: function (file) {
     	                    var thisfile = _this.find('#fileupload_' + instanceNumber + '_' + file.index);
     	                    thisfile.find('.uploadify-progress-bar').css('width', '100%');
     	                    option.showUploadedSize && thisfile.find('.uploadedsize').text(thisfile.find('.totalsize').text());
     	                    option.showUploadedPercent && thisfile.find('.up_percent').text('100%');
     	                },
     	                onProgress: function (file, loaded, total) {
     	                    var eleProgress = _this.find('#fileupload_' + instanceNumber + '_' + file.index + ' .uploadify-progress');
     	                    var percent = (loaded / total * 100).toFixed(2) + '%';
     	                    if (option.showUploadedSize) {
     	                        eleProgress.nextAll('.progressnum .uploadedsize').text(F.formatFileSize(loaded));
     	                        eleProgress.nextAll('.progressnum .totalsize').text(F.formatFileSize(total));
     	                    }
     	                    if (option.showUploadedPercent) {
     	                        eleProgress.nextAll('.up_percent').text(percent);
     	                    }
     	                    eleProgress.children('.uploadify-progress-bar').css('width', percent);
     	                },
     	                _allFilesUploaded: function () {
     	                    var queueData = {
     	                        uploadsSuccessful: 0,
     	                        uploadsErrored: 0
     	                    };
     	                    for (var i = 0, len = uploadManager.filteredFiles.length; i < len; i++) {
     	                        var s = uploadManager.filteredFiles[i].status;
     	                        if (s === 0 || s === 1) {
     	                            queueData = false;
     	                            break;
     	                        }
     	                        else if (s === 2) {
     	                            queueData.uploadsSuccessful++;
     	                        }
     	                        else if (s === 3) {
     	                            queueData.uploadsErrored++;
     	                        }
     	                    }
     	                    return queueData;
     	                },
     	                //上传文件
     	                _uploadFile: function (file) {
     	                    var xhr = null;
     	                    try {
     	                        xhr = new XMLHttpRequest();
     	                    } catch (e) {
     	                        xhr = ActiveXobject("Msxml12.XMLHTTP");
     	                    }
     	                    if (xhr.upload) {
     	                        // 上传中
     	                        xhr.upload.onprogress = function (e) {
     	                            uploadManager.onProgress(file, e.loaded, e.total);
     	                        };

     	                        xhr.onreadystatechange = function (e) {
     	                            if (xhr.readyState == 4) {
     	                                if (xhr.status == 200) {
     	                                    uploadManager._regulateView(file);
     	                                    file.status = 2;//标记为上传成功
     	                                    option.onUploadSuccess && option.onUploadSuccess(file, xhr.responseText);
     	                                    //在指定的间隔时间后删掉进度条
     	                                    setTimeout(function () {
     	                                        _this.find('#fileupload_' + instanceNumber + '_' + file.index).fadeOut();
     	                                    }, option.removeTimeout);
     	                                }
     	                                else {
     	                                    file.status = 3;//标记为上传失败
     	                                    option.onUploadError && option.onUploadError(file, xhr.responseText);
     	                                }
     	                                option.onUploadComplete && option.onUploadComplete(file, xhr.responseText);

     	                                //检测队列中的文件是否全部上传完成，执行onQueueComplete
     	                                if (option.onQueueComplete) {
     	                                    var queueData = uploadManager._allFilesUploaded();
     	                                    queueData && option.onQueueComplete(queueData);
     	                                }

     	                                //清除文件选择框中的已有值
     	                                uploadManager._getInputBtn().val('');
     	                            }
     	                        }

     	                        if (file.status === 0) {
     	                            file.status = 1;//标记为正在上传
     	                            option.onUploadStart && option.onUploadStart(file);
     	                            // 开始上传
     	                            xhr.open(option.method, option.uploader, true);
     	                            xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
     	                            var fd = new FormData();
     	                            fd.append(option.fileObjName, file);
     	                            if (option.formData) {
     	                                for (key in option.formData) {
     	                                    fd.append(key, option.formData[key]);
     	                                }
     	                            }
     	                            xhr.send(fd);
     	                        }

     	                    }
     	                }
     	            };

     	            uploadManager.init();
     	        });

     	        return returnObj;

     	    }
     	})(jQuery);
     
/*fileinput.js*/
     	/*!
     	 * bootstrap-fileinput v4.4.7
     	 * http://plugins.krajee.com/file-input
     	 *
     	 * Author: Kartik Visweswaran
     	 * Copyright: 2014 - 2017, Kartik Visweswaran, Krajee.com
     	 *
     	 * Licensed under the BSD 3-Clause
     	 * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
     	 */
     	(function (factory) {
     	    "use strict";
     	    //noinspection JSUnresolvedVariable
     	    if (typeof define === 'function' && define.amd) { // jshint ignore:line
     	        // AMD. Register as an anonymous module.
     	        define(['jquery'], factory); // jshint ignore:line
     	    } else { // noinspection JSUnresolvedVariable
     	        if (typeof module === 'object' && module.exports) { // jshint ignore:line
     	            // Node/CommonJS
     	            // noinspection JSUnresolvedVariable
     	            module.exports = factory(require('jquery')); // jshint ignore:line
     	        } else {
     	            // Browser globals
     	            factory(window.jQuery);
     	        }
     	    }
     	}(function ($) {
     	    "use strict";

     	    $.fn.fileinputLocales = {};
     	    $.fn.fileinputThemes = {};

     	    String.prototype.setTokens = function (replacePairs) {
     	        var str = this.toString(), key, re;
     	        for (key in replacePairs) {
     	            if (replacePairs.hasOwnProperty(key)) {
     	                re = new RegExp("\{" + key + "\}", "g");
     	                str = str.replace(re, replacePairs[key]);
     	            }
     	        }
     	        return str;
     	    };

     	    var $h, FileInput;

     	    // fileinput helper object for all global variables and internal helper methods
     	    //noinspection JSUnresolvedVariable
     	    $h = {
     	        FRAMES: '.kv-preview-thumb',
     	        SORT_CSS: 'file-sortable',
     	        OBJECT_PARAMS: '<param name="controller" value="true" />\n' +
     	        '<param name="allowFullScreen" value="true" />\n' +
     	        '<param name="allowScriptAccess" value="always" />\n' +
     	        '<param name="autoPlay" value="false" />\n' +
     	        '<param name="autoStart" value="false" />\n' +
     	        '<param name="quality" value="high" />\n',
     	        DEFAULT_PREVIEW: '<div class="file-preview-other">\n' +
     	        '<span class="{previewFileIconClass}">{previewFileIcon}</span>\n' +
     	        '</div>',
     	        MODAL_ID: 'kvFileinputModal',
     	        MODAL_EVENTS: ['show', 'shown', 'hide', 'hidden', 'loaded'],
     	        objUrl: window.URL || window.webkitURL,
     	        compare: function (input, str, exact) {
     	            return input !== undefined && (exact ? input === str : input.match(str));
     	        },
     	        isIE: function (ver) {
     	            // check for IE versions < 11
     	            if (navigator.appName !== 'Microsoft Internet Explorer') {
     	                return false;
     	            }
     	            if (ver === 10) {
     	                return new RegExp('msie\\s' + ver, 'i').test(navigator.userAgent);
     	            }
     	            var div = document.createElement("div"), status;
     	            div.innerHTML = "<!--[if IE " + ver + "]> <i></i> <![endif]-->";
     	            status = div.getElementsByTagName("i").length;
     	            document.body.appendChild(div);
     	            div.parentNode.removeChild(div);
     	            return status;
     	        },
     	        initModal: function ($modal) {
     	            var $body = $('body');
     	            if ($body.length) {
     	                $modal.appendTo($body);
     	            }
     	        },
     	        isEmpty: function (value, trim) {
     	            return value === undefined || value === null || value.length === 0 || (trim && $.trim(value) === '');
     	        },
     	        isArray: function (a) {
     	            return Array.isArray(a) || Object.prototype.toString.call(a) === '[object Array]';
     	        },
     	        ifSet: function (needle, haystack, def) {
     	            def = def || '';
     	            return (haystack && typeof haystack === 'object' && needle in haystack) ? haystack[needle] : def;
     	        },
     	        cleanArray: function (arr) {
     	            if (!(arr instanceof Array)) {
     	                arr = [];
     	            }
     	            return arr.filter(function (e) {
     	                return (e !== undefined && e !== null);
     	            });
     	        },
     	        spliceArray: function (arr, index) {
     	            var i, j = 0, out = [];
     	            if (!(arr instanceof Array)) {
     	                return [];
     	            }
     	            for (i = 0; i < arr.length; i++) {
     	                if (i !== index) {
     	                    out[j] = arr[i];
     	                    j++;
     	                }
     	            }
     	            return out;
     	        },
     	        getNum: function (num, def) {
     	            def = def || 0;
     	            if (typeof num === "number") {
     	                return num;
     	            }
     	            if (typeof num === "string") {
     	                num = parseFloat(num);
     	            }
     	            return isNaN(num) ? def : num;
     	        },
     	        hasFileAPISupport: function () {
     	            return !!(window.File && window.FileReader);
     	        },
     	        hasDragDropSupport: function () {
     	            var div = document.createElement('div');
     	            /** @namespace div.draggable */
     	            /** @namespace div.ondragstart */
     	            /** @namespace div.ondrop */
     	            return !$h.isIE(9) &&
     	                (div.draggable !== undefined || (div.ondragstart !== undefined && div.ondrop !== undefined));
     	        },
     	        hasFileUploadSupport: function () {
     	            return $h.hasFileAPISupport() && window.FormData;
     	        },
     	        hasBlobSupport: function () {
     	            try {
     	                return !!window.Blob && Boolean(new Blob());
     	            } catch (e) {
     	                return false;
     	            }
     	        },
     	        hasArrayBufferViewSupport: function () {
     	            try {
     	                return new Blob([new Uint8Array(100)]).size === 100;
     	            } catch (e) {
     	                return false;
     	            }
     	        },
     	        dataURI2Blob: function (dataURI) {
     	            //noinspection JSUnresolvedVariable
     	            var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder ||
     	                window.MSBlobBuilder, canBlob = $h.hasBlobSupport(), byteStr, arrayBuffer, intArray, i, mimeStr, bb,
     	                canProceed = (canBlob || BlobBuilder) && window.atob && window.ArrayBuffer && window.Uint8Array;
     	            if (!canProceed) {
     	                return null;
     	            }
     	            if (dataURI.split(',')[0].indexOf('base64') >= 0) {
     	                byteStr = atob(dataURI.split(',')[1]);
     	            } else {
     	                byteStr = decodeURIComponent(dataURI.split(',')[1]);
     	            }
     	            arrayBuffer = new ArrayBuffer(byteStr.length);
     	            intArray = new Uint8Array(arrayBuffer);
     	            for (i = 0; i < byteStr.length; i += 1) {
     	                intArray[i] = byteStr.charCodeAt(i);
     	            }
     	            mimeStr = dataURI.split(',')[0].split(':')[1].split(';')[0];
     	            if (canBlob) {
     	                return new Blob([$h.hasArrayBufferViewSupport() ? intArray : arrayBuffer], {type: mimeStr});
     	            }
     	            bb = new BlobBuilder();
     	            bb.append(arrayBuffer);
     	            return bb.getBlob(mimeStr);
     	        },
     	        arrayBuffer2String: function (buffer) {
     	            //noinspection JSUnresolvedVariable
     	            if (window.TextDecoder) {
     	                // noinspection JSUnresolvedFunction
     	                return new TextDecoder("utf-8").decode(buffer);
     	            }
     	            var array = Array.prototype.slice.apply(new Uint8Array(buffer)), out = '', i = 0, len, c, char2, char3;
     	            len = array.length;
     	            while (i < len) {
     	                c = array[i++];
     	                switch (c >> 4) { // jshint ignore:line
     	                    case 0:
     	                    case 1:
     	                    case 2:
     	                    case 3:
     	                    case 4:
     	                    case 5:
     	                    case 6:
     	                    case 7:
     	                        // 0xxxxxxx
     	                        out += String.fromCharCode(c);
     	                        break;
     	                    case 12:
     	                    case 13:
     	                        // 110x xxxx   10xx xxxx
     	                        char2 = array[i++];
     	                        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F)); // jshint ignore:line
     	                        break;
     	                    case 14:
     	                        // 1110 xxxx  10xx xxxx  10xx xxxx
     	                        char2 = array[i++];
     	                        char3 = array[i++];
     	                        out += String.fromCharCode(((c & 0x0F) << 12) | // jshint ignore:line
     	                            ((char2 & 0x3F) << 6) |  // jshint ignore:line
     	                            ((char3 & 0x3F) << 0)); // jshint ignore:line
     	                        break;
     	                }
     	            }
     	            return out;
     	        },
     	        isHtml: function (str) {
     	            var a = document.createElement('div');
     	            a.innerHTML = str;
     	            for (var c = a.childNodes, i = c.length; i--;) {
     	                if (c[i].nodeType === 1) {
     	                    return true;
     	                }
     	            }
     	            return false;
     	        },
     	        isSvg: function (str) {
     	            return str.match(/^\s*<\?xml/i) && (str.match(/<!DOCTYPE svg/i) || str.match(/<svg/i));
     	        },
     	        getMimeType: function (signature, contents, type) {
     	            switch (signature) {
     	                case "ffd8ffe0":
     	                case "ffd8ffe1":
     	                case "ffd8ffe2":
     	                    return 'image/jpeg';
     	                case '89504E47':
     	                    return 'image/png';
     	                case '47494638':
     	                    return 'image/gif';
     	                case '49492a00':
     	                    return 'image/tiff';
     	                case '52494646':
     	                    return 'image/webp';
     	                case '66747970':
     	                    return 'video/3gp';
     	                case '4f676753':
     	                    return 'video/ogg';
     	                case '1a45dfa3':
     	                    return 'video/mkv';
     	                case '000001ba':
     	                case '000001b3':
     	                    return 'video/mpeg';
     	                case '3026b275':
     	                    return 'video/wmv';
     	                case '25504446':
     	                    return 'application/pdf';
     	                case '25215053':
     	                    return 'application/ps';
     	                case '504b0304':
     	                case '504b0506':
     	                case '504b0508':
     	                    return 'application/zip';
     	                case '377abcaf':
     	                    return 'application/7z';
     	                case '75737461':
     	                    return 'application/tar';
     	                case '7801730d':
     	                    return 'application/dmg';
     	                default:
     	                    switch (signature.substring(0, 6)) {
     	                        case '435753':
     	                            return 'application/x-shockwave-flash';
     	                        case '494433':
     	                            return 'audio/mp3';
     	                        case '425a68':
     	                            return 'application/bzip';
     	                        default:
     	                            switch (signature.substring(0, 4)) {
     	                                case '424d':
     	                                    return 'image/bmp';
     	                                case 'fffb':
     	                                    return 'audio/mp3';
     	                                case '4d5a':
     	                                    return 'application/exe';
     	                                case '1f9d':
     	                                case '1fa0':
     	                                    return 'application/zip';
     	                                case '1f8b':
     	                                    return 'application/gzip';
     	                                default:
     	                                    return contents && !contents.match(/[^\u0000-\u007f]/) ? 'application/text-plain' : type;
     	                            }
     	                    }
     	            }
     	        },
     	        addCss: function ($el, css) {
     	            $el.removeClass(css).addClass(css);
     	        },
     	        getElement: function (options, param, value) {
     	            return ($h.isEmpty(options) || $h.isEmpty(options[param])) ? value : $(options[param]);
     	        },
     	        uniqId: function () {
     	            return Math.round(new Date().getTime()) + '_' + Math.round(Math.random() * 100);
     	        },
     	        htmlEncode: function (str) {
     	            return str.replace(/&/g, '&amp;')
     	                .replace(/</g, '&lt;')
     	                .replace(/>/g, '&gt;')
     	                .replace(/"/g, '&quot;')
     	                .replace(/'/g, '&apos;');
     	        },
     	        replaceTags: function (str, tags) {
     	            var out = str;
     	            if (!tags) {
     	                return out;
     	            }
     	            $.each(tags, function (key, value) {
     	                if (typeof value === "function") {
     	                    value = value();
     	                }
     	                out = out.split(key).join(value);
     	            });
     	            return out;
     	        },
     	        cleanMemory: function ($thumb) {
     	            var data = $thumb.is('img') ? $thumb.attr('src') : $thumb.find('source').attr('src');
     	            /** @namespace $h.objUrl.revokeObjectURL */
     	            $h.objUrl.revokeObjectURL(data);
     	        },
     	        findFileName: function (filePath) {
     	            var sepIndex = filePath.lastIndexOf('/');
     	            if (sepIndex === -1) {
     	                sepIndex = filePath.lastIndexOf('\\');
     	            }
     	            return filePath.split(filePath.substring(sepIndex, sepIndex + 1)).pop();
     	        },
     	        checkFullScreen: function () {
     	            //noinspection JSUnresolvedVariable
     	            return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement ||
     	                document.msFullscreenElement;
     	        },
     	        toggleFullScreen: function (maximize) {
     	            var doc = document, de = doc.documentElement;
     	            if (de && maximize && !$h.checkFullScreen()) {
     	                /** @namespace document.requestFullscreen */
     	                /** @namespace document.msRequestFullscreen */
     	                /** @namespace document.mozRequestFullScreen */
     	                /** @namespace document.webkitRequestFullscreen */
     	                /** @namespace Element.ALLOW_KEYBOARD_INPUT */
     	                if (de.requestFullscreen) {
     	                    de.requestFullscreen();
     	                } else if (de.msRequestFullscreen) {
     	                    de.msRequestFullscreen();
     	                } else if (de.mozRequestFullScreen) {
     	                    de.mozRequestFullScreen();
     	                } else if (de.webkitRequestFullscreen) {
     	                    de.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
     	                }
     	            } else {
     	                /** @namespace document.exitFullscreen */
     	                /** @namespace document.msExitFullscreen */
     	                /** @namespace document.mozCancelFullScreen */
     	                /** @namespace document.webkitExitFullscreen */
     	                if (doc.exitFullscreen) {
     	                    doc.exitFullscreen();
     	                } else if (doc.msExitFullscreen) {
     	                    doc.msExitFullscreen();
     	                } else if (doc.mozCancelFullScreen) {
     	                    doc.mozCancelFullScreen();
     	                } else if (doc.webkitExitFullscreen) {
     	                    doc.webkitExitFullscreen();
     	                }
     	            }
     	        },
     	        moveArray: function (arr, oldIndex, newIndex) {
     	            if (newIndex >= arr.length) {
     	                var k = newIndex - arr.length;
     	                while ((k--) + 1) {
     	                    arr.push(undefined);
     	                }
     	            }
     	            arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);
     	            return arr;
     	        },
     	        cleanZoomCache: function ($el) {
     	            var $cache = $el.closest('.kv-zoom-cache-theme');
     	            if (!$cache.length) {
     	                $cache = $el.closest('.kv-zoom-cache');
     	            }
     	            $cache.remove();
     	        },
     	        setOrientation: function (buffer, callback) {
     	            var scanner = new DataView(buffer), idx = 0, value = 1, // Non-rotated is the default
     	                maxBytes, uInt16, exifLength;
     	            if (scanner.getUint16(idx) !== 0xFFD8 || buffer.length < 2) { // not a proper JPEG
     	                if (callback) {
     	                    callback();
     	                }
     	                return;
     	            }
     	            idx += 2;
     	            maxBytes = scanner.byteLength;
     	            while (idx < maxBytes - 2) {
     	                uInt16 = scanner.getUint16(idx);
     	                idx += 2;
     	                switch (uInt16) {
     	                    case 0xFFE1: // Start of EXIF
     	                        exifLength = scanner.getUint16(idx);
     	                        maxBytes = exifLength - idx;
     	                        idx += 2;
     	                        break;
     	                    case 0x0112: // Orientation tag
     	                        value = scanner.getUint16(idx + 6, false);
     	                        maxBytes = 0; // Stop scanning
     	                        break;
     	                }
     	            }
     	            if (callback) {
     	                callback(value);
     	            }
     	        },
     	        validateOrientation: function (file, callback) {
     	            if (!window.FileReader || !window.DataView) {
     	                return; // skip orientation if pre-requisite libraries not supported by browser
     	            }
     	            var reader = new FileReader(), buffer;
     	            reader.onloadend = function () {
     	                buffer = reader.result;
     	                $h.setOrientation(buffer, callback);
     	            };
     	            reader.readAsArrayBuffer(file);
     	        },
     	        adjustOrientedImage: function ($img, isZoom) {
     	            var offsetContTop, offsetTop, newTop;
     	            if (!$img.hasClass('is-portrait-gt4')) {
     	                return;
     	            }
     	            if (isZoom) {
     	                $img.css({width: $img.parent().height()});
     	                return;
     	            } else {
     	                $img.css({height: 'auto', width: $img.height()});
     	            }
     	            offsetContTop = $img.parent().offset().top;
     	            offsetTop = $img.offset().top;
     	            newTop = offsetContTop - offsetTop;
     	            $img.css('margin-top', newTop);
     	        },
     	        closeButton: function (css) {
     	            css = css ? 'close ' + css : 'close';
     	            return '<button type="button" class="' + css + '" aria-label="Close">\n' +
     	                '  <span aria-hidden="true">&times;</span>\n' +
     	                '</button>';
     	        }
     	    };
     	    FileInput = function (element, options) {
     	        var self = this;
     	        self.$element = $(element);
     	        self.$parent = self.$element.parent();
     	        if (!self._validate()) {
     	            return;
     	        }
     	        self.isPreviewable = $h.hasFileAPISupport();
     	        self.isIE9 = $h.isIE(9);
     	        self.isIE10 = $h.isIE(10);
     	        if (self.isPreviewable || self.isIE9) {
     	            self._init(options);
     	            self._listen();
     	        }
     	        self.$element.removeClass('file-loading');
     	    };
     	    //noinspection JSUnusedGlobalSymbols
     	    FileInput.prototype = {
     	        constructor: FileInput,
     	        _cleanup: function () {
     	            var self = this;
     	            self.reader = null;
     	            self.formdata = {};
     	            self.uploadCount = 0;
     	            self.uploadStatus = {};
     	            self.uploadLog = [];
     	            self.uploadAsyncCount = 0;
     	            self.loadedImages = [];
     	            self.totalImagesCount = 0;
     	            self.ajaxRequests = [];
     	            self.clearStack();
     	            self.fileInputCleared = false;
     	            self.fileBatchCompleted = true;
     	            if (!self.isPreviewable) {
     	                self.showPreview = false;
     	            }
     	            self.isError = false;
     	            self.ajaxAborted = false;
     	            self.cancelling = false;
     	        },
     	        _init: function (options, refreshMode) {
     	            var self = this, f, $el = self.$element, $cont, t, tmp;
     	            self.options = options;
     	            $.each(options, function (key, value) {
     	                switch (key) {
     	                    case 'minFileCount':
     	                    case 'maxFileCount':
     	                    case 'minFileSize':
     	                    case 'maxFileSize':
     	                    case 'maxFilePreviewSize':
     	                    case 'resizeImageQuality':
     	                    case 'resizeIfSizeMoreThan':
     	                    case 'progressUploadThreshold':
     	                    case 'initialPreviewCount':
     	                    case 'zoomModalHeight':
     	                    case 'minImageHeight':
     	                    case 'maxImageHeight':
     	                    case 'minImageWidth':
     	                    case 'maxImageWidth':
     	                        self[key] = $h.getNum(value);
     	                        break;
     	                    default:
     	                        self[key] = value;
     	                        break;
     	                }
     	            });
     	            if (self.rtl) { // swap buttons for rtl
     	                tmp = self.previewZoomButtonIcons.prev;
     	                self.previewZoomButtonIcons.prev = self.previewZoomButtonIcons.next;
     	                self.previewZoomButtonIcons.next = tmp;
     	            }
     	            if (!refreshMode) {
     	                self._cleanup();
     	            }
     	            self.$form = $el.closest('form');
     	            self._initTemplateDefaults();
     	            self.uploadFileAttr = !$h.isEmpty($el.attr('name')) ? $el.attr('name') : 'file_data';
     	            t = self._getLayoutTemplate('progress');
     	            self.progressTemplate = t.replace('{class}', self.progressClass);
     	            self.progressCompleteTemplate = t.replace('{class}', self.progressCompleteClass);
     	            self.progressErrorTemplate = t.replace('{class}', self.progressErrorClass);
     	            self.dropZoneEnabled = $h.hasDragDropSupport() && self.dropZoneEnabled;
     	            self.isDisabled = $el.attr('disabled') || $el.attr('readonly');
     	            if (self.isDisabled) {
     	                $el.attr('disabled', true);
     	            }
     	            self.isAjaxUpload = $h.hasFileUploadSupport() && !$h.isEmpty(self.uploadUrl);
     	            self.isClickable = self.browseOnZoneClick && self.showPreview &&
     	                (self.isAjaxUpload && self.dropZoneEnabled || !$h.isEmpty(self.defaultPreviewContent));
     	            self.slug = typeof options.slugCallback === "function" ? options.slugCallback : self._slugDefault;
     	            self.mainTemplate = self.showCaption ? self._getLayoutTemplate('main1') : self._getLayoutTemplate('main2');
     	            self.captionTemplate = self._getLayoutTemplate('caption');
     	            self.previewGenericTemplate = self._getPreviewTemplate('generic');
     	            if (!self.imageCanvas && self.resizeImage && (self.maxImageWidth || self.maxImageHeight)) {
     	                self.imageCanvas = document.createElement('canvas');
     	                self.imageCanvasContext = self.imageCanvas.getContext('2d');
     	            }
     	            if ($h.isEmpty($el.attr('id'))) {
     	                $el.attr('id', $h.uniqId());
     	            }
     	            self.namespace = '.fileinput_' + $el.attr('id').replace(/-/g, '_');
     	            if (self.$container === undefined) {
     	                self.$container = self._createContainer();
     	            } else {
     	                self._refreshContainer();
     	            }
     	            $cont = self.$container;
     	            self.$dropZone = $cont.find('.file-drop-zone');
     	            self.$progress = $cont.find('.kv-upload-progress');
     	            self.$btnUpload = $cont.find('.fileinput-upload');
     	            self.$captionContainer = $h.getElement(options, 'elCaptionContainer', $cont.find('.file-caption'));
     	            self.$caption = $h.getElement(options, 'elCaptionText', $cont.find('.file-caption-name'));
     	            if (!$h.isEmpty(self.msgPlaceholder)) {
     	                f = $el.attr('multiple') ? self.filePlural : self.fileSingle;
     	                self.$caption.attr('placeholder', self.msgPlaceholder.replace('{files}', f));
     	            }
     	            self.$captionIcon = self.$captionContainer.find('.file-caption-icon');
     	            if (self.mainClass.indexOf('input-group-lg') > -1) {
     	                $h.addCss(self.$captionIcon, 'icon-lg');
     	            } else {
     	                self.$captionIcon.removeClass('icon-lg');
     	            }
     	            self.$previewContainer = $h.getElement(options, 'elPreviewContainer', $cont.find('.file-preview'));
     	            self.$preview = $h.getElement(options, 'elPreviewImage', $cont.find('.file-preview-thumbnails'));
     	            self.$previewStatus = $h.getElement(options, 'elPreviewStatus', $cont.find('.file-preview-status'));
     	            self.$errorContainer = $h.getElement(options, 'elErrorContainer', self.$previewContainer.find('.kv-fileinput-error'));
     	            self._validateDisabled();
     	            if (!$h.isEmpty(self.msgErrorClass)) {
     	                $h.addCss(self.$errorContainer, self.msgErrorClass);
     	            }
     	            if (!refreshMode) {
     	                self.$errorContainer.hide();
     	                self.previewInitId = "preview-" + $h.uniqId();
     	                self._initPreviewCache();
     	                self._initPreview(true);
     	                self._initPreviewActions();
     	                self._setFileDropZoneTitle();
     	                if (self.$parent.hasClass('file-loading')) {
     	                    self.$container.insertBefore(self.$parent);
     	                    self.$parent.remove();
     	                }
     	            }
     	            if ($el.attr('disabled')) {
     	                self.disable();
     	            }
     	            self._initZoom();
     	            if (self.hideThumbnailContent) {
     	                $h.addCss(self.$preview, 'hide-content');
     	            }
     	        },
     	        _initTemplateDefaults: function () {
     	            var self = this, tMain1, tMain2, tPreview, tFileIcon, tClose, tCaption, tBtnDefault, tBtnLink, tBtnBrowse,
     	                tModalMain, tModal, tProgress, tSize, tFooter, tActions, tActionDelete, tActionUpload, tActionDownload,
     	                tActionZoom, tActionDrag, tIndicator, tTagBef, tTagBef1, tTagBef2, tTagAft, tGeneric, tHtml, tImage,
     	                tText, tOffice, tVideo, tAudio, tFlash, tObject, tPdf, tOther, tZoomCache, vDefaultDim;
     	            tMain1 = '{preview}\n' +
     	                '<div class="kv-upload-progress kv-hidden"></div><div class="clearfix"></div>\n' +
     	                '<div class="input-group {class}">\n' +
     	                '  {caption}\n' +
     	                '<div class="input-group-btn">\n' +
     	                '      {remove}\n' +
     	                '      {cancel}\n' +
     	                '      {upload}\n' +
     	                '      {browse}\n' +
     	                '    </div>\n' +
     	                '</div>';
     	            tMain2 = '{preview}\n<div class="kv-upload-progress kv-hidden"></div>\n<div class="clearfix"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n';
     	            tPreview = '<div class="file-preview {class}">\n' +
     	                '    {close}' +
     	                '    <div class="{dropClass}">\n' +
     	                '    <div class="file-preview-thumbnails">\n' +
     	                '    </div>\n' +
     	                '    <div class="clearfix"></div>' +
     	                '    <div class="file-preview-status text-center text-success"></div>\n' +
     	                '    <div class="kv-fileinput-error"></div>\n' +
     	                '    </div>\n' +
     	                '</div>';
     	            tClose = $h.closeButton('fileinput-remove');
     	            tFileIcon = '<i class="glyphicon glyphicon-file"></i>';
     	            tCaption = '<div class="file-caption form-control {class}" tabindex="500">\n' +
     	                '  <span class="file-caption-icon"></span>\n' +
     	                '  <input class="file-caption-name" onkeydown="return false;" onpaste="return false;">\n' +
     	                '</div>';
     	            //noinspection HtmlUnknownAttribute
     	            tBtnDefault = '<button type="{type}" tabindex="500" title="{title}" class="{css}" ' +
     	                '{status}>{icon} {label}</button>';
     	            //noinspection HtmlUnknownAttribute
     	            tBtnLink = '<a href="{href}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</a>';
     	            //noinspection HtmlUnknownAttribute
     	            tBtnBrowse = '<div tabindex="500" class="{css}" {status}>{icon} {label}</div>';
     	            tModalMain = '<div id="' + $h.MODAL_ID + '" class="file-zoom-dialog modal fade" ' +
     	                'tabindex="-1" aria-labelledby="' + $h.MODAL_ID + 'Label"></div>';
     	            tModal = '<div class="modal-dialog modal-lg{rtl}" role="document">\n' +
     	                '  <div class="modal-content">\n' +
     	                '    <div class="modal-header">\n' +
     	                '      <h5 class="modal-title">{heading}</h5>\n' +
     	                '      <span class="kv-zoom-title"></span>\n' +
     	                '      <div class="kv-zoom-actions">{toggleheader}{fullscreen}{borderless}{close}</div>\n' +
     	                '    </div>\n' +
     	                '    <div class="modal-body">\n' +
     	                '      <div class="floating-buttons"></div>\n' +
     	                '      <div class="kv-zoom-body file-zoom-content {zoomFrameClass}"></div>\n' + '{prev} {next}\n' +
     	                '    </div>\n' +
     	                '  </div>\n' +
     	                '</div>\n';
     	            tProgress = '<div class="progress">\n' +
     	                '    <div class="{class}" role="progressbar"' +
     	                ' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n' +
     	                '        {status}\n' +
     	                '     </div>\n' +
     	                '</div>';
     	            tSize = ' <samp>({sizeText})</samp>';
     	            tFooter = '<div class="file-thumbnail-footer">\n' +
     	                '    <div class="file-footer-caption" title="{caption}">\n' +
     	                '        <div class="file-caption-info">{caption}</div>\n' +
     	                '        <div class="file-size-info">{size}</div>\n' +
     	                '    </div>\n' +
     	                '    {progress}\n{indicator}\n{actions}\n' +
     	                '</div>';
     	            tActions = '<div class="file-actions">\n' +
     	                '    <div class="file-footer-buttons">\n' +
     	                '        {download} {upload} {delete} {zoom} {other}' +
     	                '    </div>\n' +
     	                '</div>\n' +
     	                '{drag}\n' +
     	                '<div class="clearfix"></div>';
     	            //noinspection HtmlUnknownAttribute
     	            
//     	            tActionAddTag = '<button type="button" class="kv-file-remove {removeClass}" ' +
//     	            'title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n';
     	            
     	            tActionDelete = '<button type="button" class="kv-file-remove {removeClass}" ' +
     	                'title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n';
     	            tActionUpload = '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">' +
     	                '{uploadIcon}</button>';
     	            tActionDownload = '<button type="button" class="kv-file-download {downloadClass}" title="{downloadTitle}" ' +
     	                'data-url="{downloadUrl}" data-caption="{caption}">{downloadIcon}</button>';
     	            tActionZoom = '<button type="button" class="kv-file-zoom {zoomClass}" ' +
     	                'title="{zoomTitle}">{zoomIcon}</button>';
     	            tActionDrag = '<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>';
     	            tIndicator = '<div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>';
     	            tTagBef = '<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
     	                ' data-template="{template}"';
     	            tTagBef1 = tTagBef + '><div class="kv-file-content">\n';
     	            tTagBef2 = tTagBef + ' title="{caption}"><div class="kv-file-content">\n';
     	            tTagAft = '</div>{footer}\n</div>\n';
     	            tGeneric = '{content}\n';
     	            tHtml = '<div class="kv-preview-data file-preview-html" title="{caption}" {style}>{data}</div>\n';
     	            tImage = '<img src="{data}" class="file-preview-image kv-preview-data" title="{caption}" ' +
     	                'alt="{caption}" {style}>\n';
     	            tText = '<textarea class="kv-preview-data file-preview-text" title="{caption}" readonly {style}>' +
     	                '{data}</textarea>\n';
     	            tOffice = '<iframe class="kv-preview-data file-preview-office" ' +
     	                'src="https://docs.google.com/gview?url={data}&embedded=true" {style}></iframe>';
     	            tVideo = '<video class="kv-preview-data file-preview-video" controls {style}>\n' +
     	                '<source src="{data}" type="{type}">\n' + $h.DEFAULT_PREVIEW + '\n</video>\n';
     	            tAudio = '<audio class="kv-preview-data file-preview-audio" controls {style}>\n<source src="{data}" ' +
     	                'type="{type}">\n' + $h.DEFAULT_PREVIEW + '\n</audio>\n';
     	            tFlash = '<embed class="kv-preview-data file-preview-flash" src="{data}" type="application/x-shockwave-flash" {style}>\n';
     	            tPdf = '<embed class="kv-preview-data file-preview-pdf" src="{data}" type="application/pdf" {style}>\n';
     	            tObject = '<object class="kv-preview-data file-preview-object file-object {typeCss}" ' +
     	                'data="{data}" type="{type}" {style}>\n' + '<param name="movie" value="{caption}" />\n' +
     	                $h.OBJECT_PARAMS + ' ' + $h.DEFAULT_PREVIEW + '\n</object>\n';
     	            tOther = '<div class="kv-preview-data file-preview-other-frame" {style}>\n' + $h.DEFAULT_PREVIEW + '\n</div>\n';
     	            tZoomCache = '<div class="kv-zoom-cache" style="display:none">{zoomContent}</div>';
     	            vDefaultDim = {width: "100%", height: "100%", 'min-height': "480px"};
     	            self.defaults = {
     	                layoutTemplates: {
     	                    main1: tMain1,
     	                    main2: tMain2,
     	                    preview: tPreview,
     	                    close: tClose,
     	                    fileIcon: tFileIcon,
     	                    caption: tCaption,
     	                    modalMain: tModalMain,
     	                    modal: tModal,
     	                    progress: tProgress,
     	                    size: tSize,
     	                    footer: tFooter,
     	                    indicator: tIndicator,
     	                    actions: tActions,
     	                    actionDelete: tActionDelete,
     	                    actionUpload: tActionUpload,
     	                    actionDownload: tActionDownload,
     	                    actionZoom: tActionZoom,
     	                    actionDrag: tActionDrag,
     	                    btnDefault: tBtnDefault,
     	                    btnLink: tBtnLink,
     	                    btnBrowse: tBtnBrowse,
     	                    zoomCache: tZoomCache
     	                },
     	                previewMarkupTags: {
     	                    tagBefore1: tTagBef1,
     	                    tagBefore2: tTagBef2,
     	                    tagAfter: tTagAft
     	                },
     	                previewContentTemplates: {
     	                    generic: tGeneric,
     	                    html: tHtml,
     	                    image: tImage,
     	                    text: tText,
     	                    office: tOffice,
     	                    video: tVideo,
     	                    audio: tAudio,
     	                    flash: tFlash,
     	                    object: tObject,
     	                    pdf: tPdf,
     	                    other: tOther
     	                },
     	                allowedPreviewTypes: ['image', 'html', 'text', 'video', 'audio', 'flash', 'pdf', 'object'],
     	                previewTemplates: {},
     	                previewSettings: {
     	                    image: {width: "auto", height: "auto", 'max-width': "100%", 'max-height': "100%"},
     	                    html: {width: "213px", height: "160px"},
     	                    text: {width: "213px", height: "160px"},
     	                    office: {width: "213px", height: "160px"},
     	                    video: {width: "213px", height: "160px"},
     	                    audio: {width: "100%", height: "30px"},
     	                    flash: {width: "213px", height: "160px"},
     	                    object: {width: "213px", height: "160px"},
     	                    pdf: {width: "213px", height: "160px"},
     	                    other: {width: "213px", height: "160px"}
     	                },
     	                previewSettingsSmall: {
     	                    image: {width: "auto", height: "auto", 'max-width': "100%", 'max-height': "100%"},
     	                    html: {width: "100%", height: "160px"},
     	                    text: {width: "100%", height: "160px"},
     	                    office: {width: "100%", height: "160px"},
     	                    video: {width: "100%", height: "auto"},
     	                    audio: {width: "100%", height: "30px"},
     	                    flash: {width: "100%", height: "auto"},
     	                    object: {width: "100%", height: "auto"},
     	                    pdf: {width: "100%", height: "160px"},
     	                    other: {width: "100%", height: "160px"}
     	                },
     	                previewZoomSettings: {
     	                    image: {width: "auto", height: "auto", 'max-width': "100%", 'max-height': "100%"},
     	                    html: vDefaultDim,
     	                    text: vDefaultDim,
     	                    office: {width: "100%", height: "100%", 'max-width': "100%", 'min-height': "480px"},
     	                    video: {width: "auto", height: "100%", 'max-width': "100%"},
     	                    audio: {width: "100%", height: "30px"},
     	                    flash: {width: "auto", height: "480px"},
     	                    object: {width: "auto", height: "100%", 'max-width': "100%", 'min-height': "480px"},
     	                    pdf: vDefaultDim,
     	                    other: {width: "auto", height: "100%", 'min-height': "480px"}
     	                },
     	                fileTypeSettings: {
     	                    image: function (vType, vName) {
     	                        return ($h.compare(vType, 'image.*') && !$h.compare(vType, /(tiff?|wmf)$/i) ||
     	                            $h.compare(vName, /\.(gif|png|jpe?g)$/i));
     	                    },
     	                    html: function (vType, vName) {
     	                        return $h.compare(vType, 'text/html') || $h.compare(vName, /\.(htm|html)$/i);
     	                    },
     	                    office: function (vType, vName) {
     	                        return $h.compare(vType, /(word|excel|powerpoint|office|iwork-pages|tiff?)$/i) ||
     	                            $h.compare(vName, /\.(rtf|docx?|xlsx?|pptx?|pps|potx?|ods|odt|pages|ai|dxf|ttf|tiff?|wmf|e?ps)$/i);
     	                    },
     	                    text: function (vType, vName) {
     	                        return $h.compare(vType, 'text.*') || $h.compare(vName, /\.(xml|javascript)$/i) ||
     	                            $h.compare(vName, /\.(txt|md|csv|nfo|ini|json|php|js|css)$/i);
     	                    },
     	                    video: function (vType, vName) {
     	                        return $h.compare(vType, 'video.*') && ($h.compare(vType, /(ogg|mp4|mp?g|mov|webm|3gp)$/i) ||
     	                            $h.compare(vName, /\.(og?|mp4|webm|mp?g|mov|3gp)$/i));
     	                    },
     	                    audio: function (vType, vName) {
     	                        return $h.compare(vType, 'audio.*') && ($h.compare(vName, /(ogg|mp3|mp?g|wav)$/i) ||
     	                            $h.compare(vName, /\.(og?|mp3|mp?g|wav)$/i));
     	                    },
     	                    flash: function (vType, vName) {
     	                        return $h.compare(vType, 'application/x-shockwave-flash', true) || $h.compare(vName, /\.(swf)$/i);
     	                    },
     	                    pdf: function (vType, vName) {
     	                        return $h.compare(vType, 'application/pdf', true) || $h.compare(vName, /\.(pdf)$/i);
     	                    },
     	                    object: function () {
     	                        return true;
     	                    },
     	                    other: function () {
     	                        return true;
     	                    }
     	                },
     	                fileActionSettings: {
     	                    showRemove: true,
     	                    showUpload: true,
     	                    showDownload: true,
     	                    showZoom: true,
     	                    showDrag: true,
     	                    removeIcon: '<i class="glyphicon glyphicon-trash"></i>',
     	                    removeClass: 'btn btn-kv btn-default btn-outline-secondary',
     	                    removeErrorClass: 'btn btn-kv btn-danger',
     	                    removeTitle: 'Remove file',
     	                    uploadIcon: '<i class="glyphicon glyphicon-upload"></i>',
     	                    uploadClass: 'btn btn-kv btn-default btn-outline-secondary',
     	                    uploadTitle: 'Upload file',
     	                    uploadRetryIcon: '<i class="glyphicon glyphicon-repeat"></i>',
     	                    uploadRetryTitle: 'Retry upload',
     	                    downloadIcon: '<i class="glyphicon glyphicon-download"></i>',
     	                    downloadClass: 'btn btn-kv btn-default btn-outline-secondary',
     	                    downloadTitle: 'Download file',
     	                    zoomIcon: '<i class="glyphicon glyphicon-zoom-in"></i>',
     	                    zoomClass: 'btn btn-kv btn-default btn-outline-secondary',
     	                    zoomTitle: 'View Details',
     	                    dragIcon: '<i class="glyphicon glyphicon-move"></i>',
     	                    dragClass: 'text-info',
     	                    dragTitle: 'Move / Rearrange',
     	                    dragSettings: {},
     	                    indicatorNew: '<i class="glyphicon glyphicon-plus-sign text-warning"></i>',
     	                    indicatorSuccess: '<i class="glyphicon glyphicon-ok-sign text-success"></i>',
     	                    indicatorError: '<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',
     	                    indicatorLoading: '<i class="glyphicon glyphicon-hourglass text-muted"></i>',
     	                    indicatorNewTitle: 'Not uploaded yet',
     	                    indicatorSuccessTitle: 'Uploaded',
     	                    indicatorErrorTitle: 'Upload Error',
     	                    indicatorLoadingTitle: 'Uploading ...'
     	                }
     	            };
     	            $.each(self.defaults, function (key, setting) {
     	                if (key === 'allowedPreviewTypes') {
     	                    if (self.allowedPreviewTypes === undefined) {
     	                        self.allowedPreviewTypes = setting;
     	                    }
     	                    return;
     	                }
     	                self[key] = $.extend(true, {}, setting, self[key]);
     	            });
     	            self._initPreviewTemplates();
     	        },
     	        _initPreviewTemplates: function () {
     	            var self = this, cfg = self.defaults, tags = self.previewMarkupTags, tagBef, tagAft = tags.tagAfter;
     	            $.each(cfg.previewContentTemplates, function (key, value) {
     	                if ($h.isEmpty(self.previewTemplates[key])) {
     	                    tagBef = tags.tagBefore2;
     	                    if (key === 'generic' || key === 'image' || key === 'html' || key === 'text') {
     	                        tagBef = tags.tagBefore1;
     	                    }
     	                    self.previewTemplates[key] = tagBef + value + tagAft;
     	                }
     	            });
     	        },
     	        _initPreviewCache: function () {
     	            var self = this;
     	            self.previewCache = {
     	                data: {},
     	                init: function () {
     	                    var content = self.initialPreview;
     	                    if (content.length > 0 && !$h.isArray(content)) {
     	                        content = content.split(self.initialPreviewDelimiter);
     	                    }
     	                    self.previewCache.data = {
     	                        content: content,
     	                        config: self.initialPreviewConfig,
     	                        tags: self.initialPreviewThumbTags
     	                    };
     	                },
     	                count: function () {
     	                    return !!self.previewCache.data && !!self.previewCache.data.content ?
     	                        self.previewCache.data.content.length : 0;
     	                },
     	                get: function (i, isDisabled) {
     	                    var ind = 'init_' + i, data = self.previewCache.data, config = data.config[i],
     	                        content = data.content[i], previewId = self.previewInitId + '-' + ind, out, $tmp, cat, ftr,
     	                        fname, ftype, frameClass, asData = $h.ifSet('previewAsData', config, self.initialPreviewAsData),
     	                        parseTemplate = function (cat, dat, fn, ft, id, ftr, ind, fc, t) {
     	                            fc = ' file-preview-initial ' + $h.SORT_CSS + (fc ? ' ' + fc : '');
     	                            return self._generatePreviewTemplate(cat, dat, fn, ft, id, false, null, fc, ftr, ind, t);
     	                        };
     	                    if (!content) {
     	                        return '';
     	                    }
     	                    isDisabled = isDisabled === undefined ? true : isDisabled;
     	                    cat = $h.ifSet('type', config, self.initialPreviewFileType || 'generic');
     	                    fname = $h.ifSet('filename', config, $h.ifSet('caption', config));
     	                    ftype = $h.ifSet('filetype', config, cat);
     	                    ftr = self.previewCache.footer(i, isDisabled, (config && config.size || null));
     	                    frameClass = $h.ifSet('frameClass', config);
     	                    if (asData) {
     	                        out = parseTemplate(cat, content, fname, ftype, previewId, ftr, ind, frameClass);
     	                    } else {
     	                        out = parseTemplate('generic', content, fname, ftype, previewId, ftr, ind, frameClass, cat)
     	                            .setTokens({'content': data.content[i]});
     	                    }
     	                    if (data.tags.length && data.tags[i]) {
     	                        out = $h.replaceTags(out, data.tags[i]);
     	                    }
     	                    /** @namespace config.frameAttr */
     	                    if (!$h.isEmpty(config) && !$h.isEmpty(config.frameAttr)) {
     	                        $tmp = $(document.createElement('div')).html(out);
     	                        $tmp.find('.file-preview-initial').attr(config.frameAttr);
     	                        out = $tmp.html();
     	                        $tmp.remove();
     	                    }
     	                    return out;
     	                },
     	                add: function (content, config, tags, append) {
     	                    var data = self.previewCache.data, index;
     	                    if (!$h.isArray(content)) {
     	                        content = content.split(self.initialPreviewDelimiter);
     	                    }
     	                    if (append) {
     	                        index = data.content.push(content) - 1;
     	                        data.config[index] = config;
     	                        data.tags[index] = tags;
     	                    } else {
     	                        index = content.length - 1;
     	                        data.content = content;
     	                        data.config = config;
     	                        data.tags = tags;
     	                    }
     	                    self.previewCache.data = data;
     	                    return index;
     	                },
     	                set: function (content, config, tags, append) {
     	                    var data = self.previewCache.data, i, chk;
     	                    if (!content || !content.length) {
     	                        return;
     	                    }
     	                    if (!$h.isArray(content)) {
     	                        content = content.split(self.initialPreviewDelimiter);
     	                    }
     	                    chk = content.filter(function (n) {
     	                        return n !== null;
     	                    });
     	                    if (!chk.length) {
     	                        return;
     	                    }
     	                    if (data.content === undefined) {
     	                        data.content = [];
     	                    }
     	                    if (data.config === undefined) {
     	                        data.config = [];
     	                    }
     	                    if (data.tags === undefined) {
     	                        data.tags = [];
     	                    }
     	                    if (append) {
     	                        for (i = 0; i < content.length; i++) {
     	                            if (content[i]) {
     	                                data.content.push(content[i]);
     	                            }
     	                        }
     	                        for (i = 0; i < config.length; i++) {
     	                            if (config[i]) {
     	                                data.config.push(config[i]);
     	                            }
     	                        }
     	                        for (i = 0; i < tags.length; i++) {
     	                            if (tags[i]) {
     	                                data.tags.push(tags[i]);
     	                            }
     	                        }
     	                    } else {
     	                        data.content = content;
     	                        data.config = config;
     	                        data.tags = tags;
     	                    }
     	                    self.previewCache.data = data;
     	                },
     	                unset: function (index) {
     	                    var chk = self.previewCache.count();
     	                    if (!chk) {
     	                        return;
     	                    }
     	                    if (chk === 1) {
     	                        self.previewCache.data.content = [];
     	                        self.previewCache.data.config = [];
     	                        self.previewCache.data.tags = [];
     	                        self.initialPreview = [];
     	                        self.initialPreviewConfig = [];
     	                        self.initialPreviewThumbTags = [];
     	                        return;
     	                    }
     	                    self.previewCache.data.content.splice(index, 1);
     	                    self.previewCache.data.config.splice(index, 1);
     	                    self.previewCache.data.tags.splice(index, 1);
     	                },
     	                out: function () {
     	                    var html = '', caption, len = self.previewCache.count(), i;
     	                    if (len === 0) {
     	                        return {content: '', caption: ''};
     	                    }
     	                    for (i = 0; i < len; i++) {
     	                        html += self.previewCache.get(i);
     	                    }
     	                    caption = self._getMsgSelected(len);
     	                    return {content: html, caption: caption};
     	                },
     	                footer: function (i, isDisabled, size) {
     	                    var data = self.previewCache.data || {};
     	                    if ($h.isEmpty(data.content)) {
     	                        return '';
     	                    }
     	                    if ($h.isEmpty(data.config) || $h.isEmpty(data.config[i])) {
     	                        data.config[i] = {};
     	                    }
     	                    isDisabled = isDisabled === undefined ? true : isDisabled;
     	                    var config = data.config[i], caption = $h.ifSet('caption', config), a,
     	                        width = $h.ifSet('width', config, 'auto'), url = $h.ifSet('url', config, false),
     	                        key = $h.ifSet('key', config, null), fs = self.fileActionSettings,
     	                        initPreviewShowDel = self.initialPreviewShowDelete || false,
     	                        dUrl = config.downloadUrl || self.initialPreviewDownloadUrl || '',
     	                        dFil = config.filename || config.caption || '',
     	                        initPreviewShowDwl = !!(dUrl),
     	                        sDel = $h.ifSet('showDelete', config, $h.ifSet('showDelete', fs, initPreviewShowDel)),
     	                        sDwl = $h.ifSet('showDownload', config, $h.ifSet('showDownload', fs, initPreviewShowDwl)),
     	                        sZm = $h.ifSet('showZoom', config, $h.ifSet('showZoom', fs, true)),
     	                        sDrg = $h.ifSet('showDrag', config, $h.ifSet('showDrag', fs, true)),
     	                        dis = (url === false) && isDisabled;
     	                    sDwl = sDwl && config.downloadUrl !== false && !!dUrl;
     	                    a = self._renderFileActions(false, sDwl, sDel, sZm, sDrg, dis, url, key, true, dUrl, dFil);
     	                    return self._getLayoutTemplate('footer').setTokens({
     	                        'progress': self._renderThumbProgress(),
     	                        'actions': a,
     	                        'caption': caption,
     	                        'size': self._getSize(size),
     	                        'width': width,
     	                        'indicator': ''
     	                    });
     	                }
     	            };
     	            self.previewCache.init();
     	        },
     	        _handler: function ($el, event, callback) {
     	            var self = this, ns = self.namespace, ev = event.split(' ').join(ns + ' ') + ns;
     	            if (!$el || !$el.length) {
     	                return;
     	            }
     	            $el.off(ev).on(ev, callback);
     	        },
     	        _log: function (msg) {
     	            var self = this, id = self.$element.attr('id');
     	            if (id) {
     	                msg = '"' + id + '": ' + msg;
     	            }
     	            if (typeof window.console.log !== "undefined") {
     	                window.console.log(msg);
     	            } else {
     	                window.alert(msg);
     	            }
     	        },
     	        _validate: function () {
     	            var self = this, status = self.$element.attr('type') === 'file';
     	            if (!status) {
     	                self._log('The input "type" must be set to "file" for initializing the "bootstrap-fileinput" plugin.');
     	            }
     	            return status;
     	        },
     	        _errorsExist: function () {
     	            var self = this, $err, $errList = self.$errorContainer.find('li');
     	            if ($errList.length) {
     	                return true;
     	            }
     	            $err = $(document.createElement('div')).html(self.$errorContainer.html());
     	            $err.find('.kv-error-close').remove();
     	            $err.find('ul').remove();
     	            return !!$.trim($err.text()).length;
     	        },
     	        _errorHandler: function (evt, caption) {
     	            var self = this, err = evt.target.error, showError = function (msg) {
     	                self._showError(msg.replace('{name}', caption));
     	            };
     	            /** @namespace err.NOT_FOUND_ERR */
     	            /** @namespace err.SECURITY_ERR */
     	            /** @namespace err.NOT_READABLE_ERR */
     	            if (err.code === err.NOT_FOUND_ERR) {
     	                showError(self.msgFileNotFound);
     	            } else if (err.code === err.SECURITY_ERR) {
     	                showError(self.msgFileSecured);
     	            } else if (err.code === err.NOT_READABLE_ERR) {
     	                showError(self.msgFileNotReadable);
     	            } else if (err.code === err.ABORT_ERR) {
     	                showError(self.msgFilePreviewAborted);
     	            } else {
     	                showError(self.msgFilePreviewError);
     	            }
     	        },
     	        _addError: function (msg) {
     	            var self = this, $error = self.$errorContainer;
     	            if (msg && $error.length) {
     	                $error.html(self.errorCloseButton + msg);
     	                self._handler($error.find('.kv-error-close'), 'click', function () {
     	                    setTimeout(function() {
     	                        if (self.showPreview && !self.getFrames().length) {
     	                            self.clear();
     	                        }
     	                        $error.fadeOut('slow');                    
     	                    }, 10);
     	                });
     	            }
     	        },
     	        _setValidationError: function (css) {
     	            var self = this;
     	            css = (css ? css + ' ' : '') + 'has-error';
     	            self.$container.removeClass(css).addClass('has-error');
     	            $h.addCss(self.$captionContainer, 'is-invalid');
     	        },
     	        _resetErrors: function (fade) {
     	            var self = this, $error = self.$errorContainer;
     	            self.isError = false;
     	            self.$container.removeClass('has-error');
     	            self.$captionContainer.removeClass('is-invalid');
     	            $error.html('');
     	            if (fade) {
     	                $error.fadeOut('slow');
     	            } else {
     	                $error.hide();
     	            }
     	        },
     	        _showFolderError: function (folders) {
     	            var self = this, $error = self.$errorContainer, msg;
     	            if (!folders) {
     	                return;
     	            }
     	            msg = self.msgFoldersNotAllowed.replace('{n}', folders);
     	            self._addError(msg);
     	            self._setValidationError();
     	            $error.fadeIn(800);
     	            self._raise('filefoldererror', [folders, msg]);
     	        },
     	        _showUploadError: function (msg, params, event) {
     	            var self = this, $error = self.$errorContainer, ev = event || 'fileuploaderror', e = params && params.id ?
     	                '<li data-file-id="' + params.id + '">' + msg + '</li>' : '<li>' + msg + '</li>';
     	            if ($error.find('ul').length === 0) {
     	                self._addError('<ul>' + e + '</ul>');
     	            } else {
     	                $error.find('ul').append(e);
     	            }
     	            $error.fadeIn(800);
     	            self._raise(ev, [params, msg]);
     	            self._setValidationError('file-input-new');
     	            return true;
     	        },
     	        _showError: function (msg, params, event) {
     	            var self = this, $error = self.$errorContainer, ev = event || 'fileerror';
     	            params = params || {};
     	            params.reader = self.reader;
     	            self._addError(msg);
     	            $error.fadeIn(800);
     	            self._raise(ev, [params, msg]);
     	            if (!self.isAjaxUpload) {
     	                self._clearFileInput();
     	            }
     	            self._setValidationError('file-input-new');
     	            self.$btnUpload.attr('disabled', true);
     	            return true;
     	        },
     	        _noFilesError: function (params) {
     	            var self = this, label = self.minFileCount > 1 ? self.filePlural : self.fileSingle,
     	                msg = self.msgFilesTooLess.replace('{n}', self.minFileCount).replace('{files}', label),
     	                $error = self.$errorContainer;
     	            self._addError(msg);
     	            self.isError = true;
     	            self._updateFileDetails(0);
     	            $error.fadeIn(800);
     	            self._raise('fileerror', [params, msg]);
     	            self._clearFileInput();
     	            self._setValidationError();
     	        },
     	        _parseError: function (operation, jqXHR, errorThrown, fileName) {
     	            /** @namespace jqXHR.responseJSON */
     	            var self = this, errMsg = $.trim(errorThrown + ''), textPre,
     	                text = jqXHR.responseJSON !== undefined && jqXHR.responseJSON.error !== undefined ?
     	                    jqXHR.responseJSON.error : jqXHR.responseText;
     	            if (self.cancelling && self.msgUploadAborted) {
     	                errMsg = self.msgUploadAborted;
     	            }
     	            if (self.showAjaxErrorDetails && text) {
     	                text = $.trim(text.replace(/\n\s*\n/g, '\n'));
     	                textPre = text.length ? '<pre>' + text + '</pre>' : '';
     	                errMsg += errMsg ? textPre : text;
     	            }
     	            if (!errMsg) {
     	                errMsg = self.msgAjaxError.replace('{operation}', operation);
     	            }
     	            self.cancelling = false;
     	            return fileName ? '<b>' + fileName + ': </b>' + errMsg : errMsg;
     	        },
     	        _parseFileType: function (type, name) {
     	            var self = this, isValid, vType, cat, i, types = self.allowedPreviewTypes || [];
     	            if (type === 'application/text-plain') {
     	                return 'text';
     	            }
     	            for (i = 0; i < types.length; i++) {
     	                cat = types[i];
     	                isValid = self.fileTypeSettings[cat];
     	                vType = isValid(type, name) ? cat : '';
     	                if (!$h.isEmpty(vType)) {
     	                    return vType;
     	                }
     	            }
     	            return 'other';
     	        },
     	        _getPreviewIcon: function (fname) {
     	            var self = this, ext, out = null;
     	            if (fname && fname.indexOf('.') > -1) {
     	                ext = fname.split('.').pop();
     	                if (self.previewFileIconSettings) {
     	                    out = self.previewFileIconSettings[ext] || self.previewFileIconSettings[ext.toLowerCase()] || null;
     	                }
     	                if (self.previewFileExtSettings) {
     	                    $.each(self.previewFileExtSettings, function (key, func) {
     	                        if (self.previewFileIconSettings[key] && func(ext)) {
     	                            out = self.previewFileIconSettings[key];
     	                            //noinspection UnnecessaryReturnStatementJS
     	                            return;
     	                        }
     	                    });
     	                }
     	            }
     	            return out;
     	        },
     	        _parseFilePreviewIcon: function (content, fname) {
     	            var self = this, icn = self._getPreviewIcon(fname) || self.previewFileIcon, out = content;
     	            if (out.indexOf('{previewFileIcon}') > -1) {
     	                out = out.setTokens({'previewFileIconClass': self.previewFileIconClass, 'previewFileIcon': icn});
     	            }
     	            return out;
     	        },
     	        _raise: function (event, params) {
     	            var self = this, e = $.Event(event);
     	            if (params !== undefined) {
     	                self.$element.trigger(e, params);
     	            } else {
     	                self.$element.trigger(e);
     	            }
     	            if (e.isDefaultPrevented() || e.result === false) {
     	                return false;
     	            }
     	            switch (event) {
     	                // ignore these events
     	                case 'filebatchuploadcomplete':
     	                case 'filebatchuploadsuccess':
     	                case 'fileuploaded':
     	                case 'fileclear':
     	                case 'filecleared':
     	                case 'filereset':
     	                case 'fileerror':
     	                case 'filefoldererror':
     	                case 'fileuploaderror':
     	                case 'filebatchuploaderror':
     	                case 'filedeleteerror':
     	                case 'filecustomerror':
     	                case 'filesuccessremove':
     	                    break;
     	                // receive data response via `filecustomerror` event`
     	                default:
     	                    if (!self.ajaxAborted) {
     	                        self.ajaxAborted = e.result;
     	                    }
     	                    break;
     	            }
     	            return true;
     	        },
     	        _listenFullScreen: function (isFullScreen) {
     	            var self = this, $modal = self.$modal, $btnFull, $btnBord;
     	            if (!$modal || !$modal.length) {
     	                return;
     	            }
     	            $btnFull = $modal && $modal.find('.btn-fullscreen');
     	            $btnBord = $modal && $modal.find('.btn-borderless');
     	            if (!$btnFull.length || !$btnBord.length) {
     	                return;
     	            }
     	            $btnFull.removeClass('active').attr('aria-pressed', 'false');
     	            $btnBord.removeClass('active').attr('aria-pressed', 'false');
     	            if (isFullScreen) {
     	                $btnFull.addClass('active').attr('aria-pressed', 'true');
     	            } else {
     	                $btnBord.addClass('active').attr('aria-pressed', 'true');
     	            }
     	            if ($modal.hasClass('file-zoom-fullscreen')) {
     	                self._maximizeZoomDialog();
     	            } else {
     	                if (isFullScreen) {
     	                    self._maximizeZoomDialog();
     	                } else {
     	                    $btnBord.removeClass('active').attr('aria-pressed', 'false');
     	                }
     	            }
     	        },
     	        _listen: function () {
     	            var self = this, $el = self.$element, $form = self.$form, $cont = self.$container, fullScreenEvents;
     	            self._handler($el, 'change', $.proxy(self._change, self));
     	            if (self.showBrowse) {
     	                self._handler(self.$btnFile, 'click', $.proxy(self._browse, self));
     	            }
     	            self._handler($cont.find('.fileinput-remove:not([disabled])'), 'click', $.proxy(self.clear, self));
     	            self._handler($cont.find('.fileinput-cancel'), 'click', $.proxy(self.cancel, self));
     	            self._initDragDrop();
     	            self._handler($form, 'reset', $.proxy(self.clear, self));
     	            if (!self.isAjaxUpload) {
     	                self._handler($form, 'submit', $.proxy(self._submitForm, self));
     	            }
     	            self._handler(self.$container.find('.fileinput-upload'), 'click', $.proxy(self._uploadClick, self));
     	            self._handler($(window), 'resize', function () {
     	                self._listenFullScreen(screen.width === window.innerWidth && screen.height === window.innerHeight);
     	            });
     	            fullScreenEvents = 'webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange';
     	            self._handler($(document), fullScreenEvents, function () {
     	                self._listenFullScreen($h.checkFullScreen());
     	            });
     	            self._autoFitContent();
     	            self._initClickable();
     	        },
     	        _autoFitContent: function () {
     	            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
     	                self = this, config = width < 400 ? (self.previewSettingsSmall || self.defaults.previewSettingsSmall) :
     	                (self.previewSettings || self.defaults.previewSettings), sel;
     	            $.each(config, function (cat, settings) {
     	                sel = '.file-preview-frame .file-preview-' + cat;
     	                self.$preview.find(sel + '.kv-preview-data,' + sel + ' .kv-preview-data').css(settings);
     	            });
     	        },
     	        _initClickable: function () {
     	            var self = this, $zone;
     	            if (!self.isClickable) {
     	                return;
     	            }
     	            $zone = self.isAjaxUpload ? self.$dropZone : self.$preview.find('.file-default-preview');
     	            $h.addCss($zone, 'clickable');
     	            $zone.attr('tabindex', -1);
     	            self._handler($zone, 'click', function (e) {
     	                var $tar = $(e.target);
     	                if (!$zone.find('.kv-fileinput-error:visible').length && 
     	                    (!$tar.parents('.file-preview-thumbnails').length || $tar.parents('.file-default-preview').length)) {
     	                    self.$element.trigger('click');
     	                    $zone.blur();
     	                }
     	            });
     	        },
     	        _initDragDrop: function () {
     	            var self = this, $zone = self.$dropZone;
     	            if (self.isAjaxUpload && self.dropZoneEnabled && self.showPreview) {
     	                self._handler($zone, 'dragenter dragover', $.proxy(self._zoneDragEnter, self));
     	                self._handler($zone, 'dragleave', $.proxy(self._zoneDragLeave, self));
     	                self._handler($zone, 'drop', $.proxy(self._zoneDrop, self));
     	                self._handler($(document), 'dragenter dragover drop', self._zoneDragDropInit);
     	            }
     	        },
     	        _zoneDragDropInit: function (e) {
     	            e.stopPropagation();
     	            e.preventDefault();
     	        },
     	        _zoneDragEnter: function (e) {
     	            var self = this, hasFiles = $.inArray('Files', e.originalEvent.dataTransfer.types) > -1;
     	            self._zoneDragDropInit(e);
     	            if (self.isDisabled || !hasFiles) {
     	                e.originalEvent.dataTransfer.effectAllowed = 'none';
     	                e.originalEvent.dataTransfer.dropEffect = 'none';
     	                return;
     	            }
     	            $h.addCss(self.$dropZone, 'file-highlighted');
     	        },
     	        _zoneDragLeave: function (e) {
     	            var self = this;
     	            self._zoneDragDropInit(e);
     	            if (self.isDisabled) {
     	                return;
     	            }
     	            self.$dropZone.removeClass('file-highlighted');
     	        },
     	        _zoneDrop: function (e) {
     	            var self = this;
     	            e.preventDefault();
     	            /** @namespace e.originalEvent.dataTransfer */
     	            if (self.isDisabled || $h.isEmpty(e.originalEvent.dataTransfer.files)) {
     	                return;
     	            }
     	            self._change(e, 'dragdrop');
     	            self.$dropZone.removeClass('file-highlighted');
     	        },
     	        _uploadClick: function (e) {
     	            var self = this, $btn = self.$container.find('.fileinput-upload'), $form,
     	                isEnabled = !$btn.hasClass('disabled') && $h.isEmpty($btn.attr('disabled'));
     	            if (e && e.isDefaultPrevented()) {
     	                return;
     	            }
     	            if (!self.isAjaxUpload) {
     	                if (isEnabled && $btn.attr('type') !== 'submit') {
     	                    $form = $btn.closest('form');
     	                    // downgrade to normal form submit if possible
     	                    if ($form.length) {
     	                        $form.trigger('submit');
     	                    }
     	                    e.preventDefault();
     	                }
     	                return;
     	            }
     	            e.preventDefault();
     	            if (isEnabled) {
     	                self.upload();
     	            }
     	        },
     	        _submitForm: function () {
     	            var self = this;
     	            return self._isFileSelectionValid() && !self._abort({});
     	        },
     	        _clearPreview: function () {
     	            var self = this, $p = self.$preview,
     	                $thumbs = self.showUploadedThumbs ? self.getFrames(':not(.file-preview-success)') : self.getFrames();
     	            $thumbs.each(function () {
     	                var $thumb = $(this);
     	                $thumb.remove();
     	                $h.cleanZoomCache($p.find('#zoom-' + $thumb.attr('id')));
     	            });
     	            if (!self.getFrames().length || !self.showPreview) {
     	                self._resetUpload();
     	            }
     	            self._validateDefaultPreview();
     	        },
     	        _initSortable: function () {
     	            var self = this, $el = self.$preview, settings, selector = '.' + $h.SORT_CSS;
     	            if (!window.KvSortable || $el.find(selector).length === 0) {
     	                return;
     	            }
     	            //noinspection JSUnusedGlobalSymbols
     	            settings = {
     	                handle: '.drag-handle-init',
     	                dataIdAttr: 'data-preview-id',
     	                scroll: false,
     	                draggable: selector,
     	                onSort: function (e) {
     	                    var oldIndex = e.oldIndex, newIndex = e.newIndex, $frame, $dragEl;
     	                    self.initialPreview = $h.moveArray(self.initialPreview, oldIndex, newIndex);
     	                    self.initialPreviewConfig = $h.moveArray(self.initialPreviewConfig, oldIndex, newIndex);
     	                    self.previewCache.init();
     	                    for (var i = 0; i < self.initialPreviewConfig.length; i++) {
     	                        if (self.initialPreviewConfig[i] !== null) {
     	                            $dragEl = $(e.item);
     	                            $frame = $dragEl.closest($h.FRAMES);
     	                            $frame.attr('data-fileindex', 'init_' + i).attr('data-fileindex', 'init_' + i);
     	                        }
     	                    }
     	                    self._raise('filesorted', {
     	                        previewId: $(e.item).attr('id'),
     	                        'oldIndex': oldIndex,
     	                        'newIndex': newIndex,
     	                        stack: self.initialPreviewConfig
     	                    });
     	                }
     	            };
     	            if ($el.data('kvsortable')) {
     	                $el.kvsortable('destroy');
     	            }
     	            $.extend(true, settings, self.fileActionSettings.dragSettings);
     	            $el.kvsortable(settings);
     	        },
     	        _setPreviewContent: function (content) {
     	            var self = this;
     	            self.$preview.html(content);
     	            self._autoFitContent();
     	        },
     	        _initPreview: function (isInit) {
     	            var self = this, cap = self.initialCaption || '', out;
     	            if (!self.previewCache.count()) {
     	                self._clearPreview();
     	                if (isInit) {
     	                    self._setCaption(cap);
     	                } else {
     	                    self._initCaption();
     	                }
     	                return;
     	            }
     	            out = self.previewCache.out();
     	            cap = isInit && self.initialCaption ? self.initialCaption : out.caption;
     	            self._setPreviewContent(out.content);
     	            self._setInitThumbAttr();
     	            self._setCaption(cap);
     	            self._initSortable();
     	            if (!$h.isEmpty(out.content)) {
     	                self.$container.removeClass('file-input-new');
     	            }
     	        },
     	        _getZoomButton: function (type) {
     	            var self = this, label = self.previewZoomButtonIcons[type], css = self.previewZoomButtonClasses[type],
     	                title = ' title="' + (self.previewZoomButtonTitles[type] || '') + '" ',
     	                params = title + (type === 'close' ? ' data-dismiss="modal" aria-hidden="true"' : '');
     	            if (type === 'fullscreen' || type === 'borderless' || type === 'toggleheader') {
     	                params += ' data-toggle="button" aria-pressed="false" autocomplete="off"';
     	            }
     	            return '<button type="button" class="' + css + ' btn-' + type + '"' + params + '>' + label + '</button>';
     	        },
     	        _getModalContent: function () {
     	            var self = this;
     	            return self._getLayoutTemplate('modal').setTokens({
     	                'rtl': self.rtl ? ' kv-rtl' : '',
     	                'zoomFrameClass': self.frameClass,
     	                'heading': self.msgZoomModalHeading,
     	                'prev': self._getZoomButton('prev'),
     	                'next': self._getZoomButton('next'),
     	                'toggleheader': self._getZoomButton('toggleheader'),
     	                'fullscreen': self._getZoomButton('fullscreen'),
     	                'borderless': self._getZoomButton('borderless'),
     	                'close': self._getZoomButton('close')
     	            });
     	        },
     	        _listenModalEvent: function (event) {
     	            var self = this, $modal = self.$modal, getParams = function (e) {
     	                return {
     	                    sourceEvent: e,
     	                    previewId: $modal.data('previewId'),
     	                    modal: $modal
     	                };
     	            };
     	            $modal.on(event + '.bs.modal', function (e) {
     	                var $btnFull = $modal.find('.btn-fullscreen'), $btnBord = $modal.find('.btn-borderless');
     	                self._raise('filezoom' + event, getParams(e));
     	                if (event === 'shown') {
     	                    $btnBord.removeClass('active').attr('aria-pressed', 'false');
     	                    $btnFull.removeClass('active').attr('aria-pressed', 'false');
     	                    if ($modal.hasClass('file-zoom-fullscreen')) {
     	                        self._maximizeZoomDialog();
     	                        if ($h.checkFullScreen()) {
     	                            $btnFull.addClass('active').attr('aria-pressed', 'true');
     	                        } else {
     	                            $btnBord.addClass('active').attr('aria-pressed', 'true');
     	                        }
     	                    }
     	                }
     	            });
     	        },
     	        _initZoom: function () {
     	            var self = this, $dialog, modalMain = self._getLayoutTemplate('modalMain'), modalId = '#' + $h.MODAL_ID;
     	            if (!self.showPreview) {
     	                return;
     	            }
     	            self.$modal = $(modalId);
     	            if (!self.$modal || !self.$modal.length) {
     	                $dialog = $(document.createElement('div')).html(modalMain).insertAfter(self.$container);
     	                self.$modal = $(modalId).insertBefore($dialog);
     	                $dialog.remove();
     	            }
     	            $h.initModal(self.$modal);
     	            self.$modal.html(self._getModalContent());
     	            $.each($h.MODAL_EVENTS, function (key, event) {
     	                self._listenModalEvent(event);
     	            });
     	        },
     	        _initZoomButtons: function () {
     	            var self = this, previewId = self.$modal.data('previewId') || '', $first, $last,
     	                thumbs = self.getFrames().toArray(), len = thumbs.length, $prev = self.$modal.find('.btn-prev'),
     	                $next = self.$modal.find('.btn-next');
     	            if (thumbs.length < 2) {
     	                $prev.hide();
     	                $next.hide();
     	                return;
     	            } else {
     	                $prev.show();
     	                $next.show();
     	            }
     	            if (!len) {
     	                return;
     	            }
     	            $first = $(thumbs[0]);
     	            $last = $(thumbs[len - 1]);
     	            $prev.removeAttr('disabled');
     	            $next.removeAttr('disabled');
     	            if ($first.length && $first.attr('id') === previewId) {
     	                $prev.attr('disabled', true);
     	            }
     	            if ($last.length && $last.attr('id') === previewId) {
     	                $next.attr('disabled', true);
     	            }
     	        },
     	        _maximizeZoomDialog: function () {
     	            var self = this, $modal = self.$modal, $head = $modal.find('.modal-header:visible'),
     	                $foot = $modal.find('.modal-footer:visible'), $body = $modal.find('.modal-body'),
     	                h = $(window).height(), diff = 0;
     	            $modal.addClass('file-zoom-fullscreen');
     	            if ($head && $head.length) {
     	                h -= $head.outerHeight(true);
     	            }
     	            if ($foot && $foot.length) {
     	                h -= $foot.outerHeight(true);
     	            }
     	            if ($body && $body.length) {
     	                diff = $body.outerHeight(true) - $body.height();
     	                h -= diff;
     	            }
     	            $modal.find('.kv-zoom-body').height(h);
     	        },
     	        _resizeZoomDialog: function (fullScreen) {
     	            var self = this, $modal = self.$modal, $btnFull = $modal.find('.btn-fullscreen'),
     	                $btnBord = $modal.find('.btn-borderless');
     	            if ($modal.hasClass('file-zoom-fullscreen')) {
     	                $h.toggleFullScreen(false);
     	                if (!fullScreen) {
     	                    if (!$btnFull.hasClass('active')) {
     	                        $modal.removeClass('file-zoom-fullscreen');
     	                        self.$modal.find('.kv-zoom-body').css('height', self.zoomModalHeight);
     	                    } else {
     	                        $btnFull.removeClass('active').attr('aria-pressed', 'false');
     	                    }
     	                } else {
     	                    if (!$btnFull.hasClass('active')) {
     	                        $modal.removeClass('file-zoom-fullscreen');
     	                        self._resizeZoomDialog(true);
     	                        if ($btnBord.hasClass('active')) {
     	                            $btnBord.removeClass('active').attr('aria-pressed', 'false');
     	                        }
     	                    }
     	                }
     	            } else {
     	                if (!fullScreen) {
     	                    self._maximizeZoomDialog();
     	                    return;
     	                }
     	                $h.toggleFullScreen(true);
     	            }
     	            $modal.focus();
     	        },
     	        _setZoomContent: function ($frame, animate) {
     	            var self = this, $content, tmplt, body, title, $body, $dataEl, config, pid = $frame.attr('id'),
     	                $modal = self.$modal, $prev = $modal.find('.btn-prev'), $next = $modal.find('.btn-next'), $tmp,
     	                $btnFull = $modal.find('.btn-fullscreen'), $btnBord = $modal.find('.btn-borderless'), cap, size,
     	                $btnTogh = $modal.find('.btn-toggleheader'), $zoomPreview = self.$preview.find('#zoom-' + pid);
     	            tmplt = $zoomPreview.attr('data-template') || 'generic';
     	            $content = $zoomPreview.find('.kv-file-content');
     	            body = $content.length ? $content.html() : '';
     	            cap = $frame.data('caption') || '';
     	            size = $frame.data('size') || '';
     	            title = cap + ' ' + size;
     	            $modal.find('.kv-zoom-title').attr('title', $('<div/>').html(title).text()).html(title);
     	            $body = $modal.find('.kv-zoom-body');
     	            $modal.removeClass('kv-single-content');
     	            if (animate) {
     	                $tmp = $body.addClass('file-thumb-loading').clone().insertAfter($body);
     	                $body.html(body).hide();
     	                $tmp.fadeOut('fast', function () {
     	                    $body.fadeIn('fast', function () {
     	                        $body.removeClass('file-thumb-loading');
     	                    });
     	                    $tmp.remove();
     	                });
     	            } else {
     	                $body.html(body);
     	            }
     	            config = self.previewZoomSettings[tmplt];
     	            if (config) {
     	                $dataEl = $body.find('.kv-preview-data');
     	                $h.addCss($dataEl, 'file-zoom-detail');
     	                $.each(config, function (key, value) {
     	                    $dataEl.css(key, value);
     	                    if (($dataEl.attr('width') && key === 'width') || ($dataEl.attr('height') && key === 'height')) {
     	                        $dataEl.removeAttr(key);
     	                    }
     	                });
     	            }
     	            $modal.data('previewId', pid);
     	            var $img = $body.find('img');
     	            if ($img.length) {
     	                $h.adjustOrientedImage($img, true);
     	            }
     	            self._handler($prev, 'click', function () {
     	                self._zoomSlideShow('prev', pid);
     	            });
     	            self._handler($next, 'click', function () {
     	                self._zoomSlideShow('next', pid);
     	            });
     	            self._handler($btnFull, 'click', function () {
     	                self._resizeZoomDialog(true);
     	            });
     	            self._handler($btnBord, 'click', function () {
     	                self._resizeZoomDialog(false);
     	            });
     	            self._handler($btnTogh, 'click', function () {
     	                var $header = $modal.find('.modal-header'), $floatBar = $modal.find('.modal-body .floating-buttons'),
     	                    ht, $actions = $header.find('.kv-zoom-actions'), resize = function (height) {
     	                        var $body = self.$modal.find('.kv-zoom-body'), h = self.zoomModalHeight;
     	                        if ($modal.hasClass('file-zoom-fullscreen')) {
     	                            h = $body.outerHeight(true);
     	                            if (!height) {
     	                                h = h - $header.outerHeight(true);
     	                            }
     	                        }
     	                        $body.css('height', height ? h + height : h);
     	                    };
     	                if ($header.is(':visible')) {
     	                    ht = $header.outerHeight(true);
     	                    $header.slideUp('slow', function () {
     	                        $actions.find('.btn').appendTo($floatBar);
     	                        resize(ht);
     	                    });
     	                } else {
     	                    $floatBar.find('.btn').appendTo($actions);
     	                    $header.slideDown('slow', function () {
     	                        resize();
     	                    });
     	                }
     	                $modal.focus();
     	            });
     	            self._handler($modal, 'keydown', function (e) {
     	                var key = e.which || e.keyCode;
     	                if (key === 37 && !$prev.attr('disabled')) {
     	                    self._zoomSlideShow('prev', pid);
     	                }
     	                if (key === 39 && !$next.attr('disabled')) {
     	                    self._zoomSlideShow('next', pid);
     	                }
     	            });
     	        },
     	        _zoomPreview: function ($btn) {
     	            var self = this, $frame, $modal = self.$modal;
     	            if (!$btn.length) {
     	                throw 'Cannot zoom to detailed preview!';
     	            }
     	            $h.initModal($modal);
     	            $modal.html(self._getModalContent());
     	            $frame = $btn.closest($h.FRAMES);
     	            self._setZoomContent($frame);
     	            $modal.modal('show');
     	            self._initZoomButtons();
     	        },
     	        _zoomSlideShow: function (dir, previewId) {
     	            var self = this, $btn = self.$modal.find('.kv-zoom-actions .btn-' + dir), $targFrame, i,
     	                thumbs = self.getFrames().toArray(), len = thumbs.length, out;
     	            if ($btn.attr('disabled')) {
     	                return;
     	            }
     	            for (i = 0; i < len; i++) {
     	                if ($(thumbs[i]).attr('id') === previewId) {
     	                    out = dir === 'prev' ? i - 1 : i + 1;
     	                    break;
     	                }
     	            }
     	            if (out < 0 || out >= len || !thumbs[out]) {
     	                return;
     	            }
     	            $targFrame = $(thumbs[out]);
     	            if ($targFrame.length) {
     	                self._setZoomContent($targFrame, true);
     	            }
     	            self._initZoomButtons();
     	            self._raise('filezoom' + dir, {'previewId': previewId, modal: self.$modal});
     	        },
     	        _initZoomButton: function () {
     	            var self = this;
     	            self.$preview.find('.kv-file-zoom').each(function () {
     	                var $el = $(this);
     	                self._handler($el, 'click', function () {
     	                    self._zoomPreview($el);
     	                });
     	            });
     	        },
     	        _clearObjects: function ($el) {
     	            $el.find('video audio').each(function () {
     	                this.pause();
     	                $(this).remove();
     	            });
     	            $el.find('img object div').each(function () {
     	                $(this).remove();
     	            });
     	        },
     	        _clearFileInput: function () {
     	            var self = this, $el = self.$element, $srcFrm, $tmpFrm, $tmpEl;
     	            self.fileInputCleared = true;
     	            if ($h.isEmpty($el.val())) {
     	                return;
     	            }
     	            // Fix for IE ver < 11, that does not clear file inputs. Requires a sequence of steps to prevent IE
     	            // crashing but still allow clearing of the file input.
     	            if (self.isIE9 || self.isIE10) {
     	                $srcFrm = $el.closest('form');
     	                $tmpFrm = $(document.createElement('form'));
     	                $tmpEl = $(document.createElement('div'));
     	                $el.before($tmpEl);
     	                if ($srcFrm.length) {
     	                    $srcFrm.after($tmpFrm);
     	                } else {
     	                    $tmpEl.after($tmpFrm);
     	                }
     	                $tmpFrm.append($el).trigger('reset');
     	                $tmpEl.before($el).remove();
     	                $tmpFrm.remove();
     	            } else { // normal input clear behavior for other sane browsers
     	                $el.val('');
     	            }
     	        },
     	        _resetUpload: function () {
     	            var self = this;
     	            self.uploadCache = {content: [], config: [], tags: [], append: true};
     	            self.uploadCount = 0;
     	            self.uploadStatus = {};
     	            self.uploadLog = [];
     	            self.uploadAsyncCount = 0;
     	            self.loadedImages = [];
     	            self.totalImagesCount = 0;
     	            self.$btnUpload.removeAttr('disabled');
     	            self._setProgress(0);
     	            self.$progress.hide();
     	            self._resetErrors(false);
     	            self.ajaxAborted = false;
     	            self.ajaxRequests = [];
     	            self._resetCanvas();
     	            self.cacheInitialPreview = {};
     	            if (self.overwriteInitial) {
     	                self.initialPreview = [];
     	                self.initialPreviewConfig = [];
     	                self.initialPreviewThumbTags = [];
     	                self.previewCache.data = {
     	                    content: [],
     	                    config: [],
     	                    tags: []
     	                };
     	            }
     	        },
     	        _resetCanvas: function () {
     	            var self = this;
     	            if (self.canvas && self.imageCanvasContext) {
     	                self.imageCanvasContext.clearRect(0, 0, self.canvas.width, self.canvas.height);
     	            }
     	        },
     	        _hasInitialPreview: function () {
     	            var self = this;
     	            return !self.overwriteInitial && self.previewCache.count();
     	        },
     	        _resetPreview: function () {
     	            var self = this, out, cap;
     	            if (self.previewCache.count()) {
     	                out = self.previewCache.out();
     	                self._setPreviewContent(out.content);
     	                self._setInitThumbAttr();
     	                cap = self.initialCaption ? self.initialCaption : out.caption;
     	                self._setCaption(cap);
     	            } else {
     	                self._clearPreview();
     	                self._initCaption();
     	            }
     	            if (self.showPreview) {
     	                self._initZoom();
     	                self._initSortable();
     	            }
     	        },
     	        _clearDefaultPreview: function () {
     	            var self = this;
     	            self.$preview.find('.file-default-preview').remove();
     	        },
     	        _validateDefaultPreview: function () {
     	            var self = this;
     	            if (!self.showPreview || $h.isEmpty(self.defaultPreviewContent)) {
     	                return;
     	            }
     	            self._setPreviewContent('<div class="file-default-preview">' + self.defaultPreviewContent + '</div>');
     	            self.$container.removeClass('file-input-new');
     	            self._initClickable();
     	        },
     	        _resetPreviewThumbs: function (isAjax) {
     	            var self = this, out;
     	            if (isAjax) {
     	                self._clearPreview();
     	                self.clearStack();
     	                return;
     	            }
     	            if (self._hasInitialPreview()) {
     	                out = self.previewCache.out();
     	                self._setPreviewContent(out.content);
     	                self._setInitThumbAttr();
     	                self._setCaption(out.caption);
     	                self._initPreviewActions();
     	            } else {
     	                self._clearPreview();
     	            }
     	        },
     	        _getLayoutTemplate: function (t) {
     	            var self = this, template = self.layoutTemplates[t];
     	            if ($h.isEmpty(self.customLayoutTags)) {
     	                return template;
     	            }
     	            return $h.replaceTags(template, self.customLayoutTags);
     	        },
     	        _getPreviewTemplate: function (t) {
     	            var self = this, template = self.previewTemplates[t];
     	            if ($h.isEmpty(self.customPreviewTags)) {
     	                return template;
     	            }
     	            return $h.replaceTags(template, self.customPreviewTags);
     	        },
     	        _getOutData: function (jqXHR, responseData, filesData) {
     	            var self = this;
     	            jqXHR = jqXHR || {};
     	            responseData = responseData || {};
     	            filesData = filesData || self.filestack.slice(0) || {};
     	            return {
     	                form: self.formdata,
     	                files: filesData,
     	                filenames: self.filenames,
     	                filescount: self.getFilesCount(),
     	                extra: self._getExtraData(),
     	                response: responseData,
     	                reader: self.reader,
     	                jqXHR: jqXHR
     	            };
     	        },
     	        _getMsgSelected: function (n) {
     	            var self = this, strFiles = n === 1 ? self.fileSingle : self.filePlural;
     	            return n > 0 ? self.msgSelected.replace('{n}', n).replace('{files}', strFiles) : self.msgNoFilesSelected;
     	        },
     	        _getFrame: function (id) {
     	            var self = this, $frame = $('#' + id);
     	            if (!$frame.length) {
     	                self._log('Invalid thumb frame with id: "' + id + '".');
     	                return null;
     	            }
     	            return $frame;
     	        },
     	        _getThumbs: function (css) {
     	            css = css || '';
     	            return this.getFrames(':not(.file-preview-initial)' + css);
     	        },
     	        _getExtraData: function (previewId, index) {
     	            var self = this, data = self.uploadExtraData;
     	            if (typeof self.uploadExtraData === "function") {
     	                data = self.uploadExtraData(previewId, index);
     	            }
     	            return data;
     	        },
     	        _initXhr: function (xhrobj, previewId, fileCount) {
     	            var self = this;
     	            if (xhrobj.upload) {
     	                xhrobj.upload.addEventListener('progress', function (event) {
     	                    var pct = 0, total = event.total, position = event.loaded || event.position;
     	                    /** @namespace event.lengthComputable */
     	                    if (event.lengthComputable) {
     	                        pct = Math.floor(position / total * 100);
     	                    }
     	                    if (previewId) {
     	                        self._setAsyncUploadStatus(previewId, pct, fileCount);
     	                    } else {
     	                        self._setProgress(pct);
     	                    }
     	                }, false);
     	            }
     	            return xhrobj;
     	        },
     	        _mergeAjaxCallback: function (funcName, srcFunc, type) {
     	            var self = this, settings = self.ajaxSettings, flag = self.mergeAjaxCallbacks, targFunc;
     	            if (type === 'delete') {
     	                settings = self.ajaxDeleteSettings;
     	                flag = self.mergeAjaxDeleteCallbacks;
     	            }
     	            targFunc = settings[funcName];
     	            if (flag && typeof targFunc === "function") {
     	                if (flag === 'before') {
     	                    settings[funcName] = function () {
     	                        targFunc.apply(this, arguments);
     	                        srcFunc.apply(this, arguments);
     	                    };
     	                } else {
     	                    settings[funcName] = function () {
     	                        srcFunc.apply(this, arguments);
     	                        targFunc.apply(this, arguments);
     	                    };
     	                }
     	            } else {
     	                settings[funcName] = srcFunc;
     	            }
     	            if (type === 'delete') {
     	                self.ajaxDeleteSettings = settings;
     	            } else {
     	                self.ajaxSettings = settings;
     	            }
     	        },
     	        _ajaxSubmit: function (fnBefore, fnSuccess, fnComplete, fnError, previewId, index) {
     	            var self = this, settings;
     	            if (!self._raise('filepreajax', [previewId, index])) {
     	                return;
     	            }
     	            self._uploadExtra(previewId, index);
     	            self._mergeAjaxCallback('beforeSend', fnBefore);
     	            self._mergeAjaxCallback('success', fnSuccess);
     	            self._mergeAjaxCallback('complete', fnComplete);
     	            self._mergeAjaxCallback('error', fnError);
     	            settings = $.extend(true, {}, {
     	                xhr: function () {
     	                    var xhrobj = $.ajaxSettings.xhr();
     	                    return self._initXhr(xhrobj, previewId, self.getFileStack().length);
     	                },
     	                url: index && self.uploadUrlThumb ? self.uploadUrlThumb : self.uploadUrl,
     	                type: 'POST',
     	                dataType: 'json',
     	                data: self.formdata,
     	                cache: false,
     	                processData: false,
     	                contentType: false
     	            }, self.ajaxSettings);
     	            self.ajaxRequests.push($.ajax(settings));
     	        },
     	        _mergeArray: function (prop, content) {
     	            var self = this, arr1 = $h.cleanArray(self[prop]), arr2 = $h.cleanArray(content);
     	            self[prop] = arr1.concat(arr2);
     	        },
     	        _initUploadSuccess: function (out, $thumb, allFiles) {
     	            var self = this, append, data, index, $div, $newCache, content, config, tags, i;
     	            if (!self.showPreview || typeof out !== 'object' || $.isEmptyObject(out)) {
     	                return;
     	            }
     	            if (out.initialPreview !== undefined && out.initialPreview.length > 0) {
     	                self.hasInitData = true;
     	                content = out.initialPreview || [];
     	                config = out.initialPreviewConfig || [];
     	                tags = out.initialPreviewThumbTags || [];
     	                append = out.append === undefined || out.append;
     	                if (content.length > 0 && !$h.isArray(content)) {
     	                    content = content.split(self.initialPreviewDelimiter);
     	                }
     	                self._mergeArray('initialPreview', content);
     	                self._mergeArray('initialPreviewConfig', config);
     	                self._mergeArray('initialPreviewThumbTags', tags);
     	                if ($thumb !== undefined) {
     	                    if (!allFiles) {
     	                        index = self.previewCache.add(content, config[0], tags[0], append);
     	                        data = self.previewCache.get(index, false);
     	                        $div = $(document.createElement('div')).html(data).hide().insertAfter($thumb);
     	                        $newCache = $div.find('.kv-zoom-cache');
     	                        if ($newCache && $newCache.length) {
     	                            $newCache.insertAfter($thumb);
     	                        }
     	                        $thumb.fadeOut('slow', function () {
     	                            var $newThumb = $div.find('.file-preview-frame');
     	                            if ($newThumb && $newThumb.length) {
     	                                $newThumb.insertBefore($thumb).fadeIn('slow').css('display:inline-block');
     	                            }
     	                            self._initPreviewActions();
     	                            self._clearFileInput();
     	                            $h.cleanZoomCache(self.$preview.find('#zoom-' + $thumb.attr('id')));
     	                            $thumb.remove();
     	                            $div.remove();
     	                            self._initSortable();
     	                        });
     	                    } else {
     	                        i = $thumb.attr('data-fileindex');
     	                        self.uploadCache.content[i] = content[0];
     	                        self.uploadCache.config[i] = config[0] || [];
     	                        self.uploadCache.tags[i] = tags[0] || [];
     	                        self.uploadCache.append = append;
     	                    }
     	                } else {
     	                    self.previewCache.set(content, config, tags, append);
     	                    self._initPreview();
     	                    self._initPreviewActions();
     	                }
     	            }
     	        },
     	        _initSuccessThumbs: function () {
     	            var self = this;
     	            if (!self.showPreview) {
     	                return;
     	            }
     	            self._getThumbs($h.FRAMES + '.file-preview-success').each(function () {
     	                var $thumb = $(this), $preview = self.$preview, $remove = $thumb.find('.kv-file-remove');
     	                $remove.removeAttr('disabled');
     	                self._handler($remove, 'click', function () {
     	                    var id = $thumb.attr('id'),
     	                        out = self._raise('filesuccessremove', [id, $thumb.attr('data-fileindex')]);
     	                    $h.cleanMemory($thumb);
     	                    if (out === false) {
     	                        return;
     	                    }
     	                    $thumb.fadeOut('slow', function () {
     	                        $h.cleanZoomCache($preview.find('#zoom-' + id));
     	                        $thumb.remove();
     	                        if (!self.getFrames().length) {
     	                            self.reset();
     	                        }
     	                    });
     	                });
     	            });
     	        },
     	        _checkAsyncComplete: function () {
     	            var self = this, previewId, i;
     	            for (i = 0; i < self.filestack.length; i++) {
     	                if (self.filestack[i]) {
     	                    previewId = self.previewInitId + "-" + i;
     	                    if ($.inArray(previewId, self.uploadLog) === -1) {
     	                        return false;
     	                    }
     	                }
     	            }
     	            return (self.uploadAsyncCount === self.uploadLog.length);
     	        },
     	        _uploadExtra: function (previewId, index) {
     	            var self = this, data = self._getExtraData(previewId, index);
     	            if (data.length === 0) {
     	                return;
     	            }
     	            $.each(data, function (key, value) {
     	                self.formdata.append(key, value);
     	            });
     	        },
     	        _uploadSingle: function (i, isBatch) {
     	            var self = this, total = self.getFileStack().length, formdata = new FormData(), outData,
     	                previewId = self.previewInitId + "-" + i, $thumb, chkComplete, $btnUpload, $btnDelete,
     	                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData), uploadFailed,
     	                $prog = $('#' + previewId).find('.file-thumb-progress'), fnBefore, fnSuccess, fnComplete, fnError,
     	                updateUploadLog, params = {id: previewId, index: i};
     	            self.formdata = formdata;
     	            if (self.showPreview) {
     	                $thumb = $('#' + previewId + ':not(.file-preview-initial)');
     	                $btnUpload = $thumb.find('.kv-file-upload');
     	                $btnDelete = $thumb.find('.kv-file-remove');
     	                $prog.show();
     	            }
     	            if (total === 0 || !hasPostData || ($btnUpload && $btnUpload.hasClass('disabled')) || self._abort(params)) {
     	                return;
     	            }
     	            updateUploadLog = function (i, previewId) {
     	                if (!uploadFailed) {
     	                    self.updateStack(i, undefined);
     	                }
     	                self.uploadLog.push(previewId);
     	                if (self._checkAsyncComplete()) {
     	                    self.fileBatchCompleted = true;
     	                }
     	            };
     	            chkComplete = function () {
     	                var u = self.uploadCache, $initThumbs, i, j, len = 0, data = self.cacheInitialPreview;
     	                if (!self.fileBatchCompleted) {
     	                    return;
     	                }
     	                if (data && data.content) {
     	                    len = data.content.length;
     	                }
     	                setTimeout(function () {
     	                    var triggerReset = self.getFileStack(true).length === 0;
     	                    if (self.showPreview) {
     	                        self.previewCache.set(u.content, u.config, u.tags, u.append);
     	                        if (len) {
     	                            for (i = 0; i < u.content.length; i++) {
     	                                j = i + len;
     	                                data.content[j] = u.content[i];
     	                                //noinspection JSUnresolvedVariable
     	                                if (data.config.length) {
     	                                    data.config[j] = u.config[i];
     	                                }
     	                                if (data.tags.length) {
     	                                    data.tags[j] = u.tags[i];
     	                                }
     	                            }
     	                            self.initialPreview = $h.cleanArray(data.content);
     	                            self.initialPreviewConfig = $h.cleanArray(data.config);
     	                            self.initialPreviewThumbTags = $h.cleanArray(data.tags);
     	                        } else {
     	                            self.initialPreview = u.content;
     	                            self.initialPreviewConfig = u.config;
     	                            self.initialPreviewThumbTags = u.tags;
     	                        }
     	                        self.cacheInitialPreview = {};
     	                        if (self.hasInitData) {
     	                            self._initPreview();
     	                            self._initPreviewActions();
     	                        }
     	                    }
     	                    self.unlock(triggerReset);
     	                    if (triggerReset) {
     	                        self._clearFileInput();
     	                    }
     	                    $initThumbs = self.$preview.find('.file-preview-initial');
     	                    if (self.uploadAsync && $initThumbs.length) {
     	                        $h.addCss($initThumbs, $h.SORT_CSS);
     	                        self._initSortable();
     	                    }
     	                    self._raise('filebatchuploadcomplete', [self.filestack, self._getExtraData()]);
     	                    self.uploadCount = 0;
     	                    self.uploadStatus = {};
     	                    self.uploadLog = [];
     	                    self._setProgress(101);
     	                    self.ajaxAborted = false;
     	                }, 100);
     	            };
     	            fnBefore = function (jqXHR) {
     	                outData = self._getOutData(jqXHR);
     	                self.fileBatchCompleted = false;
     	                if (!isBatch) {
     	                    self.ajaxAborted = false;
     	                }
     	                if (self.showPreview) {
     	                    if (!$thumb.hasClass('file-preview-success')) {
     	                        self._setThumbStatus($thumb, 'Loading');
     	                        $h.addCss($thumb, 'file-uploading');
     	                    }
     	                    $btnUpload.attr('disabled', true);
     	                    $btnDelete.attr('disabled', true);
     	                }
     	                if (!isBatch) {
     	                    self.lock();
     	                }
     	                self._raise('filepreupload', [outData, previewId, i]);
     	                $.extend(true, params, outData);
     	                if (self._abort(params)) {
     	                    jqXHR.abort();
     	                    if (!isBatch) {
     	                        self._setThumbStatus($thumb, 'New');
     	                        $thumb.removeClass('file-uploading');
     	                        $btnUpload.removeAttr('disabled');
     	                        $btnDelete.removeAttr('disabled');
     	                        self.unlock();
     	                    }
     	                    self._setProgressCancelled();
     	                }
     	            };
     	            fnSuccess = function (data, textStatus, jqXHR) {
     	                var pid = self.showPreview && $thumb.attr('id') ? $thumb.attr('id') : previewId;
     	                outData = self._getOutData(jqXHR, data);
     	                $.extend(true, params, outData);
     	                setTimeout(function () {
     	                    if ($h.isEmpty(data) || $h.isEmpty(data.error)) {
     	                        if (self.showPreview) {
     	                            self._setThumbStatus($thumb, 'Success');
     	                            $btnUpload.hide();
     	                            self._initUploadSuccess(data, $thumb, isBatch);
     	                            self._setProgress(101, $prog);
     	                        }
     	                        self._raise('fileuploaded', [outData, pid, i]);
     	                        if (!isBatch) {
     	                            self.updateStack(i, undefined);
     	                        } else {
     	                            updateUploadLog(i, pid);
     	                        }
     	                    } else {
     	                        uploadFailed = true;
     	                        self._showUploadError(data.error, params);
     	                        self._setPreviewError($thumb, i, self.filestack[i], self.retryErrorUploads);
     	                        if (!self.retryErrorUploads) {
     	                            $btnUpload.hide();
     	                        }
     	                        if (isBatch) {
     	                            updateUploadLog(i, pid);
     	                        }
     	                        self._setProgress(101, $('#' + pid).find('.file-thumb-progress'), self.msgUploadError);
     	                    }
     	                }, 100);
     	            };
     	            fnComplete = function () {
     	                setTimeout(function () {
     	                    if (self.showPreview) {
     	                        $btnUpload.removeAttr('disabled');
     	                        $btnDelete.removeAttr('disabled');
     	                        $thumb.removeClass('file-uploading');
     	                    }
     	                    if (!isBatch) {
     	                        self.unlock(false);
     	                        self._clearFileInput();
     	                    } else {
     	                        chkComplete();
     	                    }
     	                    self._initSuccessThumbs();
     	                }, 100);
     	            };
     	            fnError = function (jqXHR, textStatus, errorThrown) {
     	                var op = self.ajaxOperations.uploadThumb,
     	                    errMsg = self._parseError(op, jqXHR, errorThrown, (isBatch && self.filestack[i].name ? self.filestack[i].name : null));
     	                uploadFailed = true;
     	                setTimeout(function () {
     	                    if (isBatch) {
     	                        updateUploadLog(i, previewId);
     	                    }
     	                    self.uploadStatus[previewId] = 100;
     	                    self._setPreviewError($thumb, i, self.filestack[i], self.retryErrorUploads);
     	                    if (!self.retryErrorUploads) {
     	                        $btnUpload.hide();
     	                    }
     	                    $.extend(true, params, self._getOutData(jqXHR));
     	                    self._setProgress(101, $prog, self.msgAjaxProgressError.replace('{operation}', op));
     	                    self._setProgress(101, $('#' + previewId).find('.file-thumb-progress'), self.msgUploadError);
     	                    self._showUploadError(errMsg, params);
     	                }, 100);
     	            };
     	            formdata.append(self.uploadFileAttr, self.filestack[i], self.filenames[i]);
     	            formdata.append('file_id', i);
     	            self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, previewId, i);
     	        },
     	        _uploadBatch: function () {
     	            var self = this, files = self.filestack, total = files.length, params = {}, fnBefore, fnSuccess, fnError,
     	                fnComplete, hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),
     	                setAllUploaded;
     	            self.formdata = new FormData();
     	            if (total === 0 || !hasPostData || self._abort(params)) {
     	                return;
     	            }
     	            setAllUploaded = function () {
     	                $.each(files, function (key) {
     	                    self.updateStack(key, undefined);
     	                });
     	                self._clearFileInput();
     	            };
     	            fnBefore = function (jqXHR) {
     	                self.lock();
     	                var outData = self._getOutData(jqXHR);
     	                self.ajaxAborted = false;
     	                if (self.showPreview) {
     	                    self._getThumbs().each(function () {
     	                        var $thumb = $(this), $btnUpload = $thumb.find('.kv-file-upload'),
     	                            $btnDelete = $thumb.find('.kv-file-remove');
     	                        if (!$thumb.hasClass('file-preview-success')) {
     	                            self._setThumbStatus($thumb, 'Loading');
     	                            $h.addCss($thumb, 'file-uploading');
     	                        }
     	                        $btnUpload.attr('disabled', true);
     	                        $btnDelete.attr('disabled', true);
     	                    });
     	                }
     	                self._raise('filebatchpreupload', [outData]);
     	                if (self._abort(outData)) {
     	                    jqXHR.abort();
     	                    self._getThumbs().each(function () {
     	                        var $thumb = $(this), $btnUpload = $thumb.find('.kv-file-upload'),
     	                            $btnDelete = $thumb.find('.kv-file-remove');
     	                        if ($thumb.hasClass('file-preview-loading')) {
     	                            self._setThumbStatus($thumb, 'New');
     	                            $thumb.removeClass('file-uploading');
     	                        }
     	                        $btnUpload.removeAttr('disabled');
     	                        $btnDelete.removeAttr('disabled');
     	                    });
     	                    self._setProgressCancelled();
     	                }
     	            };
     	            fnSuccess = function (data, textStatus, jqXHR) {
     	                /** @namespace data.errorkeys */
     	                var outData = self._getOutData(jqXHR, data), key = 0,
     	                    $thumbs = self._getThumbs(':not(.file-preview-success)'),
     	                    keys = $h.isEmpty(data) || $h.isEmpty(data.errorkeys) ? [] : data.errorkeys;

     	                if ($h.isEmpty(data) || $h.isEmpty(data.error)) {
     	                    self._raise('filebatchuploadsuccess', [outData]);
     	                    setAllUploaded();
     	                    if (self.showPreview) {
     	                        $thumbs.each(function () {
     	                            var $thumb = $(this);
     	                            self._setThumbStatus($thumb, 'Success');
     	                            $thumb.removeClass('file-uploading');
     	                            $thumb.find('.kv-file-upload').hide().removeAttr('disabled');
     	                        });
     	                        self._initUploadSuccess(data);
     	                    } else {
     	                        self.reset();
     	                    }
     	                    self._setProgress(101);
     	                } else {
     	                    if (self.showPreview) {
     	                        $thumbs.each(function () {
     	                            var $thumb = $(this), i = $thumb.attr('data-fileindex');
     	                            $thumb.removeClass('file-uploading');
     	                            $thumb.find('.kv-file-upload').removeAttr('disabled');
     	                            $thumb.find('.kv-file-remove').removeAttr('disabled');
     	                            if (keys.length === 0 || $.inArray(key, keys) !== -1) {
     	                                self._setPreviewError($thumb, i, self.filestack[i], self.retryErrorUploads);
     	                                if (!self.retryErrorUploads) {
     	                                    $thumb.find('.kv-file-upload').hide();
     	                                    self.updateStack(i, undefined);
     	                                }
     	                            } else {
     	                                $thumb.find('.kv-file-upload').hide();
     	                                self._setThumbStatus($thumb, 'Success');
     	                                self.updateStack(i, undefined);
     	                            }
     	                            if (!$thumb.hasClass('file-preview-error') || self.retryErrorUploads) {
     	                                key++;
     	                            }
     	                        });
     	                        self._initUploadSuccess(data);
     	                    }
     	                    self._showUploadError(data.error, outData, 'filebatchuploaderror');
     	                    self._setProgress(101, self.$progress, self.msgUploadError);
     	                }
     	            };
     	            fnComplete = function () {
     	                self.unlock();
     	                self._initSuccessThumbs();
     	                self._clearFileInput();
     	                self._raise('filebatchuploadcomplete', [self.filestack, self._getExtraData()]);
     	            };
     	            fnError = function (jqXHR, textStatus, errorThrown) {
     	                var outData = self._getOutData(jqXHR), op = self.ajaxOperations.uploadBatch,
     	                    errMsg = self._parseError(op, jqXHR, errorThrown);
     	                self._showUploadError(errMsg, outData, 'filebatchuploaderror');
     	                self.uploadFileCount = total - 1;
     	                if (!self.showPreview) {
     	                    return;
     	                }
     	                self._getThumbs().each(function () {
     	                    var $thumb = $(this), key = $thumb.attr('data-fileindex');
     	                    $thumb.removeClass('file-uploading');
     	                    if (self.filestack[key] !== undefined) {
     	                        self._setPreviewError($thumb);
     	                    }
     	                });
     	                self._getThumbs().removeClass('file-uploading');
     	                self._getThumbs(' .kv-file-upload').removeAttr('disabled');
     	                self._getThumbs(' .kv-file-delete').removeAttr('disabled');
     	                self._setProgress(101, self.$progress, self.msgAjaxProgressError.replace('{operation}', op));
     	            };
     	            $.each(files, function (key, data) {
     	                if (!$h.isEmpty(files[key])) {
     	                    self.formdata.append(self.uploadFileAttr, data, self.filenames[key]);
     	                }
     	            });
     	            self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
     	        },
     	        _uploadExtraOnly: function () {
     	            var self = this, params = {}, fnBefore, fnSuccess, fnComplete, fnError;
     	            self.formdata = new FormData();
     	            if (self._abort(params)) {
     	                return;
     	            }
     	            fnBefore = function (jqXHR) {
     	                self.lock();
     	                var outData = self._getOutData(jqXHR);
     	                self._raise('filebatchpreupload', [outData]);
     	                self._setProgress(50);
     	                params.data = outData;
     	                params.xhr = jqXHR;
     	                if (self._abort(params)) {
     	                    jqXHR.abort();
     	                    self._setProgressCancelled();
     	                }
     	            };
     	            fnSuccess = function (data, textStatus, jqXHR) {
     	                var outData = self._getOutData(jqXHR, data);
     	                if ($h.isEmpty(data) || $h.isEmpty(data.error)) {
     	                    self._raise('filebatchuploadsuccess', [outData]);
     	                    self._clearFileInput();
     	                    self._initUploadSuccess(data);
     	                    self._setProgress(101);
     	                } else {
     	                    self._showUploadError(data.error, outData, 'filebatchuploaderror');
     	                }
     	            };
     	            fnComplete = function () {
     	                self.unlock();
     	                self._clearFileInput();
     	                self._raise('filebatchuploadcomplete', [self.filestack, self._getExtraData()]);
     	            };
     	            fnError = function (jqXHR, textStatus, errorThrown) {
     	                var outData = self._getOutData(jqXHR), op = self.ajaxOperations.uploadExtra,
     	                    errMsg = self._parseError(op, jqXHR, errorThrown);
     	                params.data = outData;
     	                self._showUploadError(errMsg, outData, 'filebatchuploaderror');
     	                self._setProgress(101, self.$progress, self.msgAjaxProgressError.replace('{operation}', op));
     	            };
     	            self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
     	        },
     	        _deleteFileIndex: function ($frame) {
     	            var self = this, ind = $frame.attr('data-fileindex');
     	            if (ind.substring(0, 5) === 'init_') {
     	                ind = parseInt(ind.replace('init_', ''));
     	                self.initialPreview = $h.spliceArray(self.initialPreview, ind);
     	                self.initialPreviewConfig = $h.spliceArray(self.initialPreviewConfig, ind);
     	                self.initialPreviewThumbTags = $h.spliceArray(self.initialPreviewThumbTags, ind);
     	                self.getFrames().each(function () {
     	                    var $nFrame = $(this), nInd = $nFrame.attr('data-fileindex');
     	                    if (nInd.substring(0, 5) === 'init_') {
     	                        nInd = parseInt(nInd.replace('init_', ''));
     	                        if (nInd > ind) {
     	                            nInd--;
     	                            $nFrame.attr('data-fileindex', 'init_' + nInd);
     	                        }
     	                    }
     	                });
     	                if (self.uploadAsync) {
     	                    self.cacheInitialPreview = self.getPreview();
     	                }
     	            }
     	        },
     	        _initFileActions: function () {
     	            var self = this, $preview = self.$preview;
     	            if (!self.showPreview) {
     	                return;
     	            }
     	            self._initZoomButton();
     	            self.getFrames(' .kv-file-remove').each(function () {
     	                var $el = $(this), $frame = $el.closest($h.FRAMES), hasError, id = $frame.attr('id'),
     	                    ind = $frame.attr('data-fileindex'), n, cap, status;
     	                self._handler($el, 'click', function () {
     	                    status = self._raise('filepreremove', [id, ind]);
     	                    if (status === false || !self._validateMinCount()) {
     	                        return false;
     	                    }
     	                    hasError = $frame.hasClass('file-preview-error');
     	                    $h.cleanMemory($frame);
     	                    $frame.fadeOut('slow', function () {
     	                        $h.cleanZoomCache($preview.find('#zoom-' + id));
     	                        self.updateStack(ind, undefined);
     	                        self._clearObjects($frame);
     	                        $frame.remove();
     	                        if (id && hasError) {
     	                            self.$errorContainer.find('li[data-file-id="' + id + '"]').fadeOut('fast', function () {
     	                                $(this).remove();
     	                                if (!self._errorsExist()) {
     	                                    self._resetErrors();
     	                                }
     	                            });
     	                        }
     	                        self._clearFileInput();
     	                        var filestack = self.getFileStack(true), chk = self.previewCache.count(),
     	                            len = filestack.length, hasThumb = self.showPreview && self.getFrames().length;
     	                        if (len === 0 && chk === 0 && !hasThumb) {
     	                            self.reset();
     	                        } else {
     	                            n = chk + len;
     	                            cap = n > 1 ? self._getMsgSelected(n) : (filestack[0] ? self._getFileNames()[0] : '');
     	                            self._setCaption(cap);
     	                        }
     	                        self._raise('fileremoved', [id, ind]);
     	                    });
     	                });
     	            });
     	            self.getFrames(' .kv-file-upload').each(function () {
     	                var $el = $(this);
     	                self._handler($el, 'click', function () {
     	                    var $frame = $el.closest($h.FRAMES), ind = $frame.attr('data-fileindex');
     	                    self.$progress.hide();
     	                    if ($frame.hasClass('file-preview-error') && !self.retryErrorUploads) {
     	                        return;
     	                    }
     	                    self._uploadSingle(ind, false);
     	                });
     	            });
     	        },
     	        _initPreviewActions: function () {
     	            var self = this, $preview = self.$preview, deleteExtraData = self.deleteExtraData || {},
     	                btnRemove = $h.FRAMES + ' .kv-file-remove', settings = self.fileActionSettings,
     	                origClass = settings.removeClass, errClass = settings.removeErrorClass,
     	                resetProgress = function () {
     	                    var hasFiles = self.isAjaxUpload ? self.previewCache.count() : self.$element.get(0).files.length;
     	                    if (!$preview.find($h.FRAMES).length && !hasFiles) {
     	                        self._setCaption('');
     	                        self.reset();
     	                        self.initialCaption = '';
     	                    }
     	                };
     	            self._initZoomButton();
     	            $preview.find(btnRemove).each(function () {
     	                var $el = $(this), vUrl = $el.data('url') || self.deleteUrl, vKey = $el.data('key'),
     	                    fnBefore, fnSuccess, fnError;
     	                if ($h.isEmpty(vUrl) || vKey === undefined) {
     	                    return;
     	                }
     	                var $frame = $el.closest($h.FRAMES), cache = self.previewCache.data,
     	                    settings, params, index = $frame.attr('data-fileindex'), config, extraData;
     	                index = parseInt(index.replace('init_', ''));
     	                config = $h.isEmpty(cache.config) && $h.isEmpty(cache.config[index]) ? null : cache.config[index];
     	                extraData = $h.isEmpty(config) || $h.isEmpty(config.extra) ? deleteExtraData : config.extra;
     	                if (typeof extraData === "function") {
     	                    extraData = extraData();
     	                }
     	                params = {id: $el.attr('id'), key: vKey, extra: extraData};
     	                fnBefore = function (jqXHR) {
     	                    self.ajaxAborted = false;
     	                    self._raise('filepredelete', [vKey, jqXHR, extraData]);
     	                    if (self._abort()) {
     	                        jqXHR.abort();
     	                    } else {
     	                        $el.removeClass(errClass);
     	                        $h.addCss($frame, 'file-uploading');
     	                        $h.addCss($el, 'disabled ' + origClass);
     	                    }
     	                };
     	                fnSuccess = function (data, textStatus, jqXHR) {
     	                    var n, cap;
     	                    if (!$h.isEmpty(data) && !$h.isEmpty(data.error)) {
     	                        params.jqXHR = jqXHR;
     	                        params.response = data;
     	                        self._showError(data.error, params, 'filedeleteerror');
     	                        $frame.removeClass('file-uploading');
     	                        $el.removeClass('disabled ' + origClass).addClass(errClass);
     	                        resetProgress();
     	                        return;
     	                    }
     	                    $frame.removeClass('file-uploading').addClass('file-deleted');
     	                    $frame.fadeOut('slow', function () {
     	                        index = parseInt(($frame.attr('data-fileindex')).replace('init_', ''));
     	                        self.previewCache.unset(index);
     	                        n = self.previewCache.count();
     	                        cap = n > 0 ? self._getMsgSelected(n) : '';
     	                        self._deleteFileIndex($frame);
     	                        self._setCaption(cap);
     	                        self._raise('filedeleted', [vKey, jqXHR, extraData]);
     	                        $h.cleanZoomCache($preview.find('#zoom-' + $frame.attr('id')));
     	                        self._clearObjects($frame);
     	                        $frame.remove();
     	                        resetProgress();
     	                    });
     	                };
     	                fnError = function (jqXHR, textStatus, errorThrown) {
     	                    var op = self.ajaxOperations.deleteThumb, errMsg = self._parseError(op, jqXHR, errorThrown);
     	                    params.jqXHR = jqXHR;
     	                    params.response = {};
     	                    self._showError(errMsg, params, 'filedeleteerror');
     	                    $frame.removeClass('file-uploading');
     	                    $el.removeClass('disabled ' + origClass).addClass(errClass);
     	                    resetProgress();
     	                };
     	                self._mergeAjaxCallback('beforeSend', fnBefore, 'delete');
     	                self._mergeAjaxCallback('success', fnSuccess, 'delete');
     	                self._mergeAjaxCallback('error', fnError, 'delete');
     	                settings = $.extend(true, {}, {
     	                    url: vUrl,
     	                    type: 'POST',
     	                    dataType: 'json',
     	                    data: $.extend(true, {}, {key: vKey}, extraData)
     	                }, self.ajaxDeleteSettings);
     	                self._handler($el, 'click', function () {
     	                    if (!self._validateMinCount()) {
     	                        return false;
     	                    }
     	                    self.ajaxAborted = false;
     	                    self._raise('filebeforedelete', [vKey, extraData]);
     	                    //noinspection JSUnresolvedVariable,JSHint
     	                    if (self.ajaxAborted instanceof Promise) {
     	                        self.ajaxAborted.then(function (result) {
     	                            if (!result) {
     	                                $.ajax(settings);
     	                            }
     	                        });
     	                    } else {
     	                        if (!self.ajaxAborted) {
     	                            $.ajax(settings);
     	                        }
     	                    }
     	                });
     	            });
     	            self.getFrames(' .kv-file-download').each(function () {
     	                var $el = $(this);
     	                self._handler($el, 'click', function () {
     	                    var a = document.createElement('a');
     	                    a.href = $el.attr('data-url');
     	                    a.download = $el.attr('data-caption');
     	                    a.target = '_blank';
     	                    a.click();
     	                });
     	            });
     	        },
     	        _hideFileIcon: function () {
     	            var self = this;
     	            if (self.overwriteInitial) {
     	                self.$captionContainer.removeClass('icon-visible');
     	            }
     	        },
     	        _showFileIcon: function () {
     	            var self = this;
     	            $h.addCss(self.$captionContainer, 'icon-visible');
     	        },
     	        _getSize: function (bytes) {
     	            var self = this, size = parseFloat(bytes), i, func = self.fileSizeGetter, sizes, out;
     	            if (!$.isNumeric(bytes) || !$.isNumeric(size)) {
     	                return '';
     	            }
     	            if (typeof func === 'function') {
     	                out = func(size);
     	            } else {
     	                if (size === 0) {
     	                    out = '0.00 B';
     	                } else {
     	                    i = Math.floor(Math.log(size) / Math.log(1024));
     	                    sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
     	                    out = (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + sizes[i];
     	                }
     	            }
     	            return self._getLayoutTemplate('size').replace('{sizeText}', out);
     	        },
     	        _generatePreviewTemplate: function (cat, data, fname, ftype, previewId, isError, size, frameClass, foot, ind, templ) {
     	            var self = this, caption = self.slug(fname), prevContent, zoomContent = '', styleAttribs = '',
     	                screenW = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
     	                config = screenW < 400 ? (self.previewSettingsSmall[cat] || self.defaults.previewSettingsSmall[cat]) :
     	                    (self.previewSettings[cat] || self.defaults.previewSettings[cat]),
     	                footer = foot || self._renderFileFooter(caption, size, 'auto', isError),
     	                hasIconSetting = self._getPreviewIcon(fname), typeCss = 'type-default',
     	                forcePrevIcon = hasIconSetting && self.preferIconicPreview,
     	                forceZoomIcon = hasIconSetting && self.preferIconicZoomPreview, getContent;
     	            if (config) {
     	                $.each(config, function (key, val) {
     	                    styleAttribs += key + ':' + val + ';';
     	                });
     	            }
     	            getContent = function (c, d, zoom, frameCss) {
     	                var id = zoom ? 'zoom-' + previewId : previewId, tmplt = self._getPreviewTemplate(c),
     	                    css = (frameClass || '') + ' ' + frameCss;
     	                if (self.frameClass) {
     	                    css = self.frameClass + ' ' + css;
     	                }
     	                if (zoom) {
     	                    css = css.replace(' ' + $h.SORT_CSS, '');
     	                }
     	                tmplt = self._parseFilePreviewIcon(tmplt, fname);
     	                if (c === 'text') {
     	                    d = $h.htmlEncode(d);
     	                }
     	                if (cat === 'object' && !ftype) {
     	                    $.each(self.defaults.fileTypeSettings, function (key, func) {
     	                        if (key === 'object' || key === 'other') {
     	                            return;
     	                        }
     	                        if (func(fname, ftype)) {
     	                            typeCss = 'type-' + key;
     	                        }
     	                    });
     	                }
     	                return tmplt.setTokens({
     	                    'previewId': id,
     	                    'caption': caption,
     	                    'frameClass': css,
     	                    'type': ftype,
     	                    'fileindex': ind,
     	                    'typeCss': typeCss,
     	                    'footer': footer,
     	                    'data': d,
     	                    'template': templ || cat,
     	                    'style': styleAttribs ? 'style="' + styleAttribs + '"' : ''
     	                });
     	            };
     	            ind = ind || previewId.slice(previewId.lastIndexOf('-') + 1);
     	            if (self.fileActionSettings.showZoom) {
     	                zoomContent = getContent((forceZoomIcon ? 'other' : cat), data, true, 'kv-zoom-thumb');
     	            }
     	            zoomContent = '\n' + self._getLayoutTemplate('zoomCache').replace('{zoomContent}', zoomContent);
     	            prevContent = getContent((forcePrevIcon ? 'other' : cat), data, false, 'kv-preview-thumb');
     	            return prevContent + zoomContent;
     	        },
     	        _previewDefault: function (file, previewId, isDisabled) {
     	            var self = this, $preview = self.$preview;
     	            if (!self.showPreview) {
     	                return;
     	            }
     	            var fname = file ? file.name : '', ftype = file ? file.type : '', content, size = file.size || 0,
     	                caption = self.slug(fname), isError = isDisabled === true && !self.isAjaxUpload,
     	                data = $h.objUrl.createObjectURL(file);
     	            self._clearDefaultPreview();
     	            content = self._generatePreviewTemplate('other', data, fname, ftype, previewId, isError, size);
     	            $preview.append("\n" + content);
     	            self._setThumbAttr(previewId, caption, size);
     	            if (isDisabled === true && self.isAjaxUpload) {
     	                self._setThumbStatus($('#' + previewId), 'Error');
     	            }
     	        },
     	        _previewFile: function (i, file, theFile, previewId, data, fileInfo) {
     	            if (!this.showPreview) {
     	                return;
     	            }
     	            var self = this, fname = file ? file.name : '', ftype = fileInfo.type, caption = fileInfo.name,
     	                cat = self._parseFileType(ftype, fname), types = self.allowedPreviewTypes, content,
     	                mimes = self.allowedPreviewMimeTypes, $preview = self.$preview, fsize = file.size || 0,
     	                chkTypes = types && types.indexOf(cat) >= 0, chkMimes = mimes && mimes.indexOf(ftype) !== -1,
     	                iData = (cat === 'text' || cat === 'html' || cat === 'image') ? theFile.target.result : data;
     	            /** @namespace window.DOMPurify */
     	            if (cat === 'html' && self.purifyHtml && window.DOMPurify) {
     	                iData = window.DOMPurify.sanitize(iData);
     	            }
     	            if (chkTypes || chkMimes) {
     	                content = self._generatePreviewTemplate(cat, iData, fname, ftype, previewId, false, fsize);
     	                self._clearDefaultPreview();
     	                $preview.append("\n" + content);
     	                var $img = $preview.find('#' + previewId + ' img');
     	                if ($img.length && self.autoOrientImage) {
     	                    $h.validateOrientation(file, function (value) {
     	                        if (!value) {
     	                            self._validateImage(previewId, caption, ftype, fsize, iData);
     	                            return;
     	                        }
     	                        var $zoomImg = $preview.find('#zoom-' + previewId + ' img'), css = 'rotate-' + value;
     	                        if (value > 4) {
     	                            css += ($img.width() > $img.height() ? ' is-portrait-gt4' : ' is-landscape-gt4');
     	                        }
     	                        $h.addCss($img, css);
     	                        $h.addCss($zoomImg, css);
     	                        self._raise('fileimageoriented', {'$img': $img, 'file': file});
     	                        self._validateImage(previewId, caption, ftype, fsize, iData);
     	                        $h.adjustOrientedImage($img);
     	                    });
     	                } else {
     	                    self._validateImage(previewId, caption, ftype, fsize, iData);
     	                }
     	            } else {
     	                self._previewDefault(file, previewId);
     	            }
     	            self._setThumbAttr(previewId, caption, fsize);
     	            self._initSortable();
     	        },
     	        _setThumbAttr: function (id, caption, size) {
     	            var self = this, $frame = $('#' + id);
     	            if ($frame.length) {
     	                size = size && size > 0 ? self._getSize(size) : '';
     	                $frame.data({'caption': caption, 'size': size});
     	            }
     	        },
     	        _setInitThumbAttr: function () {
     	            var self = this, data = self.previewCache.data, len = self.previewCache.count(), config,
     	                caption, size, previewId;
     	            if (len === 0) {
     	                return;
     	            }
     	            for (var i = 0; i < len; i++) {
     	                config = data.config[i];
     	                previewId = self.previewInitId + '-' + 'init_' + i;
     	                caption = $h.ifSet('caption', config, $h.ifSet('filename', config));
     	                size = $h.ifSet('size', config);
     	                self._setThumbAttr(previewId, caption, size);
     	            }
     	        },
     	        _slugDefault: function (text) {
     	            return $h.isEmpty(text) ? '' : String(text).replace(/[\[\]\/:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g, '_');
     	        },
     	        _updateFileDetails: function (numFiles) {
     	            var self = this, $el = self.$element, fileStack = self.getFileStack(),
     	                name = ($h.isIE(9) && $h.findFileName($el.val())) ||
     	                    ($el[0].files[0] && $el[0].files[0].name) || (fileStack.length && fileStack[0].name) || '',
     	                label = self.slug(name), n = self.isAjaxUpload ? fileStack.length : numFiles,
     	                nFiles = self.previewCache.count() + n, log = n === 1 ? label : self._getMsgSelected(nFiles);
     	            if (self.isError) {
     	                self.$previewContainer.removeClass('file-thumb-loading');
     	                self.$previewStatus.html('');
     	                self.$captionContainer.removeClass('icon-visible');
     	            } else {
     	                self._showFileIcon();
     	            }
     	            self._setCaption(log, self.isError);
     	            self.$container.removeClass('file-input-new file-input-ajax-new');
     	            if (arguments.length === 1) {
     	                self._raise('fileselect', [numFiles, label]);
     	            }
     	            if (self.previewCache.count()) {
     	                self._initPreviewActions();
     	            }
     	        },
     	        _setThumbStatus: function ($thumb, status) {
     	            var self = this;
     	            if (!self.showPreview) {
     	                return;
     	            }
     	            var icon = 'indicator' + status, msg = icon + 'Title',
     	                css = 'file-preview-' + status.toLowerCase(),
     	                $indicator = $thumb.find('.file-upload-indicator'),
     	                config = self.fileActionSettings;
     	            $thumb.removeClass('file-preview-success file-preview-error file-preview-loading');
     	            if (status === 'Success') {
     	                $thumb.find('.file-drag-handle').remove();
     	            }
     	            $indicator.html(config[icon]);
     	            $indicator.attr('title', config[msg]);
     	            $thumb.addClass(css);
     	            if (status === 'Error' && !self.retryErrorUploads) {
     	                $thumb.find('.kv-file-upload').attr('disabled', true);
     	            }
     	        },
     	        _setProgressCancelled: function () {
     	            var self = this;
     	            self._setProgress(101, self.$progress, self.msgCancelled);
     	        },
     	        _setProgress: function (p, $el, error) {
     	            var self = this, pct = Math.min(p, 100), out, pctLimit = self.progressUploadThreshold,
     	                t = p <= 100 ? self.progressTemplate : self.progressCompleteTemplate,
     	                template = pct < 100 ? self.progressTemplate : (error ? self.progressErrorTemplate : t);
     	            $el = $el || self.$progress;
     	            if (!$h.isEmpty(template)) {
     	                if (pctLimit && pct > pctLimit && p <= 100) {
     	                    out = template.setTokens({'percent': pctLimit, 'status': self.msgUploadThreshold});
     	                } else {
     	                    out = template.setTokens({'percent': pct, 'status': (p > 100 ? self.msgUploadEnd : pct + '%')});
     	                }
     	                $el.html(out);
     	                if (error) {
     	                    $el.find('[role="progressbar"]').html(error);
     	                }
     	            }
     	        },
     	        _setFileDropZoneTitle: function () {
     	            var self = this, $zone = self.$container.find('.file-drop-zone'), title = self.dropZoneTitle, strFiles;
     	            if (self.isClickable) {
     	                strFiles = $h.isEmpty(self.$element.attr('multiple')) ? self.fileSingle : self.filePlural;
     	                title += self.dropZoneClickTitle.replace('{files}', strFiles);
     	            }
     	            $zone.find('.' + self.dropZoneTitleClass).remove();
     	            if (!self.isAjaxUpload || !self.showPreview || $zone.length === 0 || self.getFileStack().length > 0 || !self.dropZoneEnabled) {
     	                return;
     	            }
     	            if ($zone.find($h.FRAMES).length === 0 && $h.isEmpty(self.defaultPreviewContent)) {
     	                $zone.prepend('<div class="' + self.dropZoneTitleClass + '">' + title + '</div>');
     	            }
     	            self.$container.removeClass('file-input-new');
     	            $h.addCss(self.$container, 'file-input-ajax-new');
     	        },
     	        _setAsyncUploadStatus: function (previewId, pct, total) {
     	            var self = this, sum = 0;
     	            self._setProgress(pct, $('#' + previewId).find('.file-thumb-progress'));
     	            self.uploadStatus[previewId] = pct;
     	            $.each(self.uploadStatus, function (key, value) {
     	                sum += value;
     	            });
     	            self._setProgress(Math.floor(sum / total));
     	        },
     	        _validateMinCount: function () {
     	            var self = this, len = self.isAjaxUpload ? self.getFileStack().length : self.$element.get(0).files.length;
     	            if (self.validateInitialCount && self.minFileCount > 0 && self._getFileCount(len - 1) < self.minFileCount) {
     	                self._noFilesError({});
     	                return false;
     	            }
     	            return true;
     	        },
     	        _getFileCount: function (fileCount) {
     	            var self = this, addCount = 0;
     	            if (self.validateInitialCount && !self.overwriteInitial) {
     	                addCount = self.previewCache.count();
     	                fileCount += addCount;
     	            }
     	            return fileCount;
     	        },
     	        _getFileId: function (file) {
     	            var self = this, custom = self.generateFileId, relativePath;
     	            if (typeof custom === 'function') {
     	                return custom(file, event);
     	            }
     	            if (!file) {
     	                return null;
     	            }
     	            /** @namespace file.webkitRelativePath */
     	            relativePath = String(file.webkitRelativePath || file.fileName || file.name || null);
     	            if (!relativePath) {
     	                return null;
     	            }
     	            return (file.size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));
     	        },
     	        _getFileName: function (file) {
     	            return file && file.name ? this.slug(file.name) : undefined;
     	        },
     	        _getFileIds: function (skipNull) {
     	            var self = this;
     	            return self.fileids.filter(function (n) {
     	                return (skipNull ? n !== undefined : n !== undefined && n !== null);
     	            });
     	        },
     	        _getFileNames: function (skipNull) {
     	            var self = this;
     	            return self.filenames.filter(function (n) {
     	                return (skipNull ? n !== undefined : n !== undefined && n !== null);
     	            });
     	        },
     	        _setPreviewError: function ($thumb, i, val, repeat) {
     	            var self = this;
     	            if (i !== undefined) {
     	                self.updateStack(i, val);
     	            }
     	            if (!self.showPreview) {
     	                return;
     	            }
     	            if (self.removeFromPreviewOnError && !repeat) {
     	                $thumb.remove();
     	                return;
     	            } else {
     	                self._setThumbStatus($thumb, 'Error');
     	            }
     	            self._refreshUploadButton($thumb, repeat);
     	        },
     	        _refreshUploadButton: function ($thumb, repeat) {
     	            var self = this, $btn = $thumb.find('.kv-file-upload'), cfg = self.fileActionSettings,
     	                icon = cfg.uploadIcon, title = cfg.uploadTitle;
     	            if (!$btn.length) {
     	                return;
     	            }
     	            if (repeat) {
     	                icon = cfg.uploadRetryIcon;
     	                title = cfg.uploadRetryTitle;
     	            }
     	            $btn.attr('title', title).html(icon);
     	        },
     	        _checkDimensions: function (i, chk, $img, $thumb, fname, type, params) {
     	            var self = this, msg, dim, tag = chk === 'Small' ? 'min' : 'max', limit = self[tag + 'Image' + type],
     	                $imgEl, isValid;
     	            if ($h.isEmpty(limit) || !$img.length) {
     	                return;
     	            }
     	            $imgEl = $img[0];
     	            dim = (type === 'Width') ? $imgEl.naturalWidth || $imgEl.width : $imgEl.naturalHeight || $imgEl.height;
     	            isValid = chk === 'Small' ? dim >= limit : dim <= limit;
     	            if (isValid) {
     	                return;
     	            }
     	            msg = self['msgImage' + type + chk].setTokens({'name': fname, 'size': limit});
     	            self._showUploadError(msg, params);
     	            self._setPreviewError($thumb, i, null);
     	        },
     	        _validateImage: function (previewId, fname, ftype, fsize, iData) {
     	            var self = this, $preview = self.$preview, params, w1, w2, $thumb = $preview.find("#" + previewId),
     	                i = $thumb.attr('data-fileindex'), $img = $thumb.find('img'), exifObject;
     	            fname = fname || 'Untitled';
     	            $img.one('load', function () {
     	                w1 = $thumb.width();
     	                w2 = $preview.width();
     	                if (w1 > w2) {
     	                    $img.css('width', '100%');
     	                }
     	                params = {ind: i, id: previewId};
     	                self._checkDimensions(i, 'Small', $img, $thumb, fname, 'Width', params);
     	                self._checkDimensions(i, 'Small', $img, $thumb, fname, 'Height', params);
     	                if (!self.resizeImage) {
     	                    self._checkDimensions(i, 'Large', $img, $thumb, fname, 'Width', params);
     	                    self._checkDimensions(i, 'Large', $img, $thumb, fname, 'Height', params);
     	                }
     	                self._raise('fileimageloaded', [previewId]);
     	                try {
     	                    exifObject = window.piexif ? window.piexif.load(iData) : null;
     	                } catch (err) {
     	                    exifObject = null;
     	                }
     	                self.loadedImages.push({
     	                    ind: i,
     	                    img: $img,
     	                    thumb: $thumb,
     	                    pid: previewId,
     	                    typ: ftype,
     	                    siz: fsize,
     	                    validated: false,
     	                    imgData: iData,
     	                    exifObj: exifObject
     	                });
     	                $thumb.data('exif', exifObject);
     	                self._validateAllImages();
     	            }).one('error', function () {
     	                self._raise('fileimageloaderror', [previewId]);
     	            }).each(function () {
     	                if (this.complete) {
     	                    $(this).trigger('load');
     	                } else {
     	                    if (this.error) {
     	                        $(this).trigger('error');
     	                    }
     	                }
     	            });
     	        },
     	        _validateAllImages: function () {
     	            var self = this, i, counter = {val: 0}, numImgs = self.loadedImages.length, config,
     	                fsize, minSize = self.resizeIfSizeMoreThan;
     	            if (numImgs !== self.totalImagesCount) {
     	                return;
     	            }
     	            self._raise('fileimagesloaded');
     	            if (!self.resizeImage) {
     	                return;
     	            }
     	            for (i = 0; i < self.loadedImages.length; i++) {
     	                config = self.loadedImages[i];
     	                if (config.validated) {
     	                    continue;
     	                }
     	                fsize = config.siz;
     	                if (fsize && fsize > minSize * 1000) {
     	                    self._getResizedImage(config, counter, numImgs);
     	                }
     	                self.loadedImages[i].validated = true;
     	            }
     	        },
     	        _getResizedImage: function (config, counter, numImgs) {
     	            var self = this, img = $(config.img)[0], width = img.naturalWidth, height = img.naturalHeight, blob,
     	                ratio = 1, maxWidth = self.maxImageWidth || width, maxHeight = self.maxImageHeight || height,
     	                isValidImage = !!(width && height), chkWidth, chkHeight, canvas = self.imageCanvas, dataURI,
     	                context = self.imageCanvasContext, type = config.typ, pid = config.pid, ind = config.ind,
     	                $thumb = config.thumb, throwError, msg, exifObj = config.exifObj, exifStr;
     	            throwError = function (msg, params, ev) {
     	                if (self.isAjaxUpload) {
     	                    self._showUploadError(msg, params, ev);
     	                } else {
     	                    self._showError(msg, params, ev);
     	                }
     	                self._setPreviewError($thumb, ind);
     	            };
     	            if (!self.filestack[ind] || !isValidImage || (width <= maxWidth && height <= maxHeight)) {
     	                if (isValidImage && self.filestack[ind]) {
     	                    self._raise('fileimageresized', [pid, ind]);
     	                }
     	                counter.val++;
     	                if (counter.val === numImgs) {
     	                    self._raise('fileimagesresized');
     	                }
     	                if (!isValidImage) {
     	                    throwError(self.msgImageResizeError, {id: pid, 'index': ind}, 'fileimageresizeerror');
     	                    return;
     	                }
     	            }
     	            type = type || self.resizeDefaultImageType;
     	            chkWidth = width > maxWidth;
     	            chkHeight = height > maxHeight;
     	            if (self.resizePreference === 'width') {
     	                ratio = chkWidth ? maxWidth / width : (chkHeight ? maxHeight / height : 1);
     	            } else {
     	                ratio = chkHeight ? maxHeight / height : (chkWidth ? maxWidth / width : 1);
     	            }
     	            self._resetCanvas();
     	            width *= ratio;
     	            height *= ratio;
     	            canvas.width = width;
     	            canvas.height = height;
     	            try {
     	                context.drawImage(img, 0, 0, width, height);
     	                dataURI = canvas.toDataURL(type, self.resizeQuality);
     	                if (exifObj) {
     	                    exifStr = window.piexif.dump(exifObj);
     	                    dataURI = window.piexif.insert(exifStr, dataURI);
     	                }
     	                blob = $h.dataURI2Blob(dataURI);
     	                self.filestack[ind] = blob;
     	                self._raise('fileimageresized', [pid, ind]);
     	                counter.val++;
     	                if (counter.val === numImgs) {
     	                    self._raise('fileimagesresized', [undefined, undefined]);
     	                }
     	                if (!(blob instanceof Blob)) {
     	                    throwError(self.msgImageResizeError, {id: pid, 'index': ind}, 'fileimageresizeerror');
     	                }
     	            }
     	            catch (err) {
     	                counter.val++;
     	                if (counter.val === numImgs) {
     	                    self._raise('fileimagesresized', [undefined, undefined]);
     	                }
     	                msg = self.msgImageResizeException.replace('{errors}', err.message);
     	                throwError(msg, {id: pid, 'index': ind}, 'fileimageresizeexception');
     	            }
     	        },
     	        _initBrowse: function ($container) {
     	            var self = this;
     	            if (self.showBrowse) {
     	                self.$btnFile = $container.find('.btn-file');
     	                self.$btnFile.append(self.$element);
     	            } else {
     	                self.$element.hide();
     	            }
     	        },
     	        _initCaption: function () {
     	            var self = this, cap = self.initialCaption || '';
     	            if (self.overwriteInitial || $h.isEmpty(cap)) {
     	                self.$caption.val('');
     	                return false;
     	            }
     	            self._setCaption(cap);
     	            return true;
     	        },
     	        _setCaption: function (content, isError) {
     	            var self = this, title, out, icon, n, cap, stack = self.getFileStack();
     	            if (!self.$caption.length) {
     	                return;
     	            }
     	            self.$captionContainer.removeClass('icon-visible');
     	            if (isError) {
     	                title = $('<div>' + self.msgValidationError + '</div>').text();
     	                n = stack.length;
     	                if (n) {
     	                    cap = n === 1 && stack[0] ? self._getFileNames()[0] : self._getMsgSelected(n);
     	                } else {
     	                    cap = self._getMsgSelected(self.msgNo);
     	                }
     	                out = $h.isEmpty(content) ? cap : content;
     	                icon = '<span class="' + self.msgValidationErrorClass + '">' + self.msgValidationErrorIcon + '</span>';
     	            } else {
     	                if ($h.isEmpty(content)) {
     	                    return;
     	                }
     	                title = $('<div>' + content + '</div>').text();
     	                out = title;
     	                icon = self._getLayoutTemplate('fileIcon');
     	            }
     	            self.$captionContainer.addClass('icon-visible');
     	            self.$caption.attr('title', title).val(out);
     	            self.$captionIcon.html(icon);
     	        },
     	        _createContainer: function () {
     	            var self = this, attribs = {"class": 'file-input file-input-new' + (self.rtl ? ' kv-rtl' : '')},
     	                $container = $(document.createElement("div")).attr(attribs).html(self._renderMain());
     	            self.$element.before($container);
     	            self._initBrowse($container);
     	            if (self.theme) {
     	                $container.addClass('theme-' + self.theme);
     	            }
     	            return $container;
     	        },
     	        _refreshContainer: function () {
     	            var self = this, $container = self.$container;
     	            $container.before(self.$element);
     	            $container.html(self._renderMain());
     	            self._initBrowse($container);
     	            self._validateDisabled();
     	        },
     	        _validateDisabled: function () {
     	            var self = this;
     	            self.$caption.attr({readonly: self.isDisabled});
     	        },
     	        _renderMain: function () {
     	            var self = this,
     	                dropCss = (self.isAjaxUpload && self.dropZoneEnabled) ? ' file-drop-zone' : 'file-drop-disabled',
     	                close = !self.showClose ? '' : self._getLayoutTemplate('close'),
     	                preview = !self.showPreview ? '' : self._getLayoutTemplate('preview')
     	                    .setTokens({'class': self.previewClass, 'dropClass': dropCss}),
     	                css = self.isDisabled ? self.captionClass + ' file-caption-disabled' : self.captionClass,
     	                caption = self.captionTemplate.setTokens({'class': css + ' kv-fileinput-caption'});
     	            return self.mainTemplate.setTokens({
     	                'class': self.mainClass + (!self.showBrowse && self.showCaption ? ' no-browse' : ''),
     	                'preview': preview,
     	                'close': close,
     	                'caption': caption,
     	                'upload': self._renderButton('upload'),
     	                'remove': self._renderButton('remove'),
     	                'cancel': self._renderButton('cancel'),
     	                'browse': self._renderButton('browse')
     	            });

     	        },
     	        _renderButton: function (type) {
     	            var self = this, tmplt = self._getLayoutTemplate('btnDefault'), css = self[type + 'Class'],
     	                title = self[type + 'Title'], icon = self[type + 'Icon'], label = self[type + 'Label'],
     	                status = self.isDisabled ? ' disabled' : '', btnType = 'button';
     	            switch (type) {
     	                case 'remove':
     	                    if (!self.showRemove) {
     	                        return '';
     	                    }
     	                    break;
     	                case 'cancel':
     	                    if (!self.showCancel) {
     	                        return '';
     	                    }
     	                    css += ' kv-hidden';
     	                    break;
     	                case 'upload':
     	                    if (!self.showUpload) {
     	                        return '';
     	                    }
     	                    if (self.isAjaxUpload && !self.isDisabled) {
     	                        tmplt = self._getLayoutTemplate('btnLink').replace('{href}', self.uploadUrl);
     	                    } else {
     	                        btnType = 'submit';
     	                    }
     	                    break;
     	                case 'browse':
     	                    if (!self.showBrowse) {
     	                        return '';
     	                    }
     	                    tmplt = self._getLayoutTemplate('btnBrowse');
     	                    break;
     	                default:
     	                    return '';
     	            }

     	            css += type === 'browse' ? ' btn-file' : ' fileinput-' + type + ' fileinput-' + type + '-button';
     	            if (!$h.isEmpty(label)) {
     	                label = ' <span class="' + self.buttonLabelClass + '">' + label + '</span>';
     	            }
     	            return tmplt.setTokens({
     	                'type': btnType, 'css': css, 'title': title, 'status': status, 'icon': icon, 'label': label
     	            });
     	        },
     	        _renderThumbProgress: function () {
     	            var self = this;
     	            return '<div class="file-thumb-progress kv-hidden">' +
     	                self.progressTemplate.setTokens({'percent': '0', 'status': self.msgUploadBegin}) +
     	                '</div>';
     	        },
     	        _renderFileFooter: function (caption, size, width, isError) {
     	            var self = this, config = self.fileActionSettings, rem = config.showRemove, drg = config.showDrag,
     	                upl = config.showUpload, zoom = config.showZoom, out,
     	                template = self._getLayoutTemplate('footer'), tInd = self._getLayoutTemplate('indicator'),
     	                ind = isError ? config.indicatorError : config.indicatorNew,
     	                title = isError ? config.indicatorErrorTitle : config.indicatorNewTitle,
     	                indicator = tInd.setTokens({'indicator': ind, 'indicatorTitle': title});
     	            size = self._getSize(size);
     	            if (self.isAjaxUpload) {
     	                out = template.setTokens({
     	                    'actions': self._renderFileActions(upl, false, rem, zoom, drg, false, false, false),
     	                    'caption': caption,
     	                    'size': size,
     	                    'width': width,
     	                    'progress': self._renderThumbProgress(),
     	                    'indicator': indicator
     	                });
     	            } else {
     	                out = template.setTokens({
     	                    'actions': self._renderFileActions(false, false, false, zoom, drg, false, false, false),
     	                    'caption': caption,
     	                    'size': size,
     	                    'width': width,
     	                    'progress': '',
     	                    'indicator': indicator
     	                });
     	            }
     	            out = $h.replaceTags(out, self.previewThumbTags);
     	            return out;
     	        },
     	        _renderFileActions: function (showUpl, showDwn, showDel, showZoom, showDrag, disabled, url, key, isInit, dUrl, dFile) {
     	            if (!showUpl && !showDwn && !showDel && !showZoom && !showDrag) {
     	                return '';
     	            }
     	            var self = this, vUrl = url === false ? '' : ' data-url="' + url + '"',
     	                vKey = key === false ? '' : ' data-key="' + key + '"', btnDelete = '', btnUpload = '', btnDownload = '',
     	                btnZoom = '', btnDrag = '', css, template = self._getLayoutTemplate('actions'),
     	                config = self.fileActionSettings,
     	                otherButtons = self.otherActionButtons.setTokens({'dataKey': vKey, 'key': key}),
     	                removeClass = disabled ? config.removeClass + ' disabled' : config.removeClass;
     	            if (showDel) {
     	                btnDelete = self._getLayoutTemplate('actionDelete').setTokens({
     	                    'removeClass': removeClass,
     	                    'removeIcon': config.removeIcon,
     	                    'removeTitle': config.removeTitle,
     	                    'dataUrl': vUrl,
     	                    'dataKey': vKey,
     	                    'key': key
     	                });
     	            }
     	            if (showUpl) {
     	                btnUpload = self._getLayoutTemplate('actionUpload').setTokens({
     	                    'uploadClass': config.uploadClass,
     	                    'uploadIcon': config.uploadIcon,
     	                    'uploadTitle': config.uploadTitle
     	                });
     	            }
     	            if (showDwn) {
     	                btnDownload = self._getLayoutTemplate('actionDownload').setTokens({
     	                    'downloadClass': config.downloadClass,
     	                    'downloadIcon': config.downloadIcon,
     	                    'downloadTitle': config.downloadTitle,
     	                    'downloadUrl': dUrl || self.initialPreviewDownloadUrl
     	                });
     	                btnDownload = btnDownload.setTokens({'filename': dFile, 'key': key});
     	            }
     	            if (showZoom) {
     	                btnZoom = self._getLayoutTemplate('actionZoom').setTokens({
     	                    'zoomClass': config.zoomClass,
     	                    'zoomIcon': config.zoomIcon,
     	                    'zoomTitle': config.zoomTitle
     	                });
     	            }
     	            if (showDrag && isInit) {
     	                css = 'drag-handle-init ' + config.dragClass;
     	                btnDrag = self._getLayoutTemplate('actionDrag').setTokens({
     	                    'dragClass': css,
     	                    'dragTitle': config.dragTitle,
     	                    'dragIcon': config.dragIcon
     	                });
     	            }
     	            return template.setTokens({
     	                'delete': btnDelete,
     	                'upload': btnUpload,
     	                'download': btnDownload,
     	                'zoom': btnZoom,
     	                'drag': btnDrag,
     	                'other': otherButtons
     	            });
     	        },
     	        _browse: function (e) {
     	            var self = this;
     	            self._raise('filebrowse');
     	            if (e && e.isDefaultPrevented()) {
     	                return;
     	            }
     	            if (self.isError && !self.isAjaxUpload) {
     	                self.clear();
     	            }
     	            self.$captionContainer.focus();
     	        },
     	        _filterDuplicate: function (file, files, fileIds) {
     	            var self = this, fileId = self._getFileId(file);
     	            if (fileId && fileIds && fileIds.indexOf(fileId) > -1) {
     	                return;
     	            }
     	            if (!fileIds) {
     	                fileIds = [];
     	            }
     	            files.push(file);
     	            fileIds.push(fileId);
     	        },
     	        _change: function (e) {
     	            var self = this, $el = self.$element;
     	            if (!self.isAjaxUpload && $h.isEmpty($el.val()) && self.fileInputCleared) { // IE 11 fix
     	                self.fileInputCleared = false;
     	                return;
     	            }
     	            self.fileInputCleared = false;
     	            var tfiles = [], msg, total, isDragDrop = arguments.length > 1, isAjaxUpload = self.isAjaxUpload, n, len,
     	                files = isDragDrop ? e.originalEvent.dataTransfer.files : $el.get(0).files, ctr = self.filestack.length,
     	                isSingleUpload = $h.isEmpty($el.attr('multiple')), flagSingle = (isSingleUpload && ctr > 0),
     	                folders = 0, fileIds = self._getFileIds(), throwError = function (mesg, file, previewId, index) {
     	                    var p1 = $.extend(true, {}, self._getOutData({}, {}, files), {id: previewId, index: index}),
     	                        p2 = {id: previewId, index: index, file: file, files: files};
     	                    return self.isAjaxUpload ? self._showUploadError(mesg, p1) : self._showError(mesg, p2);
     	                };
     	            self.reader = null;
     	            self._resetUpload();
     	            self._hideFileIcon();
     	            if (self.isAjaxUpload) {
     	                self.$container.find('.file-drop-zone .' + self.dropZoneTitleClass).remove();
     	            }
     	            if (isDragDrop) {
     	                $.each(files, function (i, f) {
     	                    if (f && !f.type && f.size !== undefined && f.size % 4096 === 0) {
     	                        folders++;
     	                    } else {
     	                        self._filterDuplicate(f, tfiles, fileIds);
     	                    }
     	                });
     	            } else {
     	                if (e.target && e.target.files === undefined) {
     	                    files = e.target.value ? [{name: e.target.value.replace(/^.+\\/, '')}] : [];
     	                } else {
     	                    files = e.target.files || {};
     	                }
     	                if (isAjaxUpload) {
     	                    $.each(files, function (i, f) {
     	                        self._filterDuplicate(f, tfiles, fileIds);
     	                    });
     	                } else {
     	                    tfiles = files;
     	                }
     	            }
     	            if ($h.isEmpty(tfiles) || tfiles.length === 0) {
     	                if (!isAjaxUpload) {
     	                    self.clear();
     	                }
     	                self._showFolderError(folders);
     	                self._raise('fileselectnone');
     	                return;
     	            }
     	            self._resetErrors();
     	            len = tfiles.length;
     	            total = self._getFileCount(self.isAjaxUpload ? (self.getFileStack().length + len) : len);
     	            if (self.maxFileCount > 0 && total > self.maxFileCount) {
     	                if (!self.autoReplace || len > self.maxFileCount) {
     	                    n = (self.autoReplace && len > self.maxFileCount) ? len : total;
     	                    msg = self.msgFilesTooMany.replace('{m}', self.maxFileCount).replace('{n}', n);
     	                    self.isError = throwError(msg, null, null, null);
     	                    self.$captionContainer.removeClass('icon-visible');
     	                    self._setCaption('', true);
     	                    self.$container.removeClass('file-input-new file-input-ajax-new');
     	                    return;
     	                }
     	                if (total > self.maxFileCount) {
     	                    self._resetPreviewThumbs(isAjaxUpload);
     	                }
     	            } else {
     	                if (!isAjaxUpload || flagSingle) {
     	                    self._resetPreviewThumbs(false);
     	                    if (flagSingle) {
     	                        self.clearStack();
     	                    }
     	                } else {
     	                    if (isAjaxUpload && ctr === 0 && (!self.previewCache.count() || self.overwriteInitial)) {
     	                        self._resetPreviewThumbs(true);
     	                    }
     	                }
     	            }
     	            if (self.isPreviewable) {
     	                self.readFiles(tfiles);
     	            } else {
     	                self._updateFileDetails(1);
     	            }
     	            self._showFolderError(folders);
     	        },
     	        _abort: function (params) {
     	            var self = this, data;
     	            if (self.ajaxAborted && typeof self.ajaxAborted === "object" && self.ajaxAborted.message !== undefined) {
     	                data = $.extend(true, {}, self._getOutData(), params);
     	                data.abortData = self.ajaxAborted.data || {};
     	                data.abortMessage = self.ajaxAborted.message;
     	                self._setProgress(101, self.$progress, self.msgCancelled);
     	                self._showUploadError(self.ajaxAborted.message, data, 'filecustomerror');
     	                self.cancel();
     	                return true;
     	            }
     	            return !!self.ajaxAborted;
     	        },
     	        _resetFileStack: function () {
     	            var self = this, i = 0, newstack = [], newnames = [], newids = [];
     	            self._getThumbs().each(function () {
     	                var $thumb = $(this), ind = $thumb.attr('data-fileindex'), file = self.filestack[ind],
     	                    pid = $thumb.attr('id'), newId;
     	                if (ind === '-1' || ind === -1) {
     	                    return;
     	                }
     	                if (file !== undefined) {
     	                    newstack[i] = file;
     	                    newnames[i] = self._getFileName(file);
     	                    newids[i] = self._getFileId(file);
     	                    $thumb.attr({'id': self.previewInitId + '-' + i, 'data-fileindex': i});
     	                    i++;
     	                } else {
     	                    newId = 'uploaded-' + $h.uniqId();
     	                    $thumb.attr({'id': newId, 'data-fileindex': '-1'});
     	                    self.$preview.find('#zoom-' + pid).attr('id', 'zoom-' + newId);
     	                }
     	            });
     	            self.filestack = newstack;
     	            self.filenames = newnames;
     	            self.fileids = newids;
     	        },
     	        _isFileSelectionValid: function (cnt) {
     	            var self = this;
     	            cnt = cnt || 0;
     	            if (self.required && !self.getFilesCount()) {
     	                self.$errorContainer.html('');
     	                self._showUploadError(self.msgFileRequired);
     	                return false;
     	            }
     	            if (self.minFileCount > 0 && self._getFileCount(cnt) < self.minFileCount) {
     	                self._noFilesError({});
     	                return false;
     	            }
     	            return true;
     	        },
     	        clearStack: function () {
     	            var self = this;
     	            self.filestack = [];
     	            self.filenames = [];
     	            self.fileids = [];
     	            return self.$element;
     	        },
     	        updateStack: function (i, file) {
     	            var self = this;
     	            self.filestack[i] = file;
     	            self.filenames[i] = self._getFileName(file);
     	            self.fileids[i] = file && self._getFileId(file) || null;
     	            return self.$element;
     	        },
     	        addToStack: function (file) {
     	            var self = this;
     	            self.filestack.push(file);
     	            self.filenames.push(self._getFileName(file));
     	            self.fileids.push(self._getFileId(file));
     	            return self.$element;
     	        },
     	        getFileStack: function (skipNull) {
     	            var self = this;
     	            return self.filestack.filter(function (n) {
     	                return (skipNull ? n !== undefined : n !== undefined && n !== null);
     	            });
     	        },
     	        getFilesCount: function () {
     	            var self = this, len = self.isAjaxUpload ? self.getFileStack().length : self.$element.get(0).files.length;
     	            return self._getFileCount(len);
     	        },
     	        readFiles: function (files) {
     	            this.reader = new FileReader();
     	            var self = this, $el = self.$element, $preview = self.$preview, reader = self.reader,
     	                $container = self.$previewContainer, $status = self.$previewStatus, msgLoading = self.msgLoading,
     	                msgProgress = self.msgProgress, previewInitId = self.previewInitId, numFiles = files.length,
     	                settings = self.fileTypeSettings, ctr = self.filestack.length, readFile,
     	                fileTypes = self.allowedFileTypes, typLen = fileTypes ? fileTypes.length : 0,
     	                fileExt = self.allowedFileExtensions, strExt = $h.isEmpty(fileExt) ? '' : fileExt.join(', '),
     	                maxPreviewSize = self.maxFilePreviewSize && parseFloat(self.maxFilePreviewSize),
     	                canPreview = $preview.length && (!maxPreviewSize || isNaN(maxPreviewSize)),
     	                throwError = function (msg, file, previewId, index) {
     	                    var p1 = $.extend(true, {}, self._getOutData({}, {}, files), {id: previewId, index: index}),
     	                        p2 = {id: previewId, index: index, file: file, files: files}, $thumb;
     	                    self._previewDefault(file, previewId, true);
     	                    if (self.isAjaxUpload) {
     	                        self.addToStack(undefined);
     	                        setTimeout(function () {
     	                            readFile(index + 1);
     	                        }, 100);
     	                    } else {
     	                        numFiles = 0;
     	                    }
     	                    self._initFileActions();
     	                    $thumb = $('#' + previewId);
     	                    $thumb.find('.kv-file-upload').hide();
     	                    if (self.removeFromPreviewOnError) {
     	                        $thumb.remove();
     	                    }
     	                    self.isError = self.isAjaxUpload ? self._showUploadError(msg, p1) : self._showError(msg, p2);
     	                    self._updateFileDetails(numFiles);
     	                };

     	            self.loadedImages = [];
     	            self.totalImagesCount = 0;

     	            $.each(files, function (key, file) {
     	                var func = self.fileTypeSettings.image;
     	                if (func && func(file.type)) {
     	                    self.totalImagesCount++;
     	                }
     	            });
     	            readFile = function (i) {
     	                if ($h.isEmpty($el.attr('multiple'))) {
     	                    numFiles = 1;
     	                }
     	                if (i >= numFiles) {
     	                    if (self.isAjaxUpload && self.filestack.length > 0) {
     	                        self._raise('filebatchselected', [self.getFileStack()]);
     	                    } else {
     	                        self._raise('filebatchselected', [files]);
     	                    }
     	                    $container.removeClass('file-thumb-loading');
     	                    $status.html('');
     	                    return;
     	                }
     	                var node = ctr + i, previewId = previewInitId + "-" + node, file = files[i], fSizeKB, j, msg,
     	                    fnText = settings.text, fnImage = settings.image, fnHtml = settings.html, typ, chk, typ1, typ2,
     	                    caption = file.name ? self.slug(file.name) : '', fileSize = (file.size || 0) / 1000,
     	                    fileExtExpr = '', previewData = $h.objUrl.createObjectURL(file), fileCount = 0, strTypes = '',
     	                    func, knownTypes = 0, isText, isHtml, isImage, txtFlag, processFileLoaded = function () {
     	                        var msg = msgProgress.setTokens({
     	                            'index': i + 1,
     	                            'files': numFiles,
     	                            'percent': 50,
     	                            'name': caption
     	                        });
     	                        setTimeout(function () {
     	                            $status.html(msg);
     	                            self._updateFileDetails(numFiles);
     	                            readFile(i + 1);
     	                        }, 100);
     	                        self._raise('fileloaded', [file, previewId, i, reader]);
     	                    };
     	                if (typLen > 0) {
     	                    for (j = 0; j < typLen; j++) {
     	                        typ1 = fileTypes[j];
     	                        typ2 = self.msgFileTypes[typ1] || typ1;
     	                        strTypes += j === 0 ? typ2 : ', ' + typ2;
     	                    }
     	                }
     	                if (caption === false) {
     	                    readFile(i + 1);
     	                    return;
     	                }
     	                if (caption.length === 0) {
     	                    msg = self.msgInvalidFileName.replace('{name}', $h.htmlEncode(file.name));
     	                    throwError(msg, file, previewId, i);
     	                    return;
     	                }
     	                if (!$h.isEmpty(fileExt)) {
     	                    fileExtExpr = new RegExp('\\.(' + fileExt.join('|') + ')$', 'i');
     	                }
     	                fSizeKB = fileSize.toFixed(2);
     	                if (self.maxFileSize > 0 && fileSize > self.maxFileSize) {
     	                    msg = self.msgSizeTooLarge.setTokens({
     	                        'name': caption,
     	                        'size': fSizeKB,
     	                        'maxSize': self.maxFileSize
     	                    });
     	                    throwError(msg, file, previewId, i);
     	                    return;
     	                }
     	                if (self.minFileSize !== null && fileSize <= $h.getNum(self.minFileSize)) {
     	                    msg = self.msgSizeTooSmall.setTokens({
     	                        'name': caption,
     	                        'size': fSizeKB,
     	                        'minSize': self.minFileSize
     	                    });
     	                    throwError(msg, file, previewId, i);
     	                    return;
     	                }
     	                if (!$h.isEmpty(fileTypes) && $h.isArray(fileTypes)) {
     	                    for (j = 0; j < fileTypes.length; j += 1) {
     	                        typ = fileTypes[j];
     	                        func = settings[typ];
     	                        fileCount += !func || (typeof func !== 'function') ? 0 : (func(file.type, file.name) ? 1 : 0);
     	                    }
     	                    if (fileCount === 0) {
     	                        msg = self.msgInvalidFileType.setTokens({'name': caption, 'types': strTypes});
     	                        throwError(msg, file, previewId, i);
     	                        return;
     	                    }
     	                }
     	                if (fileCount === 0 && !$h.isEmpty(fileExt) && $h.isArray(fileExt) && !$h.isEmpty(fileExtExpr)) {
     	                    chk = $h.compare(caption, fileExtExpr);
     	                    fileCount += $h.isEmpty(chk) ? 0 : chk.length;
     	                    if (fileCount === 0) {
     	                        msg = self.msgInvalidFileExtension.setTokens({'name': caption, 'extensions': strExt});
     	                        throwError(msg, file, previewId, i);
     	                        return;
     	                    }
     	                }
     	                if (!self.showPreview) {
     	                    if (self.isAjaxUpload) {
     	                        self.addToStack(file);
     	                    }
     	                    setTimeout(function () {
     	                        readFile(i + 1);
     	                        self._updateFileDetails(numFiles);
     	                    }, 100);
     	                    self._raise('fileloaded', [file, previewId, i, reader]);
     	                    return;
     	                }
     	                if (!canPreview && fileSize > maxPreviewSize) {
     	                    self.addToStack(file);
     	                    $container.addClass('file-thumb-loading');
     	                    self._previewDefault(file, previewId);
     	                    self._initFileActions();
     	                    self._updateFileDetails(numFiles);
     	                    readFile(i + 1);
     	                    return;
     	                }
     	                if ($preview.length && FileReader !== undefined) {
     	                    isText = fnText(file.type, caption);
     	                    isHtml = fnHtml(file.type, caption);
     	                    isImage = fnImage(file.type, caption);
     	                    $status.html(msgLoading.replace('{index}', i + 1).replace('{files}', numFiles));
     	                    $container.addClass('file-thumb-loading');
     	                    reader.onerror = function (evt) {
     	                        self._errorHandler(evt, caption);
     	                    };
     	                    reader.onload = function (theFile) {
     	                        var hex, fileInfo, uint, byte, bytes = [], contents, mime, readTextImage = function (textFlag) {
     	                            var newReader = new FileReader();
     	                            newReader.onerror = function (theFileNew) {
     	                                self._errorHandler(theFileNew, caption);
     	                            };
     	                            newReader.onload = function (theFileNew) {
     	                                self._previewFile(i, file, theFileNew, previewId, previewData, fileInfo);
     	                                self._initFileActions();
     	                                processFileLoaded();
     	                            };
     	                            if (textFlag) {
     	                                newReader.readAsText(file, self.textEncoding);
     	                            } else {
     	                                newReader.readAsDataURL(file);
     	                            }
     	                        };
     	                        fileInfo = {'name': caption, 'type': file.type};
     	                        $.each(settings, function (key, func) {
     	                            if (key !== 'object' && key !== 'other' && func(file.type, caption)) {
     	                                knownTypes++;
     	                            }
     	                        });
     	                        if (knownTypes === 0) {// auto detect mime types from content if no known file types detected
     	                            uint = new Uint8Array(theFile.target.result);
     	                            for (j = 0; j < uint.length; j++) {
     	                                byte = uint[j].toString(16);
     	                                bytes.push(byte);
     	                            }
     	                            hex = bytes.join('').toLowerCase().substring(0, 8);
     	                            mime = $h.getMimeType(hex, '', '');
     	                            if ($h.isEmpty(mime)) { // look for ascii text content
     	                                contents = $h.arrayBuffer2String(reader.result);
     	                                mime = $h.isSvg(contents) ? 'image/svg+xml' : $h.getMimeType(hex, contents, file.type);
     	                            }
     	                            fileInfo = {'name': caption, 'type': mime};
     	                            isText = fnText(mime, '');
     	                            isHtml = fnHtml(mime, '');
     	                            isImage = fnImage(mime, '');
     	                            txtFlag = isText || isHtml;
     	                            if (txtFlag || isImage) {
     	                                readTextImage(txtFlag);
     	                                return;
     	                            }
     	                        }
     	                        self._previewFile(i, file, theFile, previewId, previewData, fileInfo);
     	                        self._initFileActions();
     	                        processFileLoaded();
     	                    };
     	                    reader.onprogress = function (data) {
     	                        if (data.lengthComputable) {
     	                            var fact = (data.loaded / data.total) * 100, progress = Math.ceil(fact);
     	                            msg = msgProgress.setTokens({
     	                                'index': i + 1,
     	                                'files': numFiles,
     	                                'percent': progress,
     	                                'name': caption
     	                            });
     	                            setTimeout(function () {
     	                                $status.html(msg);
     	                            }, 100);
     	                        }
     	                    };

     	                    if (isText || isHtml) {
     	                        reader.readAsText(file, self.textEncoding);
     	                    } else {
     	                        if (isImage) {
     	                            reader.readAsDataURL(file);
     	                        } else {
     	                            reader.readAsArrayBuffer(file);
     	                        }
     	                    }
     	                } else {
     	                    self._previewDefault(file, previewId);
     	                    setTimeout(function () {
     	                        readFile(i + 1);
     	                        self._updateFileDetails(numFiles);
     	                    }, 100);
     	                    self._raise('fileloaded', [file, previewId, i, reader]);
     	                }
     	                self.addToStack(file);
     	            };

     	            readFile(0);
     	            self._updateFileDetails(numFiles, false);
     	        },
     	        lock: function () {
     	            var self = this;
     	            self._resetErrors();
     	            self.disable();
     	            if (self.showRemove) {
     	                self.$container.find('.fileinput-remove').hide();
     	            }
     	            if (self.showCancel) {
     	                self.$container.find('.fileinput-cancel').show();
     	            }
     	            self._raise('filelock', [self.filestack, self._getExtraData()]);
     	            return self.$element;
     	        },
     	        unlock: function (reset) {
     	            var self = this;
     	            if (reset === undefined) {
     	                reset = true;
     	            }
     	            self.enable();
     	            if (self.showCancel) {
     	                self.$container.find('.fileinput-cancel').hide();
     	            }
     	            if (self.showRemove) {
     	                self.$container.find('.fileinput-remove').show();
     	            }
     	            if (reset) {
     	                self._resetFileStack();
     	            }
     	            self._raise('fileunlock', [self.filestack, self._getExtraData()]);
     	            return self.$element;
     	        },
     	        cancel: function () {
     	            var self = this, xhr = self.ajaxRequests, len = xhr.length, i;
     	            if (len > 0) {
     	                for (i = 0; i < len; i += 1) {
     	                    self.cancelling = true;
     	                    xhr[i].abort();
     	                }
     	            }
     	            self._setProgressCancelled();
     	            self._getThumbs().each(function () {
     	                var $thumb = $(this), ind = $thumb.attr('data-fileindex');
     	                $thumb.removeClass('file-uploading');
     	                if (self.filestack[ind] !== undefined) {
     	                    $thumb.find('.kv-file-upload').removeClass('disabled').removeAttr('disabled');
     	                    $thumb.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled');
     	                }
     	                self.unlock();
     	            });
     	            return self.$element;
     	        },
     	        clear: function () {
     	            var self = this, cap;
     	            if (!self._raise('fileclear')) {
     	                return;
     	            }
     	            self.$btnUpload.removeAttr('disabled');
     	            self._getThumbs().find('video,audio,img').each(function () {
     	                $h.cleanMemory($(this));
     	            });
     	            self._resetUpload();
     	            self.clearStack();
     	            self._clearFileInput();
     	            self._resetErrors(true);
     	            if (self._hasInitialPreview()) {
     	                self._showFileIcon();
     	                self._resetPreview();
     	                self._initPreviewActions();
     	                self.$container.removeClass('file-input-new');
     	            } else {
     	                self._getThumbs().each(function () {
     	                    self._clearObjects($(this));
     	                });
     	                if (self.isAjaxUpload) {
     	                    self.previewCache.data = {};
     	                }
     	                self.$preview.html('');
     	                cap = (!self.overwriteInitial && self.initialCaption.length > 0) ? self.initialCaption : '';
     	                self.$caption.attr('title', '').val(cap);
     	                $h.addCss(self.$container, 'file-input-new');
     	                self._validateDefaultPreview();
     	            }
     	            if (self.$container.find($h.FRAMES).length === 0) {
     	                if (!self._initCaption()) {
     	                    self.$captionContainer.removeClass('icon-visible');
     	                }
     	            }
     	            self._hideFileIcon();
     	            self._raise('filecleared');
     	            self.$captionContainer.focus();
     	            self._setFileDropZoneTitle();
     	            return self.$element;
     	        },
     	        reset: function () {
     	            var self = this;
     	            if (!self._raise('filereset')) {
     	                return;
     	            }
     	            self._resetPreview();
     	            self.$container.find('.fileinput-filename').text('');
     	            $h.addCss(self.$container, 'file-input-new');
     	            if (self.getFrames().length || self.isAjaxUpload && self.dropZoneEnabled) {
     	                self.$container.removeClass('file-input-new');
     	            }
     	            self.clearStack();
     	            self.formdata = {};
     	            self._setFileDropZoneTitle();
     	            return self.$element;
     	        },
     	        disable: function () {
     	            var self = this;
     	            self.isDisabled = true;
     	            self._raise('filedisabled');
     	            self.$element.attr('disabled', 'disabled');
     	            self.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled");
     	            self.$container.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button")
     	                .attr("disabled", true);
     	            $h.addCss(self.$container.find('.btn-file'), 'disabled');
     	            self._initDragDrop();
     	            return self.$element;
     	        },
     	        enable: function () {
     	            var self = this;
     	            self.isDisabled = false;
     	            self._raise('fileenabled');
     	            self.$element.removeAttr('disabled');
     	            self.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled");
     	            self.$container.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button")
     	                .removeAttr("disabled");
     	            self.$container.find('.btn-file').removeClass('disabled');
     	            self._initDragDrop();
     	            return self.$element;
     	        },
     	        upload: function () {
     	            var self = this, totLen = self.getFileStack().length, i, outData, len,
     	                hasExtraData = !$.isEmptyObject(self._getExtraData());
     	            if (!self.isAjaxUpload || self.isDisabled || !self._isFileSelectionValid(totLen)) {
     	                return;
     	            }
     	            self._resetUpload();
     	            if (totLen === 0 && !hasExtraData) {
     	                self._showUploadError(self.msgUploadEmpty);
     	                return;
     	            }
     	            self.$progress.show();
     	            self.uploadCount = 0;
     	            self.uploadStatus = {};
     	            self.uploadLog = [];
     	            self.lock();
     	            self._setProgress(2);
     	            if (totLen === 0 && hasExtraData) {
     	                self._uploadExtraOnly();
     	                return;
     	            }
     	            len = self.filestack.length;
     	            self.hasInitData = false;
     	            if (self.uploadAsync) {
     	                outData = self._getOutData();
     	                self._raise('filebatchpreupload', [outData]);
     	                self.fileBatchCompleted = false;
     	                self.uploadCache = {content: [], config: [], tags: [], append: true};
     	                self.uploadAsyncCount = self.getFileStack().length;
     	                for (i = 0; i < len; i++) {
     	                    self.uploadCache.content[i] = null;
     	                    self.uploadCache.config[i] = null;
     	                    self.uploadCache.tags[i] = null;
     	                }
     	                self.$preview.find('.file-preview-initial').removeClass($h.SORT_CSS);
     	                self._initSortable();
     	                self.cacheInitialPreview = self.getPreview();

     	                for (i = 0; i < len; i++) {
     	                    if (self.filestack[i]) {
     	                        self._uploadSingle(i, true);
     	                    }
     	                }
     	                return;
     	            }
     	            self._uploadBatch();
     	            return self.$element;
     	        },
     	        destroy: function () {
     	            var self = this, $form = self.$form, $cont = self.$container, $el = self.$element, ns = self.namespace;
     	            $(document).off(ns);
     	            $(window).off(ns);
     	            if ($form && $form.length) {
     	                $form.off(ns);
     	            }
     	            if (self.isAjaxUpload) {
     	                self._clearFileInput();
     	            }
     	            self._cleanup();
     	            self._initPreviewCache();
     	            $el.insertBefore($cont).off(ns).removeData();
     	            $cont.off().remove();
     	            return $el;
     	        },
     	        refresh: function (options, triggerChange) {
     	            var self = this, $el = self.$element;
     	            if (typeof options !== 'object' || $h.isEmpty(options)) {
     	                options = self.options;
     	            } else {
     	                options = $.extend(true, {}, self.options, options);
     	            }
     	            self._init(options, true);
     	            self._listen();
     	            if (triggerChange) {
     	                $el.trigger('change' + self.namespace);
     	            }
     	            return $el;
     	        },
     	        zoom: function (frameId) {
     	            var self = this, $frame = self._getFrame(frameId), $modal = self.$modal;
     	            if (!$frame) {
     	                return;
     	            }
     	            $h.initModal($modal);
     	            $modal.html(self._getModalContent());
     	            self._setZoomContent($frame);
     	            $modal.modal('show');
     	            self._initZoomButtons();
     	        },
     	        getExif: function (frameId) {
     	            var self = this, $frame = self._getFrame(frameId);
     	            return $frame && $frame.data('exif') || null;
     	        },
     	        getFrames: function (cssFilter) {
     	            var self = this;
     	            cssFilter = cssFilter || '';
     	            return self.$preview.find($h.FRAMES + cssFilter);
     	        },
     	        getPreview: function () {
     	            var self = this;
     	            return {
     	                content: self.initialPreview,
     	                config: self.initialPreviewConfig,
     	                tags: self.initialPreviewThumbTags
     	            };
     	        }
     	    };

     	    $.fn.fileinput = function (option) {
     	        if (!$h.hasFileAPISupport() && !$h.isIE(9)) {
     	            return;
     	        }
     	        var args = Array.apply(null, arguments), retvals = [];
     	        args.shift();
     	        this.each(function () {
     	            var self = $(this), data = self.data('fileinput'), options = typeof option === 'object' && option,
     	                theme = options.theme || self.data('theme'), l = {}, t = {},
     	                lang = options.language || self.data('language') || $.fn.fileinput.defaults.language || 'en', opt;
     	            if (!data) {
     	                if (theme) {
     	                    t = $.fn.fileinputThemes[theme] || {};
     	                }
     	                if (lang !== 'en' && !$h.isEmpty($.fn.fileinputLocales[lang])) {
     	                    l = $.fn.fileinputLocales[lang] || {};
     	                }
     	                opt = $.extend(true, {}, $.fn.fileinput.defaults, t, $.fn.fileinputLocales.en, l, options, self.data());
     	                data = new FileInput(this, opt);
     	                self.data('fileinput', data);
     	            }

     	            if (typeof option === 'string') {
     	                retvals.push(data[option].apply(data, args));
     	            }
     	        });
     	        switch (retvals.length) {
     	            case 0:
     	                return this;
     	            case 1:
     	                return retvals[0];
     	            default:
     	                return retvals;
     	        }
     	    };

     	    $.fn.fileinput.defaults = {
     	        language: 'en',
     	        showCaption: true,
     	        showBrowse: true,
     	        showPreview: true,
     	        showRemove: true,
     	        showUpload: true,
     	        showCancel: true,
     	        showClose: true,
     	        showUploadedThumbs: true,
     	        browseOnZoneClick: false,
     	        autoReplace: false,
     	        autoOrientImage: true, // for JPEG images based on EXIF orientation tag
     	        required: false,
     	        rtl: false,
     	        hideThumbnailContent: false,
     	        generateFileId: null,
     	        previewClass: '',
     	        captionClass: '',
     	        frameClass: 'krajee-default',
     	        mainClass: 'file-caption-main',
     	        mainTemplate: null,
     	        purifyHtml: true,
     	        fileSizeGetter: null,
     	        initialCaption: '',
     	        initialPreview: [],
     	        initialPreviewDelimiter: '*$$*',
     	        initialPreviewAsData: false,
     	        initialPreviewFileType: 'image',
     	        initialPreviewConfig: [],
     	        initialPreviewThumbTags: [],
     	        previewThumbTags: {},
     	        initialPreviewShowDelete: true,
     	        initialPreviewDownloadUrl: '',
     	        removeFromPreviewOnError: false,
     	        deleteUrl: '',
     	        deleteExtraData: {},
     	        overwriteInitial: true,
     	        previewZoomButtonIcons: {
     	            prev: '<i class="glyphicon glyphicon-triangle-left"></i>',
     	            next: '<i class="glyphicon glyphicon-triangle-right"></i>',
     	            toggleheader: '<i class="glyphicon glyphicon-resize-vertical"></i>',
     	            fullscreen: '<i class="glyphicon glyphicon-fullscreen"></i>',
     	            borderless: '<i class="glyphicon glyphicon-resize-full"></i>',
     	            close: '<i class="glyphicon glyphicon-remove"></i>'
     	        },
     	        previewZoomButtonClasses: {
     	            prev: 'btn btn-navigate',
     	            next: 'btn btn-navigate',
     	            toggleheader: 'btn btn-kv btn-default btn-outline-secondary',
     	            fullscreen: 'btn btn-kv btn-default btn-outline-secondary',
     	            borderless: 'btn btn-kv btn-default btn-outline-secondary',
     	            close: 'btn btn-kv btn-default btn-outline-secondary'
     	        },
     	        preferIconicPreview: false,
     	        preferIconicZoomPreview: false,
     	        allowedPreviewTypes: undefined,
     	        allowedPreviewMimeTypes: null,
     	        allowedFileTypes: null,
     	        allowedFileExtensions: null,
     	        defaultPreviewContent: null,
     	        customLayoutTags: {},
     	        customPreviewTags: {},
     	        previewFileIcon: '<i class="glyphicon glyphicon-file"></i>',
     	        previewFileIconClass: 'file-other-icon',
     	        previewFileIconSettings: {},
     	        previewFileExtSettings: {},
     	        buttonLabelClass: 'hidden-xs',
     	        browseIcon: '<i class="glyphicon glyphicon-folder-open"></i>&nbsp;',
     	        browseClass: 'btn btn-primary',
     	        removeIcon: '<i class="glyphicon glyphicon-trash"></i>',
     	        removeClass: 'btn btn-default btn-secondary',
     	        cancelIcon: '<i class="glyphicon glyphicon-ban-circle"></i>',
     	        cancelClass: 'btn btn-default btn-secondary',
     	        uploadIcon: '<i class="glyphicon glyphicon-upload"></i>',
     	        uploadClass: 'btn btn-default btn-secondary',
     	        uploadUrl: null,
     	        uploadUrlThumb: null,
     	        uploadAsync: true,
     	        uploadExtraData: {},
     	        zoomModalHeight: 480,
     	        minImageWidth: null,
     	        minImageHeight: null,
     	        maxImageWidth: null,
     	        maxImageHeight: null,
     	        resizeImage: false,
     	        resizePreference: 'width',
     	        resizeQuality: 0.92,
     	        resizeDefaultImageType: 'image/jpeg',
     	        resizeIfSizeMoreThan: 0, // in KB
     	        minFileSize: 0,
     	        maxFileSize: 0,
     	        maxFilePreviewSize: 25600, // 25 MB
     	        minFileCount: 0,
     	        maxFileCount: 0,
     	        validateInitialCount: false,
     	        msgValidationErrorClass: 'text-danger',
     	        msgValidationErrorIcon: '<i class="glyphicon glyphicon-exclamation-sign"></i> ',
     	        msgErrorClass: 'file-error-message',
     	        progressThumbClass: "progress-bar bg-success progress-bar-success progress-bar-striped active",
     	        progressClass: "progress-bar bg-success progress-bar-success progress-bar-striped active",
     	        progressCompleteClass: "progress-bar bg-success progress-bar-success",
     	        progressErrorClass: "progress-bar bg-danger progress-bar-danger",
     	        progressUploadThreshold: 99,
     	        previewFileType: 'image',
     	        elCaptionContainer: null,
     	        elCaptionText: null,
     	        elPreviewContainer: null,
     	        elPreviewImage: null,
     	        elPreviewStatus: null,
     	        elErrorContainer: null,
     	        errorCloseButton: $h.closeButton('kv-error-close'),
     	        slugCallback: null,
     	        dropZoneEnabled: true,
     	        dropZoneTitleClass: 'file-drop-zone-title',
     	        fileActionSettings: {},
     	        otherActionButtons: '',
     	        textEncoding: 'UTF-8',
     	        ajaxSettings: {},
     	        ajaxDeleteSettings: {},
     	        showAjaxErrorDetails: true,
     	        mergeAjaxCallbacks: false,
     	        mergeAjaxDeleteCallbacks: false,
     	        retryErrorUploads: true
     	    };

     	    $.fn.fileinputLocales.en = {
     	        fileSingle: 'file',
     	        filePlural: 'files',
     	        browseLabel: 'Browse &hellip;',
     	        removeLabel: 'Remove',
     	        removeTitle: 'Clear selected files',
     	        cancelLabel: 'Cancel',
     	        cancelTitle: 'Abort ongoing upload',
     	        uploadLabel: 'Upload',
     	        uploadTitle: 'Upload selected files',
     	        msgNo: 'No',
     	        msgNoFilesSelected: 'No files selected',
     	        msgCancelled: 'Cancelled',
     	        msgPlaceholder: 'Select {files}...',
     	        msgZoomModalHeading: 'Detailed Preview',
     	        msgFileRequired: 'You must select a file to upload.',
     	        msgSizeTooSmall: 'File "{name}" (<b>{size} KB</b>) is too small and must be larger than <b>{minSize} KB</b>.',
     	        msgSizeTooLarge: 'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.',
     	        msgFilesTooLess: 'You must select at least <b>{n}</b> {files} to upload.',
     	        msgFilesTooMany: 'Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.',
     	        msgFileNotFound: 'File "{name}" not found!',
     	        msgFileSecured: 'Security restrictions prevent reading the file "{name}".',
     	        msgFileNotReadable: 'File "{name}" is not readable.',
     	        msgFilePreviewAborted: 'File preview aborted for "{name}".',
     	        msgFilePreviewError: 'An error occurred while reading the file "{name}".',
     	        msgInvalidFileName: 'Invalid or unsupported characters in file name "{name}".',
     	        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
     	        msgInvalidFileExtension: 'Invalid extension for file "{name}". Only "{extensions}" files are supported.',
     	        msgFileTypes: {
     	            'image': 'image',
     	            'html': 'HTML',
     	            'text': 'text',
     	            'video': 'video',
     	            'audio': 'audio',
     	            'flash': 'flash',
     	            'pdf': 'PDF',
     	            'object': 'object'
     	        },
     	        msgUploadAborted: 'The file upload was aborted',
     	        msgUploadThreshold: 'Processing...',
     	        msgUploadBegin: 'Initializing...',
     	        msgUploadEnd: 'Done',
     	        msgUploadEmpty: 'No valid data available for upload.',
     	        msgUploadError: 'Error',
     	        msgValidationError: 'Validation Error',
     	        msgLoading: 'Loading file {index} of {files} &hellip;',
     	        msgProgress: 'Loading file {index} of {files} - {name} - {percent}% completed.',
     	        msgSelected: '{n} {files} selected',
     	        msgFoldersNotAllowed: 'Drag & drop files only! {n} folder(s) dropped were skipped.',
     	        msgImageWidthSmall: 'Width of image file "{name}" must be at least {size} px.',
     	        msgImageHeightSmall: 'Height of image file "{name}" must be at least {size} px.',
     	        msgImageWidthLarge: 'Width of image file "{name}" cannot exceed {size} px.',
     	        msgImageHeightLarge: 'Height of image file "{name}" cannot exceed {size} px.',
     	        msgImageResizeError: 'Could not get the image dimensions to resize.',
     	        msgImageResizeException: 'Error while resizing the image.<pre>{errors}</pre>',
     	        msgAjaxError: 'Something went wrong with the {operation} operation. Please try again later!',
     	        msgAjaxProgressError: '{operation} failed',
     	        ajaxOperations: {
     	            deleteThumb: 'file delete',
     	            uploadThumb: 'file upload',
     	            uploadBatch: 'batch file upload',
     	            uploadExtra: 'form data upload'
     	        },
     	        dropZoneTitle: 'Drag & drop files here &hellip;',
     	        dropZoneClickTitle: '<br>(or click to select {files})',
     	        previewZoomButtonTitles: {
     	            prev: 'View previous file',
     	            next: 'View next file',
     	            toggleheader: 'Toggle header',
     	            fullscreen: 'Toggle full screen',
     	            borderless: 'Toggle borderless mode',
     	            close: 'Close detailed preview'
     	        }
     	    };

     	    $.fn.fileinput.Constructor = FileInput;

     	    /**
     	     * Convert automatically file inputs with class 'file' into a bootstrap fileinput control.
     	     */
     	    $(document).ready(function () {
     	        var $input = $('input.file[type=file]');
     	        if ($input.length) {
     	            $input.fileinput();
     	        }
     	    });
     	}));
   /*zh.js*/
     	/*!
     	 * FileInput Chinese Translations
     	 *
     	 * This file must be loaded after 'fileinput.js'. Patterns in braces '{}', or
     	 * any HTML markup tags in the messages must not be converted or translated.
     	 *
     	 * @see http://github.com/kartik-v/bootstrap-fileinput
     	 * @author kangqf <kangqingfei@gmail.com>
     	 *
     	 * NOTE: this file must be saved in UTF-8 encoding.
     	 */
     	(function ($) {
     	    "use strict";

     	    $.fn.fileinputLocales['zh'] = {
     	        fileSingle: '文件',
     	        filePlural: '个文件',
     	        browseLabel: '选择 &hellip;',
     	        removeLabel: '移除',
     	        removeTitle: '清除选中文件',
     	        cancelLabel: '取消',
     	        cancelTitle: '取消进行中的上传',
     	        uploadLabel: '上传',
     	        uploadTitle: '上传选中文件',
     	        msgNo: '没有',
     	        msgNoFilesSelected: '',
     	        msgCancelled: '取消',
     	        msgPlaceholder: 'Select {files}...',
     	        msgZoomModalHeading: '详细预览',
     	        msgFileRequired: '必须选择一个文件上传.',
     	        msgSizeTooSmall: '文件 "{name}" (<b>{size} KB</b>) 必须大于限定大小 <b>{minSize} KB</b>.',
     	        msgSizeTooLarge: '文件 "{name}" (<b>{size} KB</b>) 超过了允许大小 <b>{maxSize} KB</b>.',
     	        msgFilesTooLess: '你必须选择最少 <b>{n}</b> {files} 来上传. ',
     	        msgFilesTooMany: '选择的上传文件个数 <b>({n})</b> 超出最大文件的限制个数 <b>{m}</b>.',
     	        msgFileNotFound: '文件 "{name}" 未找到!',
     	        msgFileSecured: '安全限制，为了防止读取文件 "{name}".',
     	        msgFileNotReadable: '文件 "{name}" 不可读.',
     	        msgFilePreviewAborted: '取消 "{name}" 的预览.',
     	        msgFilePreviewError: '读取 "{name}" 时出现了一个错误.',
     	        msgInvalidFileName: '文件名 "{name}" 包含非法字符.',
     	        msgInvalidFileType: '不正确的类型 "{name}". 只支持 "{types}" 类型的文件.',
     	        msgInvalidFileExtension: '不正确的文件扩展名 "{name}". 只支持 "{extensions}" 的文件扩展名.',
     	        msgFileTypes: {
     	            'image': 'image',
     	            'html': 'HTML',
     	            'text': 'text',
     	            'video': 'video',
     	            'audio': 'audio',
     	            'flash': 'flash',
     	            'pdf': 'PDF',
     	            'object': 'object'
     	        },
     	        msgUploadAborted: '该文件上传被中止',
     	        msgUploadThreshold: '处理中...',
     	        msgUploadBegin: '正在初始化...',
     	        msgUploadEnd: '完成',
     	        msgUploadEmpty: '无效的文件上传.',
     	        msgUploadError: 'Error',
     	        msgValidationError: '验证错误',
     	        msgLoading: '加载第 {index} 文件 共 {files} &hellip;',
     	        msgProgress: '加载第 {index} 文件 共 {files} - {name} - {percent}% 完成.',
     	        msgSelected: '{n} {files} 选中',
     	        msgFoldersNotAllowed: '只支持拖拽文件! 跳过 {n} 拖拽的文件夹.',
     	        msgImageWidthSmall: '图像文件的"{name}"的宽度必须是至少{size}像素.',
     	        msgImageHeightSmall: '图像文件的"{name}"的高度必须至少为{size}像素.',
     	        msgImageWidthLarge: '图像文件"{name}"的宽度不能超过{size}像素.',
     	        msgImageHeightLarge: '图像文件"{name}"的高度不能超过{size}像素.',
     	        msgImageResizeError: '无法获取的图像尺寸调整。',
     	        msgImageResizeException: '调整图像大小时发生错误。<pre>{errors}</pre>',
     	        msgAjaxError: '{operation} 发生错误. 请重试!',
     	        msgAjaxProgressError: '{operation} 失败',
     	        ajaxOperations: {
     	            deleteThumb: '删除文件',
     	            uploadThumb: '上传文件',
     	            uploadBatch: '批量上传',
     	            uploadExtra: '表单数据上传'
     	        },
     	        dropZoneTitle: '拖拽文件到这里 &hellip;<br>支持多文件同时上传',
     	        dropZoneClickTitle: '<br>(或点击{files}按钮选择文件)',
     	        fileActionSettings: {
     	            removeTitle: '删除文件',
     	            uploadTitle: '上传文件',
     	            uploadRetryTitle: 'Retry upload',
     	            zoomTitle: '查看详情',
     	            dragTitle: '移动 / 重置',
     	            indicatorNewTitle: '没有上传',
     	            indicatorSuccessTitle: '上传',
     	            indicatorErrorTitle: '上传错误',
     	            indicatorLoadingTitle: '上传 ...'
     	        },
     	        previewZoomButtonTitles: {
     	            prev: '预览上一个文件',
     	            next: '预览下一个文件',
     	            toggleheader: '缩放',
     	            fullscreen: '全屏',
     	            borderless: '无边界模式',
     	            close: '关闭当前预览'
     	        }
     	    };
     	})(window.jQuery);
     	

/*evalute.js*/
/*!
 * FileInput Chinese Translations
 *
 * This file must be loaded after 'fileinput.js'. Patterns in braces '{}', or
 * any HTML markup tags in the messages must not be converted or translated.
 *
 * @see http://github.com/kartik-v/bootstrap-fileinput
 * @author kangqf <kangqingfei@gmail.com>
 *
 * NOTE: this file must be saved in UTF-8 encoding.
 */
(function ($) {
    "use strict";

    $.fn.fileinputLocales['zh'] = {
        fileSingle: '文件',
        filePlural: '个文件',
        browseLabel: '选择 &hellip;',
        removeLabel: '移除',
        removeTitle: '清除选中文件',
        cancelLabel: '取消',
        cancelTitle: '取消进行中的上传',
        uploadLabel: '上传',
        uploadTitle: '上传选中文件',
        msgNo: '没有',
        msgNoFilesSelected: '',
        msgCancelled: '取消',
        msgPlaceholder: 'Select {files}...',
        msgZoomModalHeading: '详细预览',
        msgFileRequired: '必须选择一个文件上传.',
        msgSizeTooSmall: '文件 "{name}" (<b>{size} KB</b>) 必须大于限定大小 <b>{minSize} KB</b>.',
        msgSizeTooLarge: '文件 "{name}" (<b>{size} KB</b>) 超过了允许大小 <b>{maxSize} KB</b>.',
        msgFilesTooLess: '你必须选择最少 <b>{n}</b> {files} 来上传. ',
        msgFilesTooMany: '选择的上传文件个数 <b>({n})</b> 超出最大文件的限制个数 <b>{m}</b>.',
        msgFileNotFound: '文件 "{name}" 未找到!',
        msgFileSecured: '安全限制，为了防止读取文件 "{name}".',
        msgFileNotReadable: '文件 "{name}" 不可读.',
        msgFilePreviewAborted: '取消 "{name}" 的预览.',
        msgFilePreviewError: '读取 "{name}" 时出现了一个错误.',
        msgInvalidFileName: '文件名 "{name}" 包含非法字符.',
        msgInvalidFileType: '不正确的类型 "{name}". 只支持 "{types}" 类型的文件.',
        msgInvalidFileExtension: '不正确的文件扩展名 "{name}". 只支持 "{extensions}" 的文件扩展名.',
        msgFileTypes: {
            'image': 'image',
            'html': 'HTML',
            'text': 'text',
            'video': 'video',
            'audio': 'audio',
            'flash': 'flash',
            'pdf': 'PDF',
            'object': 'object'
        },
        msgUploadAborted: '该文件上传被中止',
        msgUploadThreshold: '处理中...',
        msgUploadBegin: '正在初始化...',
        msgUploadEnd: '完成',
        msgUploadEmpty: '无效的文件上传.',
        msgUploadError: 'Error',
        msgValidationError: '验证错误',
        msgLoading: '加载第 {index} 文件 共 {files} &hellip;',
        msgProgress: '加载第 {index} 文件 共 {files} - {name} - {percent}% 完成.',
        msgSelected: '{n} {files} 选中',
        msgFoldersNotAllowed: '只支持拖拽文件! 跳过 {n} 拖拽的文件夹.',
        msgImageWidthSmall: '图像文件的"{name}"的宽度必须是至少{size}像素.',
        msgImageHeightSmall: '图像文件的"{name}"的高度必须至少为{size}像素.',
        msgImageWidthLarge: '图像文件"{name}"的宽度不能超过{size}像素.',
        msgImageHeightLarge: '图像文件"{name}"的高度不能超过{size}像素.',
        msgImageResizeError: '无法获取的图像尺寸调整。',
        msgImageResizeException: '调整图像大小时发生错误。<pre>{errors}</pre>',
        msgAjaxError: '{operation} 发生错误. 请重试!',
        msgAjaxProgressError: '{operation} 失败',
        ajaxOperations: {
            deleteThumb: '删除文件',
            uploadThumb: '上传文件',
            uploadBatch: '批量上传',
            uploadExtra: '表单数据上传'
        },
        dropZoneTitle: '拖拽文件到这里 &hellip;<br>支持多文件同时上传',
        dropZoneClickTitle: '<br>(或点击{files}按钮选择文件)',
        fileActionSettings: {
            removeTitle: '删除文件',
            uploadTitle: '上传文件',
            uploadRetryTitle: 'Retry upload',
            zoomTitle: '查看详情',
            dragTitle: '移动 / 重置',
            indicatorNewTitle: '没有上传',
            indicatorSuccessTitle: '上传',
            indicatorErrorTitle: '上传错误',
            indicatorLoadingTitle: '上传 ...'
        },
        previewZoomButtonTitles: {
            prev: '预览上一个文件',
            next: '预览下一个文件',
            toggleheader: '缩放',
            fullscreen: '全屏',
            borderless: '无边界模式',
            close: '关闭当前预览'
        }
    };
})(window.jQuery);


//
function getDataxx(){
	$("#zhankai").attr("class","fa fa-arrow-up");
	$("#zhankai").attr("onclick","shouqi()");
	$("#zhankai").attr("title","收起");
	var data = {};
	$.ajax({
		url:"/myehr/evaluation/findEvaluationList.action?formId="+realFormId,
		type:'post',
		cache: false,
		async: false,
		success: function (obj) {
			setDataxx(obj);
		}
	});
	return data;
}
function shouqi(){
	$("#zhankai").attr("class","fa fa-arrow-down");
	$("#zhankai").attr("onclick","getDataxx()");
	$("#zhankai").attr("title","展开");
	$('#xxxxx').html("");
}

function setDataxx(data){
	var cellCount = '';
	for(var i=0;i<data.length;i++){
		data[i].evaluationDatetime = new Date(data[i].evaluationDatetime).Format("yyyy-MM-dd");
		var photo ;
		$.ajax({ 
			   url:'/myehr/FileList/getEmpPhotoSYS.action?EMPID='+data[i].evaluationReplyip,
			   type:'post',
			   cache: false,
			   async: false, 
			   success: function (data){ 
				   photo = data[0];
			   }
	    });
		cellCount += '<div style="height:40px;width:40px;border-radius:50%;overflow:hidden;float:left"><img src="'+photo+'" style="width:100%;height:auto;"></div>';
		var cellObj = $(
				'<div class="comment-list">'+
				'<div class="comment-info">'+
				'	<div class="comment-right">'+
				'		<div style="height:40px;width:40px;border-radius:50%;overflow:hidden;position:absolute;top: 6px;"><img src="'+photo+'" style="width:100%;height:auto;"></div>'+
				'       <input type="hidden" name="evaluationId" value="'+data[i].evaluationId+'"/>'+
				'		<p style="padding-left:40px;">评论人:'+data[i].evaluationName+'</p>'+
				'		<p class="content" style="padding-left:40px;">评论内容:'+data[i].evaluationContent+'</p>'+
				'		<div class="comment-content-footer">'+
				'			<div class="row">'+
				'				<div class="col-md-10">'+
				'					<span style="position:  absolute;left: -150px;top:-44px;padding-left: 76px;">'+data[i].evaluationDatetime+'</span>'+
				'				</div>'+
				'				<div class="col-md-2"><span class="reply-btn" onclick="openReply(this)">回复</span></div>'+
				'			</div>'+
				'		</div>'+
				'		<div class="reply-list" id="replyxxxxx'+i+'">'+
				'		</div>'+
				'	</div>'+
				'  </div>'+
				' </div>');
		$('#xxxxx').append(cellObj);
		
		var dataReply= getReplyDatas(data[i].evaluationId);
		for(var k=0;k<dataReply.length;k++){
			dataReply[k].reply.replyTime = new Date(dataReply[k].reply.replyTime).Format("yyyy-MM-dd");
			var addReply =$(
				'<div class="reply" style="position:relative;padding:14px;padding-left:46px;">'+
				'	<div style="height:40px;width:40px;border-radius:50%;overflow:hidden;position:absolute;top: 8px;left: 4px;"><img src="'+dataReply[k].replyPhoto+'" style="width:100%;height:auto;"></div>'+
				'	<div style="padding-top:0px;"><a href="javascript:void(0)">'+dataReply[k].replyName+'</a>:<a href="javascript:void(0)">@'+data[i].evaluationName+'</a><span>'+dataReply[k].reply.replyContent+'</span></div>'+
				'	<p><span style="position:  absolute;left: -150px;top:16px;padding-left: 66px;">'+dataReply[k].reply.replyTime+'</span></p>'+
				'</div>');
			$('#replyxxxxx'+i).append(addReply);
			}
		}
		$('#countPhoto').append(cellCount+"<p style='line-height:40px'>共有"+data.length+"条评论</p>");
}

function referDataxxxx(){
	var content = $("#contentx").val();
	var assess={};
	assess.evaluationFormid=realFormId;
	assess.evaluationContent=content;
	$.ajax({
        url: '/myehr/evaluation/saveEvaluationList.action?formId='+realFormId,
	    type:'post',
		data: JSON.stringify(assess),
		cache: false,
		contentType: 'application/json;charset=utf-8',
        success: function(datas) { // 获取当前的数据
			if(datas=="1"){	
				alert("评价成功");
				location.reload();
			}
		}
	});
	return assess;
}
function getReplyDatas(e){
	var replyDatas={};
	$.ajax({
		url:"/myehr/evaluation/findReplyList.action?evaluationId="+e,
		type:'post',
		cache: false,
		async: false,
		success: function (obj) {
			replyDatas = obj;
		}
	});
	return replyDatas;
}

function openReply(e){
		var evaluationId=$(e).parent().parent().parent().parent().find("[name='evaluationId']").val();
		var textarea = ' <div class="row" style="width: 420px;  margin-left:7px; margin-top:10px;">'+  
							'<div class="col-sm-12">'+
								'<div class="input-group">'+ 
									'<textarea style="width:720px;height:126px;" placeholder="请输入内容......" class="mytextarea" id="replyText"></textarea>'+
								'</div> '+
							'</div>'+
						'</div>';		
		layer.open({
			title:'回复内容',
			shadeClose: true,
			zIndex:9999,
			content: textarea,
			area: ['800px', '280px'],
			btn: ['确定', '取消'],
			success:function(layero,index){
			},
			yes: function(index, layero){
				var replyxx = {};
				replyxx.replyContent = $("#replyText").val();
				replyxx.evaluationId = evaluationId;
				$.ajax({
						url:'/myehr/evaluation/SaveReplyList.action',
						type:'POST',
						data: JSON.stringify(replyxx),
					    cache: false,
					    contentType: 'application/json;charset=utf-8',
						async: false,
						success: function (data) {
							layer.alert('回复成功')
						}

				});
			  },
			btn2: function(index, layero){
				
			  }
	})

}

function initFileManage2New(shangchuanButton,yulanButton,deleteButton,uploadButton,tagCode,id,numLimit,sizeLimit,typeLimit,objType,objId){
	var objs = getFileByObjId(objType,objId);//所有检查点
	$("#newFile").html('								<input id="file-cn" name="file-es[]1" type="file" multiple/>\n'+
						 '								<input id="file-zh" name="file-zh[]" type="file" multiple/>');
	showFormDateNew(id,objs,'checkedFileManage',true,true,true,true,tagCode,numLimit,sizeLimit,typeLimit,objType,objId);
}
function initFileManage2His(shangchuanButton,yulanButton,deleteButton,uploadButton,tagCode,id,numLimit,sizeLimit,typeLimit,objType,objId){
	var objs = getFileByObjIdHis(objType,objId);//所有检查点
	var tableObj='<h3 class="CCFubiaoTitle" style="display: block; font-size: 18px; text-align: left; height: 36px; line-height: 33px; padding-left: 16px; color: rgb(102, 102, 102); cursor: pointer; margin: 0px;">表单附件管理</h3>\n'+
				 '<div class="wrapper wrapper-content animated fadeInRight" style="padding-top:0;margin-bottom:50px" id="testCheckedWall">\n'+
				 '</div>\n';
	$("#"+id).after(tableObj);
	var checkedObj = '<div class="row" style="margin-left:0;margin-top:10px;text-align:left;margin-right:0px;padding:0"  id="checkedFileManage">\n'+
					 '	 <div class="col-md-12 col-sm-12 col-lg-12 singleShow" style="border:1px solid #e7eaec;padding-top:5px;background-color: #FFF;">\n'+
					 '			 <div class="col-sm-11">\n'+
					 '				<div class="row cell" style="border:0">\n'+
					 '					<div class="col-sm-12 animated fadeInRight">\n'+
					 '						<div class="row">\n'+
					 '							<div id="file_wall_view" class="col-sm-12" style="padding-left:0">\n'+
					 '								<input id="file-es" name="file-es[]" type="file" multiple/>\n'+
					 '								<div id="newFile"></div>'+
					 '							</div>\n'+
					 '						</div>\n'+
					 '					</div>\n'+
					 '				</div>\n'+
					 '			 </div>\n'+
					 '	 </div>\n'+
					 '</div>\n';
	$("#testCheckedWall").append(checkedObj);
	showFormDateHis(id,objs,'checkedFileManage',true,false,false,true,tagCode,numLimit,sizeLimit,typeLimit,objType,objId);
}

//文件下载
function showFormDateNew(id,arr,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode,numLimit,sizeLimit,typeLimit,objType,objId) {
	var previewSrcArr = [];
	var configArr = [];
	if(arr!=null){
		for (var i = arr.length - 1; i >= 0; i--) {
			previewSrcArr[i]=arr[i].filepath;
			var obj = {};
			obj.caption = arr[i].filename+'_'+arr[i].fileid;
			obj.type = arr[i].clientfilename;
			if(obj.type=='video'){
				obj.filetype="video/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			if(obj.type=='audio'){
				obj.filetype="audio/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			obj.size = arr[i].file_size;
			obj.key = i;
			configArr[i] = obj;
		}
	}
	var deleteButtonAC = '';
	var uploadButtonAC = '';
	var yulanButtonAC = '';
	if(deleteButton){
		deleteButtonAC = '<button type="button" class="kv-file-remove btn btn-kv btn-default btn-outline-secondary" {dataKey} title="删除附件" onclick="deleteAction(this,\'\',\'form\')"><i class="glyphicon glyphicon-trash"></i></button>';
	}
	if(yulanButton){
		yulanButtonAC = '<i class="glyphicon glyphicon-king"></i>';
	}
	
	//文件预览
	$("#"+e).find("[name='file-es[]1']").fileinput({
		theme: 'fa',
		language: 'zh',
		showUpload: false,
		showCaption: false,
		browseClass: "btn btn-primary btn-lg hidden",
		fileType: "any",
		previewFileIcon: true,
		overwriteInitial: false,
		showRemove:false,
		initialPreviewAsData: true,
		initialPreview: previewSrcArr,
		initialPreviewConfig:configArr,
		allowedPreviewTypes:'',
		otherActionButtons:uploadButtonAC,
		layoutTemplates:{
			actionDelete:deleteButtonAC,
		}
	});
	
	if(shangchuanButton){
		$("#"+e).find("[name='file-zh[]']").fileinput({
			theme: 'fa',
			language: 'zh',
			showPreview :true,
			showCaption:false,
			allowedFileExtensions : null,
			//uploadExtraData:expandParams(),
			maxFileCount:numLimit, //表示允许同时上传的最大文件个数newFileUp
			maxFileSize:sizeLimit,
			allowedFileExtensions:typeLimit,
			msgFilesTooMany: "选择上传的文件数量({n}) 超过允许的最大数值{m}！",
			msgSizeTooLarge: "文件 ({name}) (<b>{size} KB</b>) 超过了允许大小 <b>{maxSize} KB</b>",
			uploadUrl: "/myehr/FileList/newFileUp.action?tag="+tags+"&objId="+objId+"&objType="+objType//上传的地址,执行上传文件和更新检查点文件的操作
		}).on("fileuploaded", function(event, data) {
			initFileManage2New('','','','','',id,numLimit,sizeLimit,typeLimit,objType,objId);
			changeFileCss();
		})
		$("#"+e).find("[name='file-zh[]']").on('filebatchselected', function(event, data, previewId, index) {
			  var content = "<div id='batchUp' class='row cell' style='border:none;line-height:25px;height:95%;overflow:auto;' >\n"+
							"<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n"+
							"<h5 class=\"tag-title\">标签</h5>\n"+
							"<input id=\"tag\" name=\"tag\" type=\"hidden\"/>\n"+
							"<div id=\"fileManage_tagType\">\n"+
							"</div>\n"+
							"</div>\n"+
							"</div>\n";
			layer.open({
				title:'输入内容',
				shadeClose: true,
				zIndex:9999,
				content: content,
				area: ['500px', '300px'],
				btn: ['确定', '取消'],
				success: function(layero, index){
					addHtml(tagCode,'fileManage_tagType');
				},
				yes: function(index, layero){
					layer.close(index);
				  
				},
				btn2: function(index, layero){
				 
				}
			});
		});
	}else{
		$("button").remove(".kv-file-zoom");
		$("#"+e).find("[name='file-zh[]']").css("display","none");
	}
}

function showFormDateHis(id,arr,e,yulanButton,deleteButton,uploadButton,shangchuanButton,tagCode,numLimit,sizeLimit,typeLimit,objType,objId) {
	var previewSrcArr = [];
	var configArr = [];
	if(arr!=null){
		for (var i = arr.length - 1; i >= 0; i--) {
			previewSrcArr[i]=arr[i].filepath;
			var obj = {};
			obj.caption = arr[i].filename+'_'+arr[i].fileid;
			obj.type = arr[i].clientfilename;
			if(obj.type=='video'){
				obj.filetype="video/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			if(obj.type=='audio'){
				obj.filetype="audio/"+obj.caption.split(".")[obj.caption.split(".").length-1].split("_")[0];
			}
			obj.size = arr[i].file_size;
			obj.key = i;
			configArr[i] = obj;
		}
	}
	var deleteButtonAC = '';
	var uploadButtonAC = '';
	var yulanButtonAC = '';
	if(deleteButton){
		deleteButtonAC = '<button type="button" class="kv-file-remove btn btn-kv btn-default btn-outline-secondary" {dataKey} title="删除附件" onclick="deleteAction(this,\'\',\'form\')"><i class="glyphicon glyphicon-trash"></i></button>';
	}
	if(true){
		uploadButtonAC = '<button type="button" class="kv-file-down btn btn-kv btn-default" {dataKey} title="下载附件" onclick="getFileData(this)"><i class="fa fa-cloud-download"></i></button>';
	}
	if(yulanButton){
		yulanButtonAC = '<i class="glyphicon glyphicon-king"></i>';
	}
	
	//文件预览
	$("#"+e).find("[name='file-es[]']").fileinput({
		theme: 'fa',
		language: 'zh',
		showUpload: false,
		showCaption: false,
		browseClass: "btn btn-primary btn-lg hidden",
		fileType: "any",
		previewFileIcon: true,
		overwriteInitial: false,
		showRemove:false,
		initialPreviewAsData: true,
		initialPreview: previewSrcArr,
		initialPreviewConfig:configArr,
		allowedPreviewTypes:'',
		otherActionButtons:uploadButtonAC,
		layoutTemplates:{
			actionDelete:deleteButtonAC,
		}
	});
	changeFileCss();
}

function refreshDictCache(formId,buttonId){
	$.ajax({
		url:'/myehr/form/refreshDictCache.action?formId='+formId+'&buttonId='+buttonId,
		type : 'POST',
		cache : false
	})
}
